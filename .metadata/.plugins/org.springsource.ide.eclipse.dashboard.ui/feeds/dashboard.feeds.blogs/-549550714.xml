<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Spring</title>
  <link rel="alternate" href="https://spring.io/blog" />
  <link rel="self" href="https://spring.io/blog.atom" />
  <id>http://spring.io/blog.atom</id>
  <icon>https://spring.io/favicon.ico</icon>
  <updated>2020-05-01T05:31:01Z</updated>
  <entry>
    <title>Spring Boot 2.3.0.RC1 available now</title>
    <link rel="alternate" href="https://spring.io/blog/2020/05/01/spring-boot-2-3-0-rc1-available-now" />
    <category term="releases" label="Releases" />
    <author>
      <name>Phil Webb</name>
    </author>
    <id>tag:spring.io,2020-05-01:4051</id>
    <updated>2020-05-01T05:31:01Z</updated>
    <content type="html">&lt;p&gt;On behalf of the team and everyone that contributed, I am pleased to announce that the first release candidate of Spring Boot 2.3 is available now from &lt;a href="https://repo.spring.io/milestone/"&gt;our milestone repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This release closes over &lt;a href="https://github.com/spring-projects/spring-boot/releases/tag/v2.3.0.RC1"&gt;70 issues and pull requests&lt;/a&gt;. Thanks to all those who have contributed.&lt;/p&gt;
&lt;p&gt;Highlights of this milestone include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Auto-configuration of a Wavefront sender bean.&lt;/li&gt;
  &lt;li&gt;Easier configuration of the data/time converts used by web applications.&lt;/li&gt;
  &lt;li&gt;Automatic creation of the &lt;code&gt;developmentOnly&lt;/code&gt; configuration in Gradle.&lt;/li&gt;
  &lt;li&gt;Java buildpack support from the newly created &lt;a href="https://paketo.io/"&gt;Paketo&lt;/a&gt; project.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For a complete list of changes and upgrade instructions, please see the &lt;a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.3.0-RC1-Release-Notes"&gt;Spring Boot 2.3 Release Notes&lt;/a&gt; on the wiki and the &lt;a href="http://docs.spring.io/spring-boot/docs/2.3.0.RC1/reference/html/"&gt;updated reference documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Barring any unforeseen circumstances, our current plan is to release 2.3.0 GA on May 14, so please give the RC a try if you can. To bootstrap a new project, you can head over to &lt;a href="https://start.spring.io"&gt;https://start.spring.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://projects.spring.io/spring-boot/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot/issues"&gt;Issues&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-boot/docs/2.3.0.RC1/reference/html"&gt;Documentation&lt;/a&gt; | &lt;a href="http://stackoverflow.com/questions/tagged/spring-boot"&gt;Stack Overflow&lt;/a&gt; | &lt;a href="https://gitter.im/spring-projects/spring-boot"&gt;Gitter&lt;/a&gt;&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Adrian Cole, founder or co-founder of Feign, JClouds, and Spring Cloud Sleuth and major contributor to OpenZipkin</title>
    <link rel="alternate" href="https://spring.io/blog/2020/05/01/adrian-cole-founder-or-co-founder-of-feign-jclouds-and-spring-cloud-sleuth-and-major-contributor-to-openzipkin" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2020-05-01:4050</id>
    <updated>2020-05-01T03:36:37Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! In this installment &lt;a href="http://twitter.com/starbuxman"&gt;Josh Long (@starbuxman)&lt;/a&gt; talks to the founder of - among other things - Feign, JCloud, and Spring Cloud Sleuth - &lt;a href="https://twitter.com/adrianfcole"&gt;Adrian Cole (@adrianfcole)&lt;/a&gt; about distributed tracing, Zipkin, and more. &lt;/p&gt;
&lt;iframe title="Adrian Cole, founder or co-founder of Feign, JClouds, and Spring Cloud Sleuth and major contributor to OpenZipkin" src="https://www.podbean.com/media/player/ser7i-db042c?from=usersite&amp;vjs=1&amp;skin=1&amp;fonts=Helvetica&amp;auto=0&amp;download=1" height="315" width="100%" style="border: none;" scrolling="no" data-name="pb-iframe-player"&gt;&lt;/iframe&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring for Apache Kafka 2.5.0 Release Candidate</title>
    <link rel="alternate" href="https://spring.io/blog/2020/04/30/spring-for-apache-kafka-2-5-0-release-candidate" />
    <category term="releases" label="Releases" />
    <author>
      <name>Gary Russell</name>
    </author>
    <id>tag:spring.io,2020-04-30:4049</id>
    <updated>2020-04-30T20:46:56Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;The &lt;code&gt;2.5.0.RC1&lt;/code&gt; release candidate is now avaialable in the &lt;a href="https://repo.spring.io/milestone"&gt;Spring milestone repo&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Highlights:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;kafka-clients&lt;/code&gt; 2.5.0 (alignment of version numbers is coincidental).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support for re-committing retryable offset commit exceptions for retained partitions when using cooperative rebalancing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support for the new "fetch-offset-request" procuder fencing (when brokers are 2.5 or higher), requiring fewer producers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support for static group membership.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;More integration with Micrometer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optional Delivery Attempts header.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;RecoveringBatchErrorHandler&lt;/code&gt; can commit a partial batch and replay from failed record in a batch (with cooperation of the listener); this is now the default for a batch listener.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Default error handler for record listener is now the &lt;code&gt;SeekToCurrentErrorHandler&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Overridable producer properties in the &lt;code&gt;KafkaTemplate&lt;/code&gt; allowing multiple templates to use the same producer factory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Simple &lt;code&gt;String&lt;/code&gt; serializer and deserializer are now provided.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;More flexibility to determin the type to create in the &lt;code&gt;JsonDeserializer&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;See the &lt;a href="https://docs.spring.io/spring-kafka/docs/2.5.0.RC1/reference/html/#whats-new-part"&gt;Reference manual "What&amp;#8217;s New?"&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The final release will be published shortly before the upcoming Spring Boot 2.3 GA release; please try out the candidate.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="https://spring.io/projects/spring-kafka/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-kafka"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-kafka/issues"&gt;Issues&lt;/a&gt; | &lt;a href="https://docs.spring.io/spring-kafka/docs/2.5.0.RC1/reference/html/"&gt;Documentation&lt;/a&gt; | &lt;a href="https://stackoverflow.com/questions/tagged/spring-kafka"&gt;Stack Overflow&lt;/a&gt; | &lt;a href="https://gitter.im/spring-projects/spring-kafka"&gt;Gitter&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Integration 5.3 RC1, 5.2.6 &amp; 5.1.10 Available</title>
    <link rel="alternate" href="https://spring.io/blog/2020/04/30/spring-integration-5-3-rc1-5-2-6-5-1-10-available" />
    <category term="releases" label="Releases" />
    <author>
      <name>Artem Bilan</name>
    </author>
    <id>tag:spring.io,2020-04-30:4048</id>
    <updated>2020-04-30T18:28:54Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;I¡¯m pleased to announce the &lt;a href="https://github.com/spring-projects/spring-integration/releases/tag/v5.3.0.RC"&gt;first&lt;/a&gt; (and the last) release candidate for Spring Integration &lt;code&gt;5.3&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;This release ships several bug fixes, a bunch of new features and improvements and will be picked up by Spring Boot &lt;code&gt;2.3 RC1&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;It can be downloaded from our &lt;a href="https://repo.spring.io/milestone"&gt;milestone repository&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-groovy" data-lang="groovy"&gt;compile 'org.springframework.integration:spring-integration-core:5.3.0.RC1'&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="the-most-important-new-features-are"&gt;&lt;a class="anchor" href="#the-most-important-new-features-are"&gt;&lt;/a&gt;The most important new features are:&lt;/h3&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;MongoDbChangeStreamMessageProducer&lt;/code&gt; - a reactive &lt;code&gt;MessageProducerSupport&lt;/code&gt; implementation for the Spring Data &lt;code&gt;ReactiveMongoOperations.changeStream(String, ChangeStreamOptions, Class)&lt;/code&gt; API.
This component produces a &lt;code&gt;Flux&lt;/code&gt; of messages with a &lt;code&gt;body&lt;/code&gt; of &lt;code&gt;ChangeStreamEvent&lt;/code&gt; as the payload by default and some change stream related headers (see &lt;code&gt;MongoHeaders&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;ReactiveMessageSourceProducer&lt;/code&gt; - a reactive implementation of the &lt;code&gt;MessageProducerSupport&lt;/code&gt; to wrap a provided &lt;code&gt;MessageSource&lt;/code&gt; into a &lt;code&gt;Flux&lt;/code&gt; for on demand &lt;code&gt;receive()&lt;/code&gt; calls.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;ReceiveMessageAdvice&lt;/code&gt; - a former &lt;code&gt;AbstractMessageSourceAdvice&lt;/code&gt; is graduated now to more common advice approach which can be used also for the &lt;code&gt;PollableChannel.receive()&lt;/code&gt; proxying.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;TcpOutboundGateway&lt;/code&gt; now can work in an &lt;code&gt;async&lt;/code&gt; mode - you&amp;#8217;ll get an actual reply from the returned &lt;code&gt;Future&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We also have applied a GitHub default community health.
Check this out when you try to raise a new issue &lt;a href="https://github.com/spring-projects/spring-integration/issues/new/choose!" class="bare"&gt;https://github.com/spring-projects/spring-integration/issues/new/choose!&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;See &lt;code&gt;What&amp;#8217;s New?&lt;/code&gt; in the &lt;a href="https://docs.spring.io/spring-integration/docs/5.3.0.RC1/reference/html/whats-new.html#whats-new"&gt;Reference Manual&lt;/a&gt; for more information.
Also see a blog post for the previous &lt;a href="https://spring.io/blog/2020/03/11/spring-integration-5-3-milestone-3-available"&gt;Milestone 3&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;We¡¯re looking forward to your feedback for upcoming GA in May!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;In addition to this &lt;code&gt;5.3 RC1&lt;/code&gt; we also have released maintenance versions - &lt;code&gt;5.2.6&lt;/code&gt; &amp;amp; &lt;code&gt;5.1.10&lt;/code&gt; with some bug fixes and upgrades.
Based on Spring Integration &lt;code&gt;5.3 RC1&lt;/code&gt; and Spring for Apache Kafka &lt;code&gt;2.5 RC1&lt;/code&gt; a &lt;code&gt;spring-integration-kafka-3.3.0.RC1&lt;/code&gt; was also released to pick up improvements and new feature from its "parents".&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="http://projects.spring.io/spring-integration/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-integration/issues"&gt;GitHub Issues&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-integration/blob/master/CONTRIBUTING.adoc"&gt;Contributing&lt;/a&gt; | &lt;a href="http://stackoverflow.com/questions/tagged/spring-integration"&gt;Help&lt;/a&gt; | &lt;a href="https://gitter.im/spring-projects/spring-integration"&gt;Chat&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Updates to Spring Versions</title>
    <link rel="alternate" href="https://spring.io/blog/2020/04/30/updates-to-spring-versions" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Rob Winch</name>
    </author>
    <id>tag:spring.io,2020-04-24:4042</id>
    <updated>2020-04-30T11:57:00Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;The Spring team has decided to change the versioning scheme for both &lt;a href="#release-train-version-changes"&gt;release trains&lt;/a&gt; and &lt;a href="#project-module-version-changes"&gt;project modules&lt;/a&gt;. These changes will be coming in the next release train and minor releases for each project. In fact, the changes are already present in &lt;a href="https://spring.io/blog/2020/04/17/spring-cloud-2020-0-0-m1-released"&gt;Spring Cloud 2020.0.0-M1&lt;/a&gt;. Maven and Gradle do not provide the exact same version ordering, but we are working with the Gradle team to ensure the Spring scheme ends up sorted in the same way with both tools.&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id="release-train-version-changes" class="sect0"&gt;&lt;a class="anchor" href="#release-train-version-changes"&gt;&lt;/a&gt;Release Train Version Changes&lt;/h1&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Spring has been using alphabetically ordered, themed  &lt;a href="https://spring.io/blog/2013/02/13/spring-data-release-train-arora-available"&gt;release train&lt;/a&gt; versions since 2013. Release trains contain a group of project versions that work well together but make no guarantees about the underlying libraries¡¯ backward compatibility when upgrading to the next release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Since then, the &lt;a href="https://github.com/spring-cloud/spring-cloud-release/issues/168"&gt;community has raised some concerns about the version names&lt;/a&gt;, and we have listened. A primary concern is that the scheme could be challenging for non-native English speakers to sort alphabetically. Additionally, themed names could be challenging to remember version names. Finally, some of the theme names could be challenging to spell.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;To solve these concerns, the Spring team has decided to switch to &lt;a href="https://calver.org/"&gt;Calendar Versioning (calver)&lt;/a&gt;, using a scheme of &lt;code&gt;YYYY.MINOR.MICRO[-MODIFIER]&lt;/code&gt;, such that:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;YYYY&lt;/code&gt; is the full year.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;MINOR&lt;/code&gt; is an incremented, 0-based number for each year.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;MICRO&lt;/code&gt; is the patch version.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;MODIFIER&lt;/code&gt; is an optional modifier such that &lt;code&gt;&amp;lt;COUNT&amp;gt;&lt;/code&gt; is an incremented 1-based number:&lt;/p&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For milestones, we will use &lt;code&gt;M&amp;lt;COUNT&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For release candidates, we will use &lt;code&gt;RC&amp;lt;COUNT&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For snapshots, we will use &lt;code&gt;-SNAPSHOT&lt;/code&gt;. Note that &lt;code&gt;.BUILD&lt;/code&gt; that was present in our previous scheme has been removed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For releases, there will be no modifier.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;An example of versions in order would be &lt;code&gt;2020.0.0-M1&lt;/code&gt;, &lt;code&gt;2020.0.0-M2&lt;/code&gt;, &lt;code&gt;2020.0.0-RC1&lt;/code&gt;, &lt;code&gt;2020.0.0-SNAPSHOT&lt;/code&gt;, &lt;code&gt;2020.0.0&lt;/code&gt;, &lt;code&gt;2020.0.1-SNAPSHOT&lt;/code&gt;, &lt;code&gt;2020.0.1&lt;/code&gt;,  &lt;code&gt;2020.1.0-M1&lt;/code&gt;, &lt;code&gt;2020.1.0-M2&lt;/code&gt;, &lt;code&gt;2020.1.0-RC1&lt;/code&gt;, &lt;code&gt;2020.1.0-SNAPSHOT&lt;/code&gt;, &lt;code&gt;2020.1.0&lt;/code&gt;, and so on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;This solves the problem of concerns around implications of backward compatibility, eases sorting for non-native english speakers, is easier to remember than name based releases, and eliminates challenges of spelling. Like many other projects that use calver, the Spring team may also keep referring to each train with a code name that follows the old conventions for their versions.&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id="project-module-version-changes" class="sect0"&gt;&lt;a class="anchor" href="#project-module-version-changes"&gt;&lt;/a&gt;Project Module Version Changes&lt;/h1&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The Spring team has been using the same versions that are compatible with &lt;a href="https://www.osgi.org/wp-content/uploads/SemanticVersioning.pdf"&gt;OSGi Semantic Versioning&lt;/a&gt; since &lt;a href="https://spring.io/blog/2008/12/05/first-spring-framework-3-0-milestone-released"&gt;Spring Framework 3.0.0.M1&lt;/a&gt; back in 2008. We felt that, since we were revisiting the release train versioning scheme, it would be good to revisit our project module versions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;While it is convenient to have OSGi compatible versions, there is no need to do so for the Maven version to be compatible with OSGi, since the bundle metadata can specify an OSGi-compatible version in it. We decided the new versioning scheme would follow the grammar defined in &lt;a href="https://semver.org/"&gt;Semantic Versioning&lt;/a&gt; to help with parsing the version number. We also wanted our versions to be familiar to Java developers. Given the above information, we decided on switching to a version scheme of &lt;code&gt;MAJOR.MINOR.PATCH[-MODIFIER]&lt;/code&gt;, such that:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;MAJOR&lt;/code&gt;, if incremented, may involve a significant amount of work to upgrade.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;MINOR&lt;/code&gt;, if incremented, should involve little to no work to upgrade.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PATCH&lt;/code&gt;, if incremented, should involve no work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;MODIFIER&lt;/code&gt; is an optional modifier such that &lt;code&gt;&amp;lt;COUNT&amp;gt;&lt;/code&gt; is an incremented 1-based number:&lt;/p&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For milestones, we will use &lt;code&gt;M&amp;lt;COUNT&amp;gt;&lt;/code&gt; .&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For release candidates, we will use &lt;code&gt;RC&amp;lt;COUNT&amp;gt;&lt;/code&gt; .&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For snapshots, we will use &lt;code&gt;-SNAPSHOT&lt;/code&gt;. Note that &lt;code&gt;.BUILD&lt;/code&gt; that was present in our previous scheme has been removed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For releases, there will be no modifier.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;An example of versions in order would be &lt;code&gt;2.3.0-M1&lt;/code&gt;, &lt;code&gt;2.3.0-M2&lt;/code&gt;, &lt;code&gt;2.3.0-RC1&lt;/code&gt;, &lt;code&gt;2.3.0-RC2&lt;/code&gt;, &lt;code&gt;2.3.0-SNAPSHOT&lt;/code&gt;, &lt;code&gt;2.3.0&lt;/code&gt;, &lt;code&gt;2.3.1-SNAPSHOT&lt;/code&gt;, &lt;code&gt;2.3.1&lt;/code&gt;, &lt;code&gt;2.4.0-M1&lt;/code&gt;, &lt;code&gt;2.4.0-M2&lt;/code&gt;, &lt;code&gt;2.4.0-RC1&lt;/code&gt;, &lt;code&gt;2.4.0-SNAPSHOT&lt;/code&gt;, &lt;code&gt;2.4.0&lt;/code&gt;, and so on.&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id="conclusion" class="sect0"&gt;&lt;a class="anchor" href="#conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h1&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;We want to thank you, the community, for your feedback, and we hope these changes will improve your experience with Spring!&lt;/p&gt;
&lt;/div&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Tips: The Wavefront Observability Platform</title>
    <link rel="alternate" href="https://spring.io/blog/2020/04/29/spring-tips-the-wavefront-observability-platform" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2020-04-29:4047</id>
    <updated>2020-04-29T13:33:07Z</updated>
    <content type="html">&lt;p&gt;speaker: &lt;a href="http://twitter.com/starbuxman"&gt;Josh Long (@starbuxman) &lt;/a&gt;&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/R8RAgTJvbEc" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;Hi, Spring fans! Welcome to another installment of Spring Tips! In this installment, we&amp;rsquo;ll revisit two topics that we&amp;rsquo;ve addressed in two previous videos (distributed tracing and metrics collection) in terms of the superb Tanzu &lt;a href="https://www.wavefront.com/"&gt;Wavefront observability&lt;/a&gt; platform. &lt;/p&gt;
&lt;p&gt;The first video of the two videos, as mentioned above, dating way back in early 2017, looked at distributed tracing &lt;a href="https://spring.io/blog/2017/02/08/spring-tips-distributed-tracing-with-zipkin"&gt;with spring cloud sleuth and openzipkin&lt;/a&gt;. Spring Cloud Sleuth is an abstraction for capturing the flow of messages from one node to another. It&amp;rsquo;s useful to help you see how messages move through a system. Spring cloud sleuth integrates with all the usual ingress and egress points in a Spring Boot application. Make an HTTP request using either the &lt;code&gt;Restteplat&lt;/code&gt; or the reactive &lt;code&gt;WebClient&lt;/code&gt; or Spring Cloud Feign? It works. Receive an HTTP request to a traditional (Servlet-based) or reactive HTTP endpoint built with Spring? It works. Send or receive a message using Spring Cloud Stream or Spring Integration? Yep. You guessed it. It just works. You don&amp;rsquo;t have to do anything, either.&lt;/p&gt;
&lt;p&gt;Just add the Spring Cloud Sleuth starter to the classpath, and Spring Cloud Sleuth does the rest. It can, in turn, forward the information that it captures to an out-of-band trace server like &lt;a href="https://zipkin.io/"&gt;OpenZipkin&lt;/a&gt;. Some even provide Zipkin-compatible proxies, like &lt;a href="https://cloud.google.com/trace/docs/zipkin"&gt;Google Cloud StackDriver trace&lt;/a&gt;. I like that last bit as it almost feels like we&amp;rsquo;ve gone full circle. Remember that Zipkin was inspired by, among other things, google &amp;rsquo;s dapper whitepaper. It&amp;rsquo;s nice that we can, in turn, use Zipkin to talk to google cloud&amp;rsquo;s tracing infrastructure. Distributed tracing is ideal when you want to drill down into the specifics of a single request into, or out of, the system. &lt;/p&gt;
&lt;p&gt;The second video from early 2018 looks at &lt;a href="https://spring.io/blog/2018/05/02/spring-tips-metrics-collection-in-spring-boot-2-with-micrometer"&gt;collecting metrics with Micrometer&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;a href="http://micrometer.io/"&gt;Micrometer&lt;/a&gt; is an abstraction that captures metrics - statistics - about your application that can then be made available from the spring boot actuator &lt;code&gt;/actuator/metrics&lt;/code&gt; endpoint or forwarded to a time series database like Wavefront. Micrometer can also talk to other time-series databases like AppOptics, Azure Monitor, Netflix Atlas, CloudWatch, Datadog, Dynatrace, Elastic, Ganglia, Graphite, Humio, Influx/Telegraf, JMX, KairosDB, New Relic, Prometheus, SignalFx, Google Stackdriver, StatsD. Metrics are useful when you want to capture statistics - aggregate numbers about the frequency a given HTTP endpoint is hit, or an HTTP endpoint returns a particular status code or responds to a specific HTTP verb. &lt;/p&gt;
&lt;p&gt;That was a quick recap. For a more in-depth look at both of these, I would refer you to the two referenced Spring Tips videos. That&amp;rsquo;s why they&amp;rsquo;re there! The beautiful thing about Wavefront is that you won&amp;rsquo;t interact with these project&amp;rsquo;s APIs in this installment because, as we&amp;rsquo;re about to see, the Wavefront Spring Boot integration &lt;em&gt;jsut works&lt;/em&gt;. And this is no small surprise: the Spring Boot team worked hard on making the Wavefront integration work seamlessly. Wavefront has other integrations for &lt;em&gt;tons&lt;/em&gt; of different platforms, runtimes, and projects, too. &lt;/p&gt;
&lt;p&gt;NOTE: I&amp;rsquo;ve pasted together the seemingly endless list of other integrations supported into one ginormous screenshot that you can find at the bottom of this blog. It&amp;rsquo;ll be the image that&amp;rsquo;s like ten times longer in length than the blog itself. &lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s build a new project using the Spring Initializr. You must use a build of Spring Boot greater than Spring Boot 2.3.M4. Select &lt;code&gt;R2DBC&lt;/code&gt;, &lt;code&gt;PostgreSQL&lt;/code&gt;, &lt;code&gt;Reactive Web&lt;/code&gt;, &lt;code&gt;Spring Cloud Sleuth&lt;/code&gt; and &lt;code&gt;Lombok&lt;/code&gt;. Click &lt;code&gt;Generate,&lt;/code&gt; unzip the resulting file. When I wrote this, it worked well enough to use Spring Cloud Hoxton SR3. No need for the snapshots. Also, we need to add the Wavefront starter itself. Add the following dependency to the &lt;code&gt;pom.xml.&lt;/code&gt; &lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint xml"&gt;    &amp;lt;dependency&amp;gt;&#xD;
        &amp;lt;groupId&amp;gt;com.wavefront&amp;lt;/groupId&amp;gt;&#xD;
        &amp;lt;artifactId&amp;gt;wavefront-spring-boot-starter&amp;lt;/artifactId&amp;gt;&#xD;
        &amp;lt;version&amp;gt;2.0.0-SNAPSHOT&amp;lt;/version&amp;gt;&#xD;
    &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The Wavefront Spring Boot starter is a &lt;code&gt;SNAPSHOT&lt;/code&gt; dependency - it wouldn&amp;rsquo;t be a Spring Tips video if we didn&amp;rsquo;t dare to dance on the edge! At the time of this writing, the dependency is in the Sonatype SNAPSHOTS repository. I needed to have the following Spring and Sonatype repositories in my build. Who knows, though? Perhaps everything will be GA by the time you read this. Things move quickly in these bootiful parts! &lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint xml"&gt;    &amp;lt;repositories&amp;gt;&#xD;
        &amp;lt;repository&amp;gt;&#xD;
            &amp;lt;id&amp;gt;sonatype-snapshots&amp;lt;/id&amp;gt;&#xD;
            &amp;lt;name&amp;gt;Sonatype Snapshots&amp;lt;/name&amp;gt;&#xD;
            &amp;lt;url&amp;gt;https://oss.sonatype.org/content/repositories/snapshots/&amp;lt;/url&amp;gt;&#xD;
            &amp;lt;snapshots&amp;gt;&#xD;
                &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;&#xD;
            &amp;lt;/snapshots&amp;gt;&#xD;
        &amp;lt;/repository&amp;gt;&#xD;
        &amp;lt;repository&amp;gt;&#xD;
            &amp;lt;id&amp;gt;spring-milestones&amp;lt;/id&amp;gt;&#xD;
            &amp;lt;name&amp;gt;Spring Milestones&amp;lt;/name&amp;gt;&#xD;
            &amp;lt;url&amp;gt;https://repo.spring.io/milestone&amp;lt;/url&amp;gt;&#xD;
        &amp;lt;/repository&amp;gt;&#xD;
        &amp;lt;repository&amp;gt;&#xD;
            &amp;lt;id&amp;gt;spring-snapshots&amp;lt;/id&amp;gt;&#xD;
            &amp;lt;name&amp;gt;Spring Snapshots&amp;lt;/name&amp;gt;&#xD;
            &amp;lt;url&amp;gt;https://repo.spring.io/snapshot&amp;lt;/url&amp;gt;&#xD;
            &amp;lt;snapshots&amp;gt;&#xD;
                &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;&#xD;
            &amp;lt;/snapshots&amp;gt;&#xD;
        &amp;lt;/repository&amp;gt;&#xD;
    &amp;lt;/repositories&amp;gt;&#xD;
    &amp;lt;pluginRepositories&amp;gt;&#xD;
        &amp;lt;pluginRepository&amp;gt;&#xD;
            &amp;lt;id&amp;gt;spring-milestones&amp;lt;/id&amp;gt;&#xD;
            &amp;lt;name&amp;gt;Spring Milestones&amp;lt;/name&amp;gt;&#xD;
            &amp;lt;url&amp;gt;https://repo.spring.io/milestone&amp;lt;/url&amp;gt;&#xD;
        &amp;lt;/pluginRepository&amp;gt;&#xD;
        &amp;lt;pluginRepository&amp;gt;&#xD;
            &amp;lt;id&amp;gt;spring-snapshots&amp;lt;/id&amp;gt;&#xD;
            &amp;lt;name&amp;gt;Spring Snapshots&amp;lt;/name&amp;gt;&#xD;
            &amp;lt;url&amp;gt;https://repo.spring.io/snapshot&amp;lt;/url&amp;gt;&#xD;
            &amp;lt;snapshots&amp;gt;&#xD;
                &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;&#xD;
            &amp;lt;/snapshots&amp;gt;&#xD;
        &amp;lt;/pluginRepository&amp;gt;&#xD;
    &amp;lt;/pluginRepositories&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That all done, import the project up in your favorite IDE. &lt;/p&gt;
&lt;p&gt;The application is a typical reactive Spring Boot application, with which you have no doubt become familiar after watching so many other SPring Tips installments &lt;a href="https://spring.io/blog/2016/10/05/spring-tips-functional-reactive-endpoints-with-spring-framework-5-0"&gt;on functional reactive HTTP endpints&lt;/a&gt;, &lt;a href="https://spring.io/blog/2018/12/19/spring-tips-reactive-sql-data-access-with-spring-data-r2dbc"&gt;Spring Data R2DBC&lt;/a&gt;, &lt;a href="https://spring.io/blog/2019/02/06/spring-tips-testing-reactive-code"&gt;testing reactive services&lt;/a&gt;, and more. Here&amp;rsquo;s the code. &lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;package com.example.wavefront;&#xD;
&#xD;
import lombok.AllArgsConstructor;&#xD;
import lombok.Data;&#xD;
import lombok.NoArgsConstructor;&#xD;
import org.springframework.boot.ApplicationRunner;&#xD;
import org.springframework.boot.SpringApplication;&#xD;
import org.springframework.boot.autoconfigure.SpringBootApplication;&#xD;
import org.springframework.context.annotation.Bean;&#xD;
import org.springframework.data.annotation.Id;&#xD;
import org.springframework.data.repository.reactive.ReactiveCrudRepository;&#xD;
import org.springframework.web.reactive.function.server.RouterFunction;&#xD;
import org.springframework.web.reactive.function.server.ServerResponse;&#xD;
import reactor.core.publisher.Flux;&#xD;
&#xD;
import static org.springframework.web.reactive.function.server.RouterFunctions.route;&#xD;
import static org.springframework.web.reactive.function.server.ServerResponse.ok;&#xD;
&#xD;
@SpringBootApplication&#xD;
public class WavefrontApplication {&#xD;
&#xD;
    public static void main(String[] args) {&#xD;
        SpringApplication.run(WavefrontApplication.class, args);&#xD;
    }&#xD;
&#xD;
    @Bean&#xD;
    RouterFunction&amp;lt;ServerResponse&amp;gt; routes(ReservationRepository rr) {&#xD;
        return route()&#xD;
                .GET(&amp;quot;/reservations&amp;quot;, r -&amp;gt; ok().body(rr.findAll(), Reservation.class))&#xD;
                .GET(&amp;quot;/hello&amp;quot;, r -&amp;gt; ok().bodyValue(&amp;quot;Hi, Spring fans!&amp;quot;))&#xD;
                .build();&#xD;
&#xD;
    }&#xD;
&#xD;
    @Bean&#xD;
    ApplicationRunner runner(ReservationRepository reservationRepository) {&#xD;
        return args -&amp;gt; {&#xD;
&#xD;
            var data = Flux&#xD;
                    .just(&amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;C&amp;quot;, &amp;quot;D&amp;quot;)&#xD;
                    .map(name -&amp;gt; new Reservation(null, name))&#xD;
                    .flatMap(reservationRepository::save);&#xD;
&#xD;
            reservationRepository&#xD;
                    .deleteAll()&#xD;
                    .thenMany(data)&#xD;
                    .thenMany(reservationRepository.findAll())&#xD;
                    .subscribe(System.out::println);&#xD;
        };&#xD;
    }&#xD;
}&#xD;
&#xD;
interface ReservationRepository extends ReactiveCrudRepository&amp;lt;Reservation, String&amp;gt; {&#xD;
}&#xD;
&#xD;
@Data&#xD;
@AllArgsConstructor&#xD;
@NoArgsConstructor&#xD;
class Reservation {&#xD;
&#xD;
    @Id&#xD;
    private String id;&#xD;
    private String name;&#xD;
}&#xD;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We&amp;rsquo;ll need to speicfy some configuration information for the PostgreSQL database in our &lt;code&gt;src/main/resources/application.properties&lt;/code&gt;. &lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint properties"&gt;spring.r2dbc.url=r2dbc:postgresql://localhost/orders&#xD;
spring.r2dbc.username=orders&#xD;
spring.r2dbc.password=orders
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We&amp;rsquo;ll also need to specify how our application identifies itself to Wavefront in &lt;code&gt;src/main/resources/application.properties.&lt;/code&gt; Wavefront can observe multiple applications. An application, in turn, can have numerous services within it. An application name is a logical grouping of services. For our application, the name will be &lt;code&gt;spring-tips&lt;/code&gt;, and the service name will be &lt;code&gt;reservations&lt;/code&gt;. &lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint properties"&gt;wavefront.application.name=spring-tips&#xD;
wavefront.application.service=reservations
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Aaaaannd&amp;hellip; that&amp;rsquo;s it! Start the application in your IDE or on the command line using &lt;code&gt;mvn spring-boot:run&lt;/code&gt;. You&amp;rsquo;ll see that the application starts up and displays some information on the console, sort of like this. &lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint shell"&gt;...&#xD;
&#xD;
To share this account, make sure the following is added to your configuration:&#xD;
&#xD;
    management.metrics.export.wavefront.api-token=58e749b5-ee60-4c0b-988e-458c6cb77b32&#xD;
    management.metrics.export.wavefront.uri=https://wavefront.surf&#xD;
&#xD;
Connect to your Wavefront dashboard using this one-time use link:&#xD;
https://wavefront.surf/us/cY69hp561D&#xD;
&#xD;
...&#xD;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yep. That&amp;rsquo;s it. When the Wavefront Spring Boot starter starts up, it negotiates a token for your application. So your dashboard is already ready and waiting for you by the time the application starts up. The spring boot starter is even kind enough to capture the Wavefront token for you in &lt;code&gt;~/.wavefront_token.&lt;/code&gt; Subsequent runs will read that data for you. Or, you could use the Spring Boot properties printed out on the console, and it&amp;rsquo;ll defer to that, too. &lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;you probably don&amp;rsquo;t want to have the token checked into your git repository. Instead, prefer environment variables or the Spring Cloud Config Server. Want to learn more about configuration? See &lt;a href="https://spring.io/blog/2020/04/23/spring-tips-configuration"&gt;this SPring tips video&lt;/a&gt; on configuration.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Note the last URL there for reference later on. But first, go to your browser and exercise some of the endpoints, &lt;a href="http://localhost:8080/reservations"&gt;http://localhost:8080/reservations&lt;/a&gt; and &lt;a href="http://localhost:8080/hello"&gt;http://localhost:8080/hello&lt;/a&gt;. Invoke them both in the browser a half dozen times. &lt;/p&gt;
&lt;p&gt;Now, go to that wavefront URL, and you should see a dashboard with the data for your application. If you don&amp;rsquo;t, then just wait a minute. IT takes a few minutes to see the data collected from your application. &lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll immediately see that Wavefront has captured metrics about your application at both the application level - it knows, for example, about your HTTP requests, as well as at the JVM level, where it knows about things like your JVM&amp;rsquo;s memory use. &lt;/p&gt;
&lt;img src ="https://raw.githubusercontent.com/spring-tips/wavefront/master/assets/wavefront-metrics.png" /&gt;
&lt;p&gt;Click on one of those HTTP requests or go to &lt;code&gt;Application&lt;/code&gt; &amp;gt; &lt;code&gt;Traces&lt;/code&gt;, and you&amp;rsquo;ll be able to drill down into the traces for your application, like this. There is a &lt;em&gt;ton&lt;/em&gt; of information there, too. &lt;/p&gt;
&lt;img src ="https://raw.githubusercontent.com/spring-tips/wavefront/master/assets/wavefront-trace.png" /&gt;
&lt;p&gt;Everything I&amp;rsquo;ve shown you thus far is just what gets prepared for you out of the box. The real power is in the customization and the integrations. You can create custom dashboards to show all sorts of information that matters to you. Graph useful business indicators. Use plots, time series, and more. And, once you&amp;rsquo;ve figured out what the correct data to act on is, and figured out how to best contextualize data, then it&amp;rsquo;s trivial to install integrations to alert you when its time to act. &lt;/p&gt;
&lt;p&gt;Speaking of integrations, I promised I&amp;rsquo;d show you some of the other integrations available. So, here it is, your moment of zen: the &lt;em&gt;insane&lt;/em&gt; list of &lt;em&gt;other&lt;/em&gt; integrations for the rare sort who is &lt;em&gt;not&lt;/em&gt; Spring Boot (huh?):&lt;/p&gt;
&lt;img src = "https://raw.githubusercontent.com/spring-tips/wavefront/master/assets/integrations.png"/&gt;
&lt;p&gt;Still here? &amp;hellip;Why? Get! You&amp;rsquo;ve got places to be, production deploys to savor, growth to measure. Take what you&amp;rsquo;ve learned here today and integrate Wavefront into your application. If you&amp;rsquo;re using &lt;a href="https://tanzu.vmware.com/kubernetes-grid"&gt;Tanzu Enterprise-ready Kubernetes Grid (Kubernetes)&lt;/a&gt;, &lt;a href="https://tanzu.vmware.com/application-service"&gt;Tanzu Application Service (Cloud Foundry)&lt;/a&gt;, or &lt;a href="https://azure.microsoft.com/en-us/services/spring-cloud/"&gt;Azure Spring Cloud&lt;/a&gt;, then this should be an especially tantalizing opportunity. Finally, an observability platform that can scale like your Spring Boot-based microservices do. So, go. Go try out Wavefront. Get to production, faster, and safer.&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - April 28th, 2020</title>
    <link rel="alternate" href="https://spring.io/blog/2020/04/29/this-week-in-spring-april-28th-2020" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2020-04-29:4046</id>
    <updated>2020-04-29T00:49:21Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! It&amp;rsquo;s already April 28th, 2020. I can&amp;rsquo;t even believe it. &lt;/p&gt;
&lt;p&gt;The time sure is flying, not just since the last time we spoke in this little blog of ours, but also since I first started writing these roundups the first week of January 2011. In four short months, it&amp;rsquo;ll have been ten years since I officially joined the Spring team! Crazy.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s also the case that time has flown by since this #COVID19 crisis forced much of the world into lockdown. I am an eternal optimist, and I was wondering if this COVID19 crisis was going to have a silver lining. For us here at the Long household, it&amp;rsquo;s been a gift for me to be able to hang out with my family. My little girl is making really good progress learning how to program, too. She&amp;rsquo;s already good with basic control flow, variables, functions, etc., all just since we went into lockdown. I&amp;rsquo;ve become a homeschooling parent. It&amp;rsquo;s been a lot of fun renewing my maths fundamentals with her. She&amp;rsquo;s a remarkable kid. &lt;/p&gt;
&lt;p&gt;Anyway, I hope you are taking this time to be with your family and expand your skillset. I think that&amp;rsquo;s very valuable. I get lots of emails and tweets (usually direct messages) from folks all over the world every day. They warm my heart - I &lt;em&gt;love&lt;/em&gt; our active community! Today, I got a nice email from a student in Ho Chi Minh, Vietnam, who asks what he can do to expand his Spring skills. I want to relay to you what I told him, basically:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Spring is a &lt;em&gt;big&lt;/em&gt; universe. It&amp;rsquo;s impossible to know everything. But, you try a little bit of everything to increase your exposure. I would suggest going to &lt;a href="http://Spring.io/guides"&gt;spring.io/guides&lt;/a&gt; and trying each of the guides. Each one takes maybe 15 - 30 minutes. Try each one every day. That way, you will know what is possible. From there, you can focus more on a particular subject as the applications that you&amp;rsquo;re building requires it.&lt;/p&gt;
  &lt;p&gt;[As to how I learned:] I just practice, practice, practice :) Many people know more than I do. I have been using it for years, full time, and I still don&amp;rsquo;t know everything. You don&amp;rsquo;t need to know &lt;em&gt;everything&lt;/em&gt;. You only need to know that which is required to support a particular application, and &lt;em&gt;why&lt;/em&gt; it is required. The guides will help you here, as well. It will help you to understand the different possibilities. You will also have to learn the ideas that motivate the frameworks. So, before you learn about Spring Batch, learn a little about batch processing in general. Before you learn about Spring Integration, learn a little about enterprise integration patterns (EIP) and messaging. Before you learn about Spring Data, learn a little about SQL and NoSQL data stores. Before you learn about Spring MVC, learn a little about HTTP and the MVC pattern. Before you learn Reactor and Spring Webflux, learn about Reactive programming. And so on. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I hope this helps you all in your journey, as well. &lt;/p&gt;
&lt;p&gt;Anyway, my friends, there&amp;rsquo;s a &lt;em&gt;lot&lt;/em&gt; of good stuff today so let&amp;rsquo;s get to it! &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/04/28/spring-data-neumann-rc2-moore-sr7-and-lovelace-sr17"&gt;Spring Data Neumann RC2, Moore SR7, and Lovelace SR17&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/04/28/spring-framework-5-2-6-5-1-15-5-0-17-and-4-3-27-available-now"&gt;Spring Framework 5.2.6, 5.1.15, 5.0.17, and 4.3.27 available now&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/04/27/announcing-spring-cloud-stream-horsham-sr4-3-0-4-release-and-spring-cloud-hoxton-sr4"&gt;Announcing Spring Cloud Stream Horsham.SR4 (3.0.4.RELEASE) and Spring Cloud Hoxton.SR4&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/04/24/a-bootiful-podcast-linux-kernel-hacker-steve-rostedt-on-what-our-busy-spring-applications-look-like-from-the-kernel-s-perspective"&gt;A Bootiful Podcast: Linux Kernel Hacker Steve Rostedt on what our busy Spring applications look like from the Kernel&amp;rsquo;s perspective&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/04/23/spring-cloud-data-flow-2-5-0-rc1-released"&gt;Spring Cloud Data Flow 2.5.0.RC1 Released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/04/23/spring-tips-configuration"&gt;Spring Tips: Configuration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/04/22/spring-tools-4-6-1-released"&gt;Spring Tools 4.6.1 released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/04/22/spring-hateoas-brings-you-new-ways-to-configure-clients"&gt;Spring HATEOAS brings you new ways to configure clients&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Piotr Mi?kowski has done a nice job introducing &lt;a href="https://www.youtube.com/watch?v=XIkSWHX38Tg&amp;feature=emb_title"&gt;Spring Cloud Gateway in this YouTube video&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;This looks super interesting! Native images, very much like the ones we just looked at in this &lt;a href="http://bit.ly/spring-tips-playlist"&gt;Spring Tips&lt;/a&gt; installment &lt;a href="https://www.youtube.com/watch?v=u1XJTI1PVLw"&gt;on our Spring Graal Feature&lt;/a&gt;, are coming to the JDK itself as part of this this new effort, &lt;a href="https://mail.openjdk.java.net/pipermail/discuss/2020-April/005429.html"&gt;Project Leyden&lt;/a&gt;. Pretty cool, right? Also of note, Leyden refers to a &lt;a href="https://en.wikipedia.org/wiki/Leyden_jar"&gt;Leyden jar&lt;/a&gt;, an antique electrical instrument which stores a high voltag electric charge between two electrical conductors. How cool!&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://blogs.vmware.com/opensource/2020/04/27/building-a-community-part-1-openness-and-transparency/"&gt;Building a Community for Your Company¡¯s Open Source Projects ? Part 1: Openness and Transparency&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://technology.amis.nl/2020/04/10/spring-blocking-vs-non-blocking-r2dbc-vs-jdbc-and-webflux-vs-web-mvc/"&gt;Spring: Blocking vs non-blocking: R2DBC vs JDBC and WebFlux vs Web MVC&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/gregturn/status/1254407735355023361?s=12"&gt;twitter.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://reflectoring.io/spring-robust-sqs-client/"&gt;Building a Robust SQS Client with Spring Boot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/linux_china/status/1253915371234455552?s=12"&gt;twitter.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://docs.qovery.com/guides/tutorial/deploy-spring-boot-with-postgresql/"&gt;Deploy Spring Boot with PostgreSQL on Qovery &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.infoq.com/presentations/resilience4j/?itm_source=infoq&amp;itm_medium=popular_content_link&amp;itm_campaign=popularContent_news_clk"&gt;Building Robust and Resilient Apps Using Spring Boot and Resilience4j&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/maciejwalkowiak/status/1253025708525391872?s=12"&gt;The Springdoc team moves quickly! Springdoc is an interesting alternative to Springfox that supports the integration of Swagger and OpenAPI into Spring-based applications&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://medium.com/@rashmishehana_48965/going-reactive-with-spring-webflux-40128f3d5bad"&gt;Going Reactive With Spring Webflux - Rashmi Shehana - Medium&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Did you hear the news? SpringOne is now all-online, all-free! Join us September 1 for the show of a lifetime!&lt;/li&gt;
  &lt;li&gt;You should watch this &lt;a href="http://oracl.info/XAGI50zjBB3"&gt; replay of the Java Language Features&lt;/a&gt; session by Stuart Marks at the inaugural #DevDotNextDigital conference.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://paketo.io/"&gt;Introducing Paketo.io Buildpacks&lt;/a&gt;. Build and patch containerized apps so that you can spend all your time on the thing that matters the most - developing great software.&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Data Neumann RC2, Moore SR7, and Lovelace SR17</title>
    <link rel="alternate" href="https://spring.io/blog/2020/04/28/spring-data-neumann-rc2-moore-sr7-and-lovelace-sr17" />
    <category term="releases" label="Releases" />
    <author>
      <name>Mark Paluch</name>
    </author>
    <id>tag:spring.io,2020-04-28:4045</id>
    <updated>2020-04-28T13:43:00Z</updated>
    <content type="html">&lt;p&gt;On behalf of the team, I&amp;rsquo;m pleased to announce Spring Data releases &lt;code&gt;Neumann RC2&lt;/code&gt;, &lt;code&gt;Moore SR7&lt;/code&gt;, and &lt;code&gt;Lovelace SR17&lt;/code&gt;. This triple-feature is built on top of today&amp;rsquo;s &lt;a href="https://spring.io/blog/2020/04/28/spring-framework-5-2-6-5-1-15-5-0-17-and-4-3-27-available-now"&gt;Spring Framework releases &lt;code&gt;5.2.6&lt;/code&gt; (&lt;code&gt;Neumann&lt;/code&gt; and &lt;code&gt;Moore&lt;/code&gt;) and &lt;code&gt;5.1.15&lt;/code&gt; (&lt;code&gt;Lovelace&lt;/code&gt;)&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Spring Data &lt;code&gt;Neumann RC2&lt;/code&gt; contains &lt;a href="https://jira.spring.io/issues/?filter=16833"&gt;96 new features, improvements, and fixes&lt;/a&gt;. Spring Data &lt;code&gt;Moore SR7&lt;/code&gt; ships with &lt;a href="https://jira.spring.io/issues/?filter=16831"&gt;40 fixes and improvements&lt;/a&gt;. Finally, Spring Data &lt;code&gt;Lovelace SR17&lt;/code&gt; includes &lt;a href="https://jira.spring.io/issues/?filter=16740"&gt;39 selected fixes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Spring Data &lt;code&gt;Neumann RC2&lt;/code&gt; ships with numerous improvements and new features. The most interesting amongst these are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Query Derivation for Spring Data JDBC.&lt;/li&gt;
  &lt;li&gt;Refinements in the reactive resource lookup for Spring Data Cassandra and Spring Data MongoDB, introducing a deferred lookup for &lt;code&gt;Session&lt;/code&gt; with a &lt;code&gt;MongoDatabase&lt;/code&gt; that allows for routing implementations that use the Subscriber Context.&lt;/li&gt;
  &lt;li&gt;Embedded Types in Spring Data Cassandra&lt;/li&gt;
  &lt;li&gt;Additional Entity Callbacks in Spring Data Elasticsearch&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Spring Data &lt;code&gt;Neumann RC2&lt;/code&gt; is the last planned release candidate of the Neumann release train before shipping a GA release in early May. This is a good opportunity to upgrade your dependencies and report any issues before the GA release. Expect Spring Boot releases in the next few days that pick up these Spring Data releases for your convenience.&lt;/p&gt;
&lt;p&gt;Finally, here are the links to the individual modules along with their documentation:&lt;/p&gt;&lt;h2&gt;&lt;a href="#neumann-rc2" class="anchor" name="neumann-rc2"&gt;&lt;/a&gt;Neumann RC2&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Data Commons 2.3 RC2 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-commons/2.3.0.RC2"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.3.0.RC2/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.3.0.RC2/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.3.0.RC2/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JDBC 2.0 RC2 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-jdbc/2.0.0.RC2"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/2.0.0.RC2/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/2.0.0.RC2/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/2.0.0.RC2/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JPA 2.3 RC2 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-jpa/2.3.0.RC2"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.3.0.RC2/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.3.0.RC2/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.3.0.RC2/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data MongoDB 3.0 RC2 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-mongodb/3.0.0.RC2"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/3.0.0.RC2/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/3.0.0.RC2/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/3.0.0.RC2/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data KeyValue 2.3 RC2 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-keyvalue/2.3.0.RC2"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.3.0.RC2/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.3.0.RC2/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.3.0.RC2/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Cassandra 3.0 RC2 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-cassandra/3.0.0.RC2"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/3.0.0.RC2/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/3.0.0.RC2/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/3.0.0.RC2/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Solr 4.2 RC2 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-solr/4.2.0.RC2"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/4.2.0.RC2/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/4.2.0.RC2/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/4.2.0.RC2/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Geode 2.3 RC2 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-geode/2.3.0.RC2"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.3.0.RC2/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.3.0.RC2/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.3.0.RC2/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Neo4j 5.3 RC2 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-neo4j/5.3.0.RC2"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/5.3.0.RC2/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/5.3.0.RC2/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/5.3.0.RC2/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data R2DBC 1.1 RC2 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-r2dbc/1.1.0.RC2"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/r2dbc/docs/1.1.0.RC2/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/r2dbc/docs/1.1.0.RC2/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/r2dbc/docs/1.1.0.RC2/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data LDAP 2.3 RC2 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-ldap/2.3.0.RC2"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.3.0.RC2/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.3.0.RC2/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.3.0.RC2/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Envers 2.3 RC2 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-envers/2.3.0.RC2"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.3.0.RC2/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.3.0.RC2/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.3.0.RC2/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data REST 3.3 RC2 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-rest-webmvc/3.3.0.RC2"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.3.0.RC2/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.3.0.RC2/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.3.0.RC2/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Redis 2.3 RC2 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-redis/2.3.0.RC2"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.3.0.RC2/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.3.0.RC2/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.3.0.RC2/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Elasticsearch 4.0 RC2 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-elasticsearch/4.0.0.RC2"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/4.0.0.RC2/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/4.0.0.RC2/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/4.0.0.RC2/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Couchbase 4.0 RC2 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-couchbase/4.0.0.RC2"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/4.0.0.RC2/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/4.0.0.RC2/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/4.0.0.RC2/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;&lt;a href="#moore-sr7" class="anchor" name="moore-sr7"&gt;&lt;/a&gt;Moore SR7&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Data Commons 2.2.7 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-commons/2.2.7.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.2.7.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.2.7.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.2.7.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JDBC 1.1.7 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-jdbc/1.1.7.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/1.1.7.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/1.1.7.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/1.1.7.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JPA 2.2.7 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-jpa/2.2.7.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.2.7.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.2.7.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.2.7.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data MongoDB 2.2.7 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-mongodb/2.2.7.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/2.2.7.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/2.2.7.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/2.2.7.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data KeyValue 2.2.7 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-keyvalue/2.2.7.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.2.7.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.2.7.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.2.7.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Cassandra 2.2.7 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-cassandra/2.2.7.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/2.2.7.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/2.2.7.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/2.2.7.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Solr 4.1.7 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-solr/4.1.7.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/4.1.7.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/4.1.7.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/4.1.7.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Geode 2.2.7 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-geode/2.2.7.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.2.7.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.2.7.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.2.7.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Neo4j 5.2.7 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-neo4j/5.2.7.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/5.2.7.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/5.2.7.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/5.2.7.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data LDAP 2.2.7 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-ldap/2.2.7.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.2.7.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.2.7.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.2.7.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Envers 2.2.7 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-envers/2.2.7.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.2.7.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.2.7.RELEASE/reference/html"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data REST 3.2.7 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-rest-webmvc/3.2.7.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.2.7.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.2.7.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.2.7.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Gemfire 2.2.7 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-gemfire/2.2.7.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/gemfire/docs/2.2.7.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/gemfire/docs/2.2.7.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/gemfire/docs/2.2.7.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Redis 2.2.7 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-redis/2.2.7.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.2.7.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.2.7.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.2.7.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Elasticsearch 3.2.7 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-elasticsearch/3.2.7.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/3.2.7.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/3.2.7.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/3.2.7.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Couchbase 3.2.7 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-couchbase/3.2.7.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/3.2.7.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/3.2.7.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/3.2.7.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;&lt;a href="#lovelace-sr17" class="anchor" name="lovelace-sr17"&gt;&lt;/a&gt;Lovelace SR17&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Data Commons 2.1.17 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-commons/2.1.17.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.1.17.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.1.17.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.1.17.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JDBC 1.0.17 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-jdbc/1.0.17.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/1.0.17.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/1.0.17.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/1.0.17.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JPA 2.1.17 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-jpa/2.1.17.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.1.17.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.1.17.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.1.17.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data MongoDB 2.1.17 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-mongodb/2.1.17.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/2.1.17.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/2.1.17.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/2.1.17.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data KeyValue 2.1.17 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-keyvalue/2.1.17.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.1.17.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.1.17.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.1.17.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Cassandra 2.1.17 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-cassandra/2.1.17.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/2.1.17.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/2.1.17.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/2.1.17.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Solr 4.0.17 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-solr/4.0.17.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/4.0.17.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/4.0.17.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/4.0.17.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Geode 2.1.17 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-geode/2.1.17.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.1.17.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.1.17.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.1.17.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Neo4j 5.1.17 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-neo4j/5.1.17.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/5.1.17.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/5.1.17.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/5.1.17.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data LDAP 2.1.17 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-ldap/2.1.17.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.1.17.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.1.17.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.1.17.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Envers 2.1.17 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-envers/2.1.17.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.1.17.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.1.17.RELEASE/reference/html"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data REST 3.1.17 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-rest-webmvc/3.1.17.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.1.17.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.1.17.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.1.17.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Gemfire 2.1.17 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-gemfire/2.1.17.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/gemfire/docs/2.1.17.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/gemfire/docs/2.1.17.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/gemfire/docs/2.1.17.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Redis 2.1.17 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-redis/2.1.17.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.1.17.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.1.17.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.1.17.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Elasticsearch 3.1.17 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-elasticsearch/3.1.17.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/3.1.17.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/3.1.17.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/3.1.17.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Couchbase 3.1.17 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-couchbase/3.1.17.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/3.1.17.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/3.1.17.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/3.1.17.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Framework 5.2.6, 5.1.15, 5.0.17, and 4.3.27 available now</title>
    <link rel="alternate" href="https://spring.io/blog/2020/04/28/spring-framework-5-2-6-5-1-15-5-0-17-and-4-3-27-available-now" />
    <category term="releases" label="Releases" />
    <author>
      <name>St?phane Nicoll</name>
    </author>
    <id>tag:spring.io,2020-04-28:4044</id>
    <updated>2020-04-28T10:36:35Z</updated>
    <content type="html">&lt;p&gt;On behalf of the team and everyone who has contributed, I am pleased to announce a full round of Spring Framework releases.&lt;/p&gt;
&lt;p&gt;Spring Framework 5.2.6 includes &lt;a href="https://github.com/spring-projects/spring-framework/releases/tag/v5.2.6.RELEASE"&gt;46 fixes and improvements&lt;/a&gt;. Spring Framework 5.1.15 includes &lt;a href="https://github.com/spring-projects/spring-framework/releases/tag/v5.1.15.RELEASE"&gt;16 selected fixes and improvements&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Maintenance releases for &lt;code&gt;5.0.x&lt;/code&gt; (&lt;code&gt;5.0.17&lt;/code&gt;) and &lt;code&gt;4.3.x&lt;/code&gt; (&lt;code&gt;4.3.27&lt;/code&gt;) with &lt;a href="https://github.com/spring-projects/spring-framework/releases/tag/v5.0.17.RELEASE"&gt;12 selected fixes and improvements&lt;/a&gt; and &lt;a href="https://github.com/spring-projects/spring-framework/releases/tag/v4.3.27.RELEASE"&gt;5 selected fixes and improvements&lt;/a&gt; respectively are also available today.&lt;/p&gt;
&lt;p&gt;As usual, we&amp;rsquo;ll follow up shortly with corresponding Spring Boot releases (&lt;code&gt;2.2.7&lt;/code&gt; and &lt;code&gt;2.1.14&lt;/code&gt;) as well as a release candidate for Spring Boot 2.3!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://projects.spring.io/spring-framework/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-framework"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-framework/issues"&gt;Issues&lt;/a&gt; | &lt;a href="https://docs.spring.io/spring-framework/docs/5.2.6.RELEASE/spring-framework-reference"&gt;Documentation&lt;/a&gt;&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Announcing Spring Cloud Stream Horsham.SR4 (3.0.4.RELEASE) and Spring Cloud Hoxton.SR4</title>
    <link rel="alternate" href="https://spring.io/blog/2020/04/27/announcing-spring-cloud-stream-horsham-sr4-3-0-4-release-and-spring-cloud-hoxton-sr4" />
    <category term="releases" label="Releases" />
    <author>
      <name>Oleg Zhurakousky</name>
    </author>
    <id>tag:spring.io,2020-04-27:4043</id>
    <updated>2020-04-27T17:27:00Z</updated>
    <content type="html">&lt;p&gt;We are pleased to announce the release of the Spring Cloud Stream Horsham.SR4 (3.0.4.RELEASE) release train which is available as part of Spring Cloud Hoxton.SR4 and builds on Spring Boot 2.2.6 and Spring Cloud Function 3.0.6.RELEASE which was also just released.&lt;/p&gt;
&lt;p&gt;Spring Cloud Stream Horsham.SR4 modules are available for use in the &lt;a href="https://repo.maven.apache.org/maven2/org/springframework/cloud/"&gt;Maven Central&lt;/a&gt; repository. &lt;/p&gt;
&lt;p&gt;This release contains several fixes and enhancements primarily driven by user&amp;rsquo;s feedback, so thank you.&lt;br/&gt;For more details please follow these links:&lt;br/&gt;- &lt;a href="https://github.com/spring-cloud/spring-cloud-stream/issues?q=label%3A%22Backport+Horsham%22+is%3Aclosed"&gt;Spring Cloud Stream Core&lt;/a&gt;&lt;br/&gt;- &lt;a href="https://github.com/spring-cloud/spring-cloud-stream-binder-rabbit/issues?q=label%3A%22Backport+Horsham.SR3%22+is%3Aclosed"&gt;Spring Cloud Stream Rabbit Binder&lt;/a&gt;&lt;br/&gt;- &lt;a href="https://github.com/spring-cloud/spring-cloud-function/issues?q=label%3A3.0.x-backport+is%3Aclosed"&gt;Spring Cloud Function&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;As mentioned, Spring Cloud Hoxton.SR4 was also released, but it only contains updates to Spring Cloud Stream and Spring Cloud Function.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As always, we welcome feedback and contributions, so please reach out to us on &lt;a href="https://stackoverflow.com/questions/tagged/spring-cloud-stream"&gt;Stackoverflow&lt;/a&gt; or &lt;a href="https://github.com/spring-cloud/spring-cloud-stream/"&gt;GitHub&lt;/a&gt; and or &lt;a href="https://gitter.im/spring-cloud/spring-cloud-stream"&gt;Gitter&lt;/a&gt;&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>A Bootiful Podcast: Linux Kernel Hacker Steve Rostedt on what our busy Spring applications look like from the Kernel's perspective</title>
    <link rel="alternate" href="https://spring.io/blog/2020/04/24/a-bootiful-podcast-linux-kernel-hacker-steve-rostedt-on-what-our-busy-spring-applications-look-like-from-the-kernel-s-perspective" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2020-04-24:4041</id>
    <updated>2020-04-24T01:13:58Z</updated>
    <content type="html">&lt;iframe title="Linux Kernel hacker and Real Time patch founder Steve Rostedt on how the kernel sees our busy Spring applications" src="https://www.podbean.com/media/player/ethav-da3d69?from=usersite&amp;vjs=1&amp;skin=1&amp;fonts=Helvetica&amp;auto=0&amp;download=1" height="315" width="100%" style="border: none;" scrolling="no" data-name="pb-iframe-player"&gt;&lt;/iframe&gt;
&lt;p&gt;Hi, Spring fans! In this episode &lt;a href="http://twitter.com/starbuxman"&gt;Josh Long (@starbuxman)&lt;/a&gt; talks to Linux kernel hacker and Linux Real-Time patch founder Steve Rostedt on observing the Linux kernel and on what it sees when it looks at our busy Java and Spring applications. &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Steve is on IRC on #LINUX-RT on OFT&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://LWN.net"&gt;LWN.net&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Cloud Data Flow 2.5.0.RC1 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2020/04/23/spring-cloud-data-flow-2-5-0-rc1-released" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Ilayaperumal Gopinathan</name>
    </author>
    <id>tag:spring.io,2020-04-23:4040</id>
    <updated>2020-04-23T17:38:28Z</updated>
    <content type="html">&lt;p&gt;Spring Cloud Data Flow team is pleased to announce the first milestone release of 2.5.0.RC1.&lt;/p&gt;
&lt;p&gt;This first release candidate of 2.5.0 adds some bug fixes and the following features:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
  &lt;p&gt;Support application &lt;code&gt;metadata&lt;/code&gt; as part of the &lt;code&gt;Container&lt;/code&gt; images. Before this release, we only supported application property &lt;a href="https://dataflow.spring.io/docs/2.5.0.SNAPSHOT/feature-guides/general/application-metadata/#metadata-container-image-label"&gt;whitelisting&lt;/a&gt; when using a maven artifact.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;Support for &lt;code&gt;Azure AD&lt;/code&gt; integration using OAuth 2.0. Spring Cloud Data Flow, Spring Cloud Skipper servers along with the Spring Cloud Data Flow shell can be &lt;a href="https://docs.spring.io/spring-cloud-dataflow/docs/2.5.0.RC1/reference/htmlsingle/#identity-providers"&gt;configured&lt;/a&gt; to integrate with Azure AD for authentication and authorization.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;Removal of Scheduler task launcher component when scheduling tasks. In Spring Cloud Data Flow 2.3.x, the scheduling of tasks was designed to have an intermediate scheduler task launcher component to enhance the continuous deployment user experience. Since this component added some additional complexities and overhead on Kubernetes, the 2.5.x release removed this intermediary task launcher. We also added a &lt;a href="https://github.com/spring-cloud/spring-cloud-dataflow-samples/tree/master/dataflow-migrate-schedules"&gt;migration tool&lt;/a&gt; to migrate the schedules from 2.3.x and 2.4.x &lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;Unification of Kubernetes Scheduler properties. This &lt;a href="https://github.com/spring-cloud/spring-cloud-deployer-kubernetes/issues/331"&gt;feature&lt;/a&gt; lets the user configure any supported/applicable task deployment properties at the time of scheduling them as well.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We are wrapping up the 2.5.0 GA related changes and looking forward to sharing the GA announcement soon!&lt;/p&gt;&lt;h2&gt;&lt;a href="#stay-in-touch-hellip" class="anchor" name="stay-in-touch-hellip"&gt;&lt;/a&gt;Stay in touch&amp;hellip;&lt;/h2&gt;
&lt;p&gt;As always, we welcome feedback and contributions, so please reach out to us on &lt;a href="https://stackoverflow.com/questions/tagged/spring-cloud-dataflow"&gt;Stack Overflow&lt;/a&gt; or &lt;a href="https://github.com/spring-cloud/spring-cloud-dataflow/issues"&gt;GitHub&lt;/a&gt; or via &lt;a href="https://gitter.im/spring-cloud/spring-cloud-dataflow"&gt;Gitter&lt;/a&gt;.&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Tips: Configuration</title>
    <link rel="alternate" href="https://spring.io/blog/2020/04/23/spring-tips-configuration" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2020-04-23:4039</id>
    <updated>2020-04-23T09:40:49Z</updated>
    <content type="html">&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/PsNNGuLi0ns" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;speaker: &lt;a href="http://twitter.com/starbuxman"&gt;Josh Long (@starbuxman) &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hi, Spring fans! Welcome to another installment of Spring tips! in this installment, we&amp;rsquo;re going to look at something that&amp;rsquo;s rather foundational, and something that I wish I&amp;rsquo;d addressed earlier: configuration. And no, I don&amp;rsquo;t mean functional configuration or java configuration or anything like that, I&amp;rsquo;m talking about the string values that inform how your code executes. the stuff that you put in application.properites. &lt;em&gt;that&lt;/em&gt; configuration. &lt;/p&gt;
&lt;p&gt;All configuration in Spring emanates from the Spring &lt;code&gt;Environment&lt;/code&gt; abstraction. The &lt;code&gt;Environment&lt;/code&gt; is sort of like a dictionary - a map with keys and values. &lt;code&gt;Environment&lt;/code&gt; is just an interface through which we can ask questions about, you know, the &lt;code&gt;Environment&lt;/code&gt;. The abstraction lives in Spring Framework and was introduced in Spring 3, more than a decade ago. up until that point, there was a focused mechanism to allow integration of configuration called property placeholder resolution. This environment mechanism and the constellation of classes around that interface more than supersede that old support. if you find a blog still using those types, may I suggest you move on to newer and greener pastures? :) &lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s get started. Go to the Spring Initializr and generate a new project and make sure to choose &lt;code&gt;Spring Cloud Vault&lt;/code&gt;, &lt;code&gt;Lombok&lt;/code&gt;, and &lt;code&gt;Spring Cloud Config Client&lt;/code&gt;. I named my project &lt;code&gt;configuration&lt;/code&gt;. Go ahead and click &lt;code&gt;Generate&lt;/code&gt; the application. Open the project in your favorite IDE. If you want to follow along, be sure to disable the Spring Cloud Vault and Spring Clod Config Lcieny dependencies. We don&amp;rsquo;t need them right now.&lt;/p&gt;
&lt;p&gt;The first step for most Spring Boot developers is to use application.properties. The Spring Initializr even puts an empty application.properties in the &lt;code&gt;src/main/resources/application.properties.&lt;/code&gt; folder when you generate a new project there! Super convenient. You &lt;em&gt;do&lt;/em&gt; create your projects on the Spring Initializr, don&amp;rsquo;t ya&amp;rsquo;? You could use appication.properties or applicatin.yml. I don&amp;rsquo;t particularly love &lt;code&gt;.yml&lt;/code&gt; files, but you can use it if that&amp;rsquo;s more your taste. &lt;/p&gt;
&lt;p&gt;Spring Boot automatically loads the &lt;code&gt;application.properties&lt;/code&gt; whenever it starts up. You can dereference values from the property file in your java code through the environment. Put a property in the &lt;code&gt;application.properties&lt;/code&gt; file, like this.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint properties"&gt;message-from-application-properties=Hello from application.properties
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, let&amp;rsquo;s edit the code to read in that value. &lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;package com.example.configuration;&#xD;
&#xD;
import lombok.extern.log4j.Log4j2;&#xD;
import org.springframework.boot.ApplicationRunner;&#xD;
import org.springframework.boot.SpringApplication;&#xD;
import org.springframework.boot.autoconfigure.SpringBootApplication;&#xD;
import org.springframework.context.annotation.Bean;&#xD;
import org.springframework.core.env.Environment;&#xD;
&#xD;
@Log4j2&#xD;
@SpringBootApplication&#xD;
public class ConfigurationApplication {&#xD;
&#xD;
    public static void main(String[] args) {&#xD;
        SpringApplication.run(ConfigurationApplication.class, args);&#xD;
    }&#xD;
&#xD;
    @Bean&#xD;
    ApplicationRunner applicationRunner(Environment environment) {&#xD;
        return args -&amp;gt; {&#xD;
            log.info(&amp;quot;message from application.properties &amp;quot; + environment.getProperty(&amp;quot;message-from-application-properties&amp;quot;));&#xD;
        };&#xD;
    }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run this, and you&amp;rsquo;ll see the value form the configuration property file in the output of the log. If you want to change which file SPring Boot rads by default, you can do that too. It&amp;rsquo;s a chicken and egg problem, though - you need to specify a property that Spring Boot will use to figure out where to load all the properties. So you need to specify this outside of the application.properties file. You can use a program argument or an environment variable to fill the &lt;code&gt;spring.config.name&lt;/code&gt; property. &lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint shell "&gt;export SPRING_CONFIG_NAME=foo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Re-run the application now with that environment variable in scope, and it&amp;rsquo;ll fail because it&amp;rsquo;ll try to load &lt;code&gt;foo.properties&lt;/code&gt;, not &lt;code&gt;application.properties&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Incidentally, you could also run the application with the configuration that lives &lt;em&gt;outside&lt;/em&gt; the application, adjacent to the jar, like this. If you run the application like this, the values in the external &lt;code&gt;applicatin.properties&lt;/code&gt; will override the values inside the &lt;code&gt;.jar&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint shell"&gt;.&#xD;
¦§¦¡¦¡ application.properties&#xD;
¦¦¦¡¦¡ configuration-0.0.1-SNAPSHOT.jar&#xD;
&#xD;
0 directories, 2 files
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Spring Boot is aware of Spring profiles, as well. Profiles are a mechanism that lets you tag objects and property files so that they can be selectively activated or deactivated at runtime. This is great if you want to have an environment-specific configuration. You can tag a Spring bean or a configuration file as belonging to a particular profile, and Spring will automatically load it for you when that profile is activated.&lt;/p&gt;
&lt;p&gt;Profile names are, basically, arbitrary. Some profiles are magic - that Spring honors in a particular way. The most interesting of these is &lt;code&gt;default&lt;/code&gt;, which is activated when no other profile is active. But generally, the names are up to you. I find it very useful to map my profiles to different environments: &lt;code&gt;dev&lt;/code&gt;, &lt;code&gt;qa&lt;/code&gt;, &lt;code&gt;staging&lt;/code&gt;, &lt;code&gt;prod&lt;/code&gt;, etc.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say that there&amp;rsquo;s a profile called &lt;code&gt;dev&lt;/code&gt;. Spring Boot will automatically load &lt;code&gt;application-dev.properties&lt;/code&gt;. It&amp;rsquo;ll load that in addition to applicatin.properties. If there are any conflicts between values in the two files, then the more specific file - the one with the profile - wins. You could have a default value that applies absent a particular profile, and then provide specifics in the config for a profile. &lt;/p&gt;
&lt;p&gt;You can activate a given profile in several different ways, but the easiest is just to specify it on the command line. Or you could turn it on in your IDE&amp;rsquo;s run configurations dialog box. IntelliJ and Spring Tool Suite both provide a place to specify the profile to sue when running the application. You can also set an env var, &lt;code&gt;SPRING_PROFILES_ACTIVE&lt;/code&gt;, or specify an argument on the command line &lt;code&gt;--spring.profiles.active&lt;/code&gt;. Either one accepts a comma-delimited list of profiles - you can activate more than one profile at a time. &lt;/p&gt;
&lt;p&gt;Le&amp;rsquo;ts try that out. Create a file called &lt;code&gt;application-dev.properties&lt;/code&gt;. Put the following value in it.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint properties"&gt;message-from-application-properties=Hello from dev application.properties
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This property has the same key like the one in &lt;code&gt;application.properties&lt;/code&gt;. The java code here is identical to what we had before. Just be sure to specify the profile before you start the Spring application. You can use the environment variable, properties, etc. You can even define it programmatically when building the &lt;code&gt;SpringApplication&lt;/code&gt; in the &lt;code&gt;main()&lt;/code&gt; method. &lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;package com.example.configuration.profiles;&#xD;
&#xD;
import lombok.extern.log4j.Log4j2;&#xD;
import org.springframework.boot.ApplicationRunner;&#xD;
import org.springframework.boot.autoconfigure.SpringBootApplication;&#xD;
import org.springframework.boot.builder.SpringApplicationBuilder;&#xD;
import org.springframework.context.annotation.Bean;&#xD;
import org.springframework.core.env.Environment;&#xD;
&#xD;
@Log4j2&#xD;
@SpringBootApplication&#xD;
public class ConfigurationApplication {&#xD;
&#xD;
    public static void main(String[] args) {&#xD;
        // this works&#xD;
        // export SPRING_PROFILES_ACTIVE=dev  &#xD;
        // System.setProperty(&amp;quot;spring.profiles.active&amp;quot;, &amp;quot;dev&amp;quot;); // so does this&#xD;
        new SpringApplicationBuilder()&#xD;
            .profiles(&amp;quot;dev&amp;quot;) // and so does this&#xD;
            .sources(ConfigurationApplication.class)&#xD;
            .run(args);&#xD;
    }&#xD;
&#xD;
    @Bean&#xD;
    ApplicationRunner applicationRunner(Environment environment) {&#xD;
        return args -&amp;gt; {&#xD;
            log.info(&amp;quot;message from application.properties &amp;quot; + environment.getProperty(&amp;quot;message-from-application-properties&amp;quot;));&#xD;
        };&#xD;
    }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run the application, and you&amp;rsquo;ll see the specialized message reflected in the output. &lt;/p&gt;
&lt;p&gt;So far, we&amp;rsquo;ve been using the ENvironment to inject the configuration. You can also use &lt;code&gt;@Value&lt;/code&gt; annotation to inject the value as a parameter. You probably already know that. But did you know that you can also specify default values to be returned if there are no other values that match? There are a lot of reasons why you might want to do this. You could use it to provide fallback values and make it more transparent when somebody fat fingers the spelling of a property. It is also useful because you are given a value that might be useful if somebody doesn&amp;rsquo;t know that they need to activate a profile or something,.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;package com.example.configuration.value;&#xD;
&#xD;
import lombok.extern.log4j.Log4j2;&#xD;
import org.springframework.beans.factory.annotation.Value;&#xD;
import org.springframework.boot.ApplicationRunner;&#xD;
import org.springframework.boot.SpringApplication;&#xD;
import org.springframework.boot.autoconfigure.SpringBootApplication;&#xD;
import org.springframework.context.annotation.Bean;&#xD;
&#xD;
@Log4j2&#xD;
@SpringBootApplication&#xD;
public class ConfigurationApplication {&#xD;
&#xD;
    public static void main(String[] args) {&#xD;
        SpringApplication.run(ConfigurationApplication.class, args);&#xD;
    }&#xD;
&#xD;
    @Bean&#xD;
    ApplicationRunner applicationRunner(&#xD;
        @Value(&amp;quot;${message-from-application-properties:OOPS!}&amp;quot;) String valueDoesExist,&#xD;
        @Value(&amp;quot;${mesage-from-application-properties:OOPS!}&amp;quot;) String valueDoesNotExist) {&#xD;
        return args -&amp;gt; {&#xD;
            log.info(&amp;quot;message from application.properties &amp;quot; + valueDoesExist);&#xD;
            log.info(&amp;quot;missing message from application.properties &amp;quot; + valueDoesNotExist);&#xD;
        };&#xD;
    }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Convenient, eh? Also, note that the default String that you provide can, in turn, interpolate some other property. So you could do something like this, assuming a key like &lt;code&gt;default-error-message&lt;/code&gt; does exist somewhere in your application configuration: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;${message-from-application-properties:${default-error-message:YIKES!}}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;That will evaluate the first property if it exists, then the second and then the String &lt;code&gt;YIKES!&lt;/code&gt;, finally. &lt;/p&gt;
&lt;p&gt;Earlier, we looked at how to specify a profile using an environment variable or program argument. This mechanism - configuring Spring Boot with environment variables or program arguments - is a general-purpose. You can use it for any arbitrary key, and Spring Boot will normalize the configuration for you. Any key that you would out in application.properties can be specified externally in this way. Let&amp;rsquo;s see some examples. Let&amp;rsquo;s suppose you want to specify the URL for a data source connection. You &lt;em&gt;could&lt;/em&gt; hardcode that value in the application.properties, but that&amp;rsquo;s not very secure. It might be much better to create instead an environment variable that only exists in production. That way, the developers don&amp;rsquo;t have access to the keys to the production database and so on. &lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s try it out. Heres the java code fo the example. &lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;&lt;br/&gt;package com.example.configuration.envvars;&#xD;
&#xD;
import lombok.extern.log4j.Log4j2;&#xD;
import org.springframework.boot.ApplicationRunner;&#xD;
import org.springframework.boot.SpringApplication;&#xD;
import org.springframework.boot.autoconfigure.SpringBootApplication;&#xD;
import org.springframework.context.annotation.Bean;&#xD;
import org.springframework.core.env.Environment;&#xD;
&#xD;
@Log4j2&#xD;
@SpringBootApplication&#xD;
public class ConfigurationApplication {&#xD;
&#xD;
    public static void main(String[] args) {&#xD;
        // simulate program arguments&#xD;
        String[] actualArgs = new String[]{&amp;quot;spring.datasource.url=jdbc:postgres://localhost/some-prod-db&amp;quot;};&#xD;
        SpringApplication.run(ConfigurationApplication.class, actualArgs);&#xD;
    }&#xD;
&#xD;
    @Bean&#xD;
    ApplicationRunner applicationRunner(Environment environment) {&#xD;
        return args -&amp;gt; {&#xD;
            log.info(&amp;quot;our database URL connection will be &amp;quot; + environment.getProperty(&amp;quot;spring.datasource.url&amp;quot;));&#xD;
        };&#xD;
    }&#xD;
}&#xD;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Before you run it, be sure to either export an environment variable in the shell that you use to run your application or to specify a program argument. I simulate the latter - the program arguments - by intercepting the &lt;code&gt;public static void main(String [] args)&lt;/code&gt; that we pass into the Spring Boot application here. You can also specify an env variable like this: &lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint shell"&gt;export SPRING_DATASOURCE_URL=some-arbitrary-value&#xD;
mvn -DskipTests=true spring-boot:run 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run the program multiple times, trying out the different approaches, and you will see the values in the output. There&amp;rsquo;s no autoconfiguration in the application that will connect to a database, so we&amp;rsquo;re using this property as an example. The URL doesn&amp;rsquo;t have to be a valid URL (at least not until you add Spring&amp;rsquo;s JDBC support and a JDBC driver to the classpath).&lt;/p&gt;
&lt;p&gt;Spring Boot is &lt;em&gt;very&lt;/em&gt; flexible in its sourcing of the values. It doesn&amp;rsquo;t care if you do &lt;code&gt;SPRING_DATASOURCE_URL&lt;/code&gt;, &lt;code&gt;spring.datasource.url&lt;/code&gt;, etc. Spring Boot calls this &lt;em&gt;relaxed binding&lt;/em&gt;. It allows you to do things in a way that&amp;rsquo;s most natural for different environments, while still working for Spring Boot.&lt;/p&gt;
&lt;p&gt;This idea - of externalizing configuration for an application from the environment - is not new. It&amp;rsquo;s well understood and described in the &lt;a href="https://12factor.net/config"&gt;12-factor manifesto&lt;/a&gt;. The 12-factor manifesto says that environment-specific config should live in that environment, not in the code itself. This is because we want one build for all the environments. Things that change should be external. So far, we&amp;rsquo;ve seen that Spring Boot can pull in configuration from the command line arguments (program arguments), and environment variables. It can also read configuration coming from JOpt. It can come even from a JNDI context if you happen to be running in an application server with one of those around! &lt;/p&gt;
&lt;p&gt;Spring Boots&amp;rsquo;s ability o pull in any environment variable is beneficial here. It&amp;rsquo;s also more secure than using program arguments because the program arguments will show up in the output of operating system tools. Environment variables are a better fit.&lt;/p&gt;
&lt;p&gt;So far, we&amp;rsquo;ve seent hat Spring Boot can pull in configuration from a lot of different places. It knows about profiles, it knows about &lt;code&gt;.yml.&lt;/code&gt; and &lt;code&gt;.properties&lt;/code&gt;. It&amp;rsquo;s pretty flexible! But what if it doesn&amp;rsquo;t know how to do what you want it to do? You can easily reach its new tricks using a custom &lt;code&gt;PropertySource&amp;lt;T&amp;gt;&lt;/code&gt;. You might want to do something like this if you wish to, for example, to integrate your application with the configuration you&amp;rsquo;re storing in an external database or a directory or some other things about which Spring Boot doesn&amp;rsquo;t automatically know. &lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;&lt;br/&gt;package com.example.configuration.propertysource;&#xD;
&#xD;
import lombok.extern.log4j.Log4j2;&#xD;
import org.springframework.beans.factory.annotation.Value;&#xD;
import org.springframework.boot.ApplicationRunner;&#xD;
import org.springframework.boot.autoconfigure.SpringBootApplication;&#xD;
import org.springframework.boot.builder.SpringApplicationBuilder;&#xD;
import org.springframework.context.annotation.Bean;&#xD;
import org.springframework.core.env.PropertySource;&#xD;
&#xD;
@Log4j2&#xD;
@SpringBootApplication&#xD;
public class ConfigurationApplication {&#xD;
&#xD;
    public static void main(String[] args) {&#xD;
        new SpringApplicationBuilder()&#xD;
            .sources(ConfigurationApplication.class)&#xD;
            .initializers(context -&amp;gt; context&#xD;
                .getEnvironment()&#xD;
                .getPropertySources()&#xD;
                .addLast(new BootifulPropertySource())&#xD;
            )&#xD;
            .run(args);&#xD;
    }&#xD;
&#xD;
    @Bean&#xD;
    ApplicationRunner applicationRunner(@Value(&amp;quot;${bootiful-message}&amp;quot;) String bootifulMessage) {&#xD;
        return args -&amp;gt; {&#xD;
            log.info(&amp;quot;message from custom PropertySource: &amp;quot; + bootifulMessage);&#xD;
        };&#xD;
    }&#xD;
}&#xD;
&#xD;
class BootifulPropertySource extends PropertySource&amp;lt;String&amp;gt; {&#xD;
&#xD;
    BootifulPropertySource() {&#xD;
        super(&amp;quot;bootiful&amp;quot;);&#xD;
    }&#xD;
&#xD;
    @Override&#xD;
    public Object getProperty(String name) {&#xD;
&#xD;
        if (name.equalsIgnoreCase(&amp;quot;bootiful-message&amp;quot;)) {&#xD;
            return &amp;quot;Hello from &amp;quot; + BootifulPropertySource.class.getSimpleName() + &amp;quot;!&amp;quot;;&#xD;
        }&#xD;
&#xD;
        return null;&#xD;
    }&#xD;
}&#xD;
&#xD;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The example above is the safest way to register a &lt;code&gt;PropertySource&lt;/code&gt; early enough on that everything that needs it will be able to find it. You can also do it at runtime when Spring has started wiring objects together, and you have access to configured objects, but I wouldn&amp;rsquo;t be sure that this will work in every situation. Heres how that might look. &lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;package com.example.configuration.propertysource;&#xD;
&#xD;
import lombok.extern.log4j.Log4j2;&#xD;
import org.springframework.beans.factory.annotation.Autowired;&#xD;
import org.springframework.beans.factory.annotation.Value;&#xD;
import org.springframework.boot.ApplicationRunner;&#xD;
import org.springframework.boot.SpringApplication;&#xD;
import org.springframework.boot.autoconfigure.SpringBootApplication;&#xD;
import org.springframework.context.annotation.Bean;&#xD;
import org.springframework.core.env.ConfigurableEnvironment;&#xD;
import org.springframework.core.env.PropertySource;&#xD;
&#xD;
@Log4j2&#xD;
@SpringBootApplication&#xD;
public class ConfigurationApplication {&#xD;
&#xD;
    public static void main(String[] args) {&#xD;
        SpringApplication.run(ConfigurationApplication.class, args);&#xD;
    }&#xD;
&#xD;
    @Bean&#xD;
    ApplicationRunner applicationRunner(@Value(&amp;quot;${bootiful-message}&amp;quot;) String bootifulMessage) {&#xD;
        return args -&amp;gt; {&#xD;
            log.info(&amp;quot;message from custom PropertySource: &amp;quot; + bootifulMessage);&#xD;
        };&#xD;
    }&#xD;
&#xD;
    @Autowired&#xD;
    void contributeToTheEnvironment(ConfigurableEnvironment environment) {&#xD;
        environment.getPropertySources().addLast(new BootifulPropertySource());&#xD;
    }&#xD;
}&#xD;
&#xD;
class BootifulPropertySource extends PropertySource&amp;lt;String&amp;gt; {&#xD;
&#xD;
    BootifulPropertySource() {&#xD;
        super(&amp;quot;bootiful&amp;quot;);&#xD;
    }&#xD;
&#xD;
    @Override&#xD;
    public Object getProperty(String name) {&#xD;
&#xD;
        if (name.equalsIgnoreCase(&amp;quot;bootiful-message&amp;quot;)) {&#xD;
            return &amp;quot;Hello from &amp;quot; + BootifulPropertySource.class.getSimpleName() + &amp;quot;!&amp;quot;;&#xD;
        }&#xD;
&#xD;
        return null;&#xD;
    }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thus far, we&amp;rsquo;ve looked almost entirely at how to source property values from elsewhere. Still, we haven&amp;rsquo;t talked about what becomes of the Strings once they&amp;rsquo;re in our working memory and available for use in the application. Most of the time, they&amp;rsquo;re just strings, and we can use them as-is. Sometimes, however, it&amp;rsquo;s useful to turn them into other types of values - ints, Dates, doubles, etc. this work - turning strings into things - could be the topic of a whole other Spring Tips video and perhaps one ill do soon. Suffice it to say that there are a lot of interrelated pieces there - the &lt;code&gt;ConversionService&lt;/code&gt;, &lt;code&gt;Converter&amp;lt;T&amp;gt;&lt;/code&gt;s, Spring Boot&amp;rsquo;s &lt;code&gt;Binder&lt;/code&gt;s, and so much more. For common cases, this will just work. You can, for example, specify a property &lt;code&gt;server.port = 8080&lt;/code&gt; and then inject it into your application as an int:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@Value(&amp;quot;${server.port}&amp;quot;) int port
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It might be helpful to have these values bound to an object automatically. This is precisely what Spring Boots &lt;code&gt;ConfigutationProperties&lt;/code&gt; do for you. Let&amp;rsquo;s see this in action. &lt;/p&gt;
&lt;p&gt;Ley&amp;rsquo;s say that ou ave an application.properties file with the following property:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint property"&gt;bootiful.message = Hello from a @ConfiguratinoProperties 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then you can run the application and see that the configuration value has been bound to the object for us: &lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;package com.example.configuration.cp;&#xD;
&#xD;
import lombok.Data;&#xD;
import lombok.RequiredArgsConstructor;&#xD;
import lombok.extern.log4j.Log4j2;&#xD;
import org.springframework.boot.ApplicationRunner;&#xD;
import org.springframework.boot.SpringApplication;&#xD;
import org.springframework.boot.autoconfigure.SpringBootApplication;&#xD;
import org.springframework.boot.context.properties.ConfigurationProperties;&#xD;
import org.springframework.boot.context.properties.ConstructorBinding;&#xD;
import org.springframework.boot.context.properties.EnableConfigurationProperties;&#xD;
import org.springframework.context.annotation.Bean;&#xD;
&#xD;
@Log4j2&#xD;
@SpringBootApplication&#xD;
@EnableConfigurationProperties(BootifulProperties.class)&#xD;
public class ConfigurationApplication {&#xD;
&#xD;
    public static void main(String[] args) {&#xD;
        SpringApplication.run(ConfigurationApplication.class, args);&#xD;
    }&#xD;
    &#xD;
    @Bean&#xD;
    ApplicationRunner applicationRunner(BootifulProperties bootifulProperties) {&#xD;
        return args -&amp;gt; {&#xD;
            log.info(&amp;quot;message from @ConfigurationProperties &amp;quot; + bootifulProperties.getMessage());&#xD;
        };&#xD;
    }&#xD;
 &#xD;
}&#xD;
&#xD;
@Data&#xD;
@RequiredArgsConstructor&#xD;
@ConstructorBinding&#xD;
@ConfigurationProperties(&amp;quot;bootiful&amp;quot;)&#xD;
class BootifulProperties {&#xD;
    private final String message;&#xD;
}&#xD;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;@Data&lt;/code&gt; and &lt;code&gt;@RequiredArgsConstructor&lt;/code&gt; annotations on the &lt;code&gt;BootifulProperties&lt;/code&gt; object come from Lombok. &lt;code&gt;@Data&lt;/code&gt; synthesizes getters for final fields and getters and setters for non-final fields. &lt;code&gt;@RequiredArgsConstructor&lt;/code&gt; synthesizes a constructor for all the final fields int he class. The result is an object that&amp;rsquo;s immutable once constructed through constructor initialization. Spring boot&amp;rsquo;s ConfigurationProperties mechanism doesn&amp;rsquo;t know about immutable objects by default; you need to use the &lt;code&gt;@ConstructorBinding&lt;/code&gt; annotation, a reasonably new addition to Spring Boot, to make it do the right thing here. This is even more useful in other programming languages like Kotlin (&lt;code&gt;data class ...&lt;/code&gt;) and Scala (&lt;code&gt;case class ...&lt;/code&gt;), which have syntax sugar for creating immutable objects.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ve seen that Spring can load configuration adjacent to the application &lt;code&gt;.jar&lt;/code&gt;, and that it can load the configuration from environment variables and program arguments. It&amp;rsquo;s not hard o get information into a Spring Boot application, but its sort of piecemeal. It&amp;rsquo;s hard to version control environment variables or to secure program arguments. &lt;/p&gt;
&lt;p&gt;To solve some of these problems, the Spring Cloud team built the spring CLou COnfigu Server. The Spring Cloud Config Server is an HTTP API that fronts a backend storage engine. The storage s pluggable, with the most common being a Git repository, though there is support for others as well. These include SUbversion, a local file system, and even &lt;a href="https://github.com/spring-cloud-incubator/spring-cloud-config-server-mongodb"&gt;MongDB&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re going to set up a new Spring Cloud Config Server. Go to the Spring Initializr and choose &lt;code&gt;Config Server&lt;/code&gt; and then click &lt;code&gt;Generate&lt;/code&gt;. Open it in your favorite IDE.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re going to need to do two things to make it work: first, we must use an annotation and then provide a configuration value to point it to the Git repository with our configuration file. Here are the &lt;code&gt;application.properties&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint properties"&gt;spring.cloud.config.server.git.uri=https://github.com/joshlong/greetings-config-repository.git&#xD;
server.port=8888
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here&amp;rsquo;s what your main class should look like.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;package com.example.configserver;&#xD;
&#xD;
import org.springframework.boot.SpringApplication;&#xD;
import org.springframework.boot.autoconfigure.SpringBootApplication;&#xD;
import org.springframework.cloud.config.server.EnableConfigServer;&#xD;
&#xD;
@EnableConfigServer&#xD;
@SpringBootApplication&#xD;
public class ConfigServerApplication {&#xD;
&#xD;
    public static void main(String[] args) {&#xD;
        SpringApplication.run(ConfigServerApplication.class, args);&#xD;
    }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run the application - &lt;code&gt;mvn spring-boot:run&lt;/code&gt; or just run the application in your favorite IDe. It&amp;rsquo;s now available. It&amp;rsquo;ll act as a proxy to the Git configuration in the Github repository. Other clients can then use the Spring Cloud Config Client to pull their configuration in from the Spring Cloud Config Server, which will, in turn, pull it in from the Gi repository. Note: I&amp;rsquo;m making this as insecure as possible for ease of the demo, ut you can and should secure both links in the chain - from the config client to the config server, and from the config server to the git repository. Spring Cloud Config Server, the Spring Cloud Config Client, and Github all work well together, and securely. &lt;/p&gt;
&lt;p&gt;Now, go back to the build for our configuration app and makes rue to uncomment the Spring Cloud Config Client dependency. To start the Spring Cloud Config Server, it&amp;rsquo;ll need to have some - you guessed it! - configuration. A classic chicken and egg problem. This configuration needs to be evaluated earlier, before the rest of the configuration. You can put this configuration in a file called &lt;code&gt;bootstrap.properties&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll need to identify your application to give it a name so that when it connects to the Spring Cloud Config Server, it will know which configuration to provide us. The name we specify here will be matched to a property file in the Git repository. Here&amp;rsquo;s what you should put in the file.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;spring.cloud.config.uri=http://localhost:8888&#xD;
spring.application.name=bootiful
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now we can read any value we want in the git repository in the &lt;code&gt;bootiful.properties&lt;/code&gt; file whose contents are:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;message-from-config-server = Hello, Spring Cloud Config Server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can pull that configuration file in like this: &lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;package com.example.configuration.configclient;&#xD;
&#xD;
import lombok.extern.log4j.Log4j2;&#xD;
import org.springframework.beans.factory.annotation.Value;&#xD;
import org.springframework.boot.ApplicationRunner;&#xD;
import org.springframework.boot.SpringApplication;&#xD;
import org.springframework.boot.autoconfigure.SpringBootApplication;&#xD;
import org.springframework.context.annotation.Bean;&#xD;
&#xD;
@Log4j2&#xD;
@SpringBootApplication&#xD;
public class ConfigurationApplication {&#xD;
&#xD;
    public static void main(String[] args) {&#xD;
        SpringApplication.run(ConfigurationApplication.class, args);&#xD;
    }&#xD;
&#xD;
    @Bean&#xD;
    ApplicationRunner applicationRunner(@Value(&amp;quot;${message-from-config-server}&amp;quot;) String configServer) {&#xD;
        return args -&amp;gt; {&#xD;
            log.info(&amp;quot;message from the Spring Cloud Config Server: &amp;quot; + configServer);&#xD;
        };&#xD;
    }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You should see the value in the output. Not bad! The Spring Cloud Config Server does a lot of cool stuff for us. It can encrypt values for us. It can help version out properties. One of my favorite things is that you can change the configuration independent of the change to the codebase. You can use that in conjunction with the Spring Cloud &lt;code&gt;@RefreshScope&lt;/code&gt; to dynamically reconfigure an application after it started running. (I should do a video on the refresh scope and its many myriad uses&amp;hellip;) The Spring Cloud Config Server is among the most popular Spring Cloud modules for a reason - it can be used with monoliths and microservices alike. &lt;/p&gt;
&lt;p&gt;The Spring Cloud Config Server can encrypt values in the property files if you configure it appropriately. It works. A lot of folks also use Hashicorp&amp;rsquo;s excellent Vault product, which is a much more fully-featured offering for security. Vault can secure, store, and tightly control access to tokens, passwords, certificates, encryption keys for protecting secrets, and other sensitive data using a UI, CLI, or HTTP API. You can also use this easily as a property source using the Spring Cloud Vault project. Uncomment the Sring Cloud Vault dependency from the build, and let us look at setting up Hashicorp Vault. &lt;/p&gt;
&lt;p&gt;Download the latest version and then run the following commands. I&amp;rsquo;m assuming a Linux or Unix-like environment. It should be fairly straightforward to translate to Windows, though. I won&amp;rsquo;t try to explain everything about Vault; I&amp;rsquo;d refer you to the excellent Getting Statted guides for &lt;a href="https://learn.hashicorp.com/vault/getting-started/install"&gt;Hashicorp Vault&lt;/a&gt;, instead. Here&amp;rsquo;s the least-secure, but quickest, the way I know to get this all set up and working. First, run the Vault server. I&amp;rsquo;m providing a root token here, but you would typically use the token provided by Vault on startup. &lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint shell"&gt;export VAULT_ADDR=&amp;quot;https://localhost:8200&amp;quot;&#xD;
export VAULT_SKIP_VERIFY=true&#xD;
export VAULT_TOKEN=00000000-0000-0000-0000-000000000000&#xD;
vault server --dev --dev-root-token-id=&amp;quot;00000000-0000-0000-0000-000000000000&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once that&amp;rsquo;s up, in another shell, install some values into the Vault server, like this.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint shell"&gt;export VAULT_ADDR=&amp;quot;http://localhost:8200&amp;quot;&#xD;
export VAULT_SKIP_VERIFY=true&#xD;
export VAULT_TOKEN=00000000-0000-0000-0000-000000000000&#xD;
vault kv put secret/bootiful message-from-vault-server=&amp;quot;Hello Spring Cloud Vault&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That puts the key &lt;code&gt;message-from-vault-server&lt;/code&gt; with a value &lt;code&gt;Hello Spring Cloud Vault&lt;/code&gt; into the Vault service. Now, let&amp;rsquo;s change our application to connect to that Vault instance to read the secure values. We&amp;rsquo;ll need a bootstrap.properties, just as with the Spring Cloud Config Client. &lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint properties"&gt;spring.application.name=bootiful&#xD;
spring.cloud.vault.token=${VAULT_TOKEN}&#xD;
spring.cloud.vault.scheme=http
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, you can use the property just like any other configuration values. &lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;package com.example.configuration.vault;&#xD;
&#xD;
import lombok.extern.log4j.Log4j2;&#xD;
import org.springframework.beans.factory.annotation.Value;&#xD;
import org.springframework.boot.ApplicationRunner;&#xD;
import org.springframework.boot.SpringApplication;&#xD;
import org.springframework.boot.autoconfigure.SpringBootApplication;&#xD;
import org.springframework.context.annotation.Bean;&#xD;
&#xD;
@Log4j2&#xD;
@SpringBootApplication&#xD;
public class ConfigurationApplication {&#xD;
&#xD;
    public static void main(String[] args) {&#xD;
        SpringApplication.run(ConfigurationApplication.class, args);&#xD;
    }&#xD;
&#xD;
    @Bean&#xD;
    ApplicationRunner applicationRunner(@Value(&amp;quot;${message-from-vault-server:}&amp;quot;) String valueFromVaultServer) {&#xD;
        return args -&amp;gt; {&#xD;
            log.info(&amp;quot;message from the Spring Cloud Vault Server : &amp;quot; + valueFromVaultServer);&#xD;
        };&#xD;
    }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, before you run this, make sure also to have the same three environment variables we used in the tow interactions with the &lt;code&gt;vault&lt;/code&gt; CLI configured: &lt;code&gt;VAULT_TOKEN&lt;/code&gt;, &lt;code&gt;VAULT_SKIP_VERIFY&lt;/code&gt;, and &lt;code&gt;VAULT_ADDR&lt;/code&gt;. Then run it, and you should see reflected on the console the value that you write to Hashicorp Vault. &lt;/p&gt;&lt;h2&gt;&lt;a href="#next-steps" class="anchor" name="next-steps"&gt;&lt;/a&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;Hopefully, you&amp;rsquo;ve learned something about the colorful and compelling world of configuration in SPring. With this information under your belt, you&amp;rsquo;re now better prepared to use the other projects that support property resolution. Armed with this knowledge of how this works, you&amp;rsquo;re ready to integrate configuration from different Spring integrations, of which there are a &lt;em&gt;ton&lt;/em&gt;! You might use the Spring Cloud Netflix&amp;rsquo; Archaius integration, or the Configmaps integration with Spring Cloud Kubernetes, or the Spring Cloud GCP&amp;rsquo;s Google Runtime Configuration API integration, or Spring Cloud Azure&amp;rsquo;s Microsoft Azure Key Vault integration, etc.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve only mentioned a few offerings here, but it doesn&amp;rsquo;t matter if the list is exhaustive, their use will be the same if the integration is correct: the cloud&amp;rsquo;s the limit! &lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Tools 4.6.1 released</title>
    <link rel="alternate" href="https://spring.io/blog/2020/04/22/spring-tools-4-6-1-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Martin Lippert</name>
    </author>
    <id>tag:spring.io,2020-04-22:4038</id>
    <updated>2020-04-22T18:55:43Z</updated>
    <content type="html">&lt;p&gt;Dear Spring Community,&lt;/p&gt;
&lt;p&gt;I am happy to announce the 4.6.1 release of the Spring Tools 4 for Eclipse, Visual Studio Code, and Theia.&lt;/p&gt;
&lt;p&gt;Highlights from this release include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;(Spring Boot)&lt;/em&gt; improvement: Spring yaml validation doesn&amp;rsquo;t understand the &amp;ldquo;&amp;lt;&amp;lt;:&amp;rdquo; syntax (&lt;a href="https://github.com/spring-projects/sts4/issues/440"&gt;#440&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Spring Boot)&lt;/em&gt; improvement: YAML Property completion: Superclass properties not detected in case of List or Map (&lt;a href="https://github.com/spring-projects/sts4/issues/449"&gt;#449&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Spring Boot)&lt;/em&gt; improvement: improved performance for content-assist for Spring XML config files&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Spring Boot)&lt;/em&gt; bugfix: Quick Fix for unknown properties broken (&lt;a href="https://github.com/spring-projects/sts4/issues/442"&gt;#442&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Eclipse)&lt;/em&gt; improvement: early access builds on Eclipse 2020-06 milestone builds available&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Eclipse)&lt;/em&gt; improvement: reduced timeout for ls-based content-assist for the Java Editor, so broken or slow language server behavior should not damage JDT content-assist experience anymore&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Eclipse)&lt;/em&gt; improvement: vastly reduced communication traffic around classpath changes between Eclipse and the Spring Boot language server&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Eclipse)&lt;/em&gt; improvement: async retrieval of properties of remote apps in boot dashboard to avoid UI freezes or delays&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Eclipse)&lt;/em&gt; bugfix: org.eclipse.mylyn.wikitext.markdown required to update to 4.6.0 (&lt;a href="https://github.com/spring-projects/sts4/issues/429"&gt;#429&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Eclipse)&lt;/em&gt; bugfix: remote targets in boot dashboard always re-appeared after deleting them&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Eclipse)&lt;/em&gt; bugfix: errors being logged at language server startup, related LSP4E rename handler&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(VSCode)&lt;/em&gt;: Visual Studio Code extensions now available from the &lt;a href="https://open-vsx.org"&gt;https://open-vsx.org&lt;/a&gt; marketplace&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To download the distribution for Eclipse and find links to the marketplace entries for Visual Studio Code and Theia, please go visit:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Tools 4: &lt;a href="https://spring.io/tools/"&gt;https://spring.io/tools/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Detailed changes can be found here: &lt;a href="https://github.com/spring-projects/sts4/wiki/Changelog#2020-04-23-461-release"&gt;https://github.com/spring-projects/sts4/wiki/Changelog#2020-04-23-461-release&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Spring Tools 4.6.2 is scheduled to be released in late May 2020.&lt;/p&gt;
&lt;p&gt;Enjoy and stay healthy!&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring HATEOAS brings you new ways to configure clients</title>
    <link rel="alternate" href="https://spring.io/blog/2020/04/22/spring-hateoas-brings-you-new-ways-to-configure-clients" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Greg Turnquist</name>
    </author>
    <id>tag:spring.io,2020-03-31:4017</id>
    <updated>2020-04-22T02:07:54Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;Dear Spring community,&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;With Spring HATEOAS&amp;#8217;s recent &lt;code&gt;1.1.0.M3&lt;/code&gt; release, we bring you a new way to configure clients!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The first step in building hypermedia-based services may be configuring your server, which Spring HATEOAS has provided for a long time through its &lt;code&gt;@EnableHypermediaSupport()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The next major step is building a client that can parse that hypermedia output. This has always been available, but it required you to know some of the deepest innards of the Spring Framework.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Until today.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;With the latest version of Spring HATEOAS, it has been made &lt;em&gt;much&lt;/em&gt; easier to configure &lt;code&gt;RestTemplate&lt;/code&gt;, &lt;code&gt;WebClient&lt;/code&gt;, or &lt;code&gt;WebTestClient&lt;/code&gt; instances.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="configuring-resttemplate"&gt;&lt;a class="anchor" href="#configuring-resttemplate"&gt;&lt;/a&gt;Configuring &lt;code&gt;RestTemplate&lt;/code&gt;&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Spring HATEOAS now creates a bean called the &lt;code&gt;HypermediaRestTemplateConfigurer&lt;/code&gt;. Grab it and you can apply it to any &lt;code&gt;RestTemplate&lt;/code&gt; instance you have.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;@Bean
RestTemplate restTemplate(HypermediaRestTemplateConfigurer configurer) {
  return configurer.registerHypermediaTypes(new RestTemplate());
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;This example shows that after creating a &lt;code&gt;RestTemplate&lt;/code&gt; instance, you can pipe it into that &lt;code&gt;HypermediaRestTemplateConfigurer&lt;/code&gt; via its &lt;code&gt;registerHypermediaTypes&lt;/code&gt;. In this context, it gets registered as a bean in the user&amp;#8217;s application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;If you&amp;#8217;re using Spring Boot (as you should!), there is an even better way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;@Bean
RestTemplateCustomizer restTemplateCustomizer(
                                   HypermediaRestTemplateConfigurer configurer) {
    return restTemplate -&amp;gt; {
        configurer.registerHypermediaTypes(restTemplate);
    };
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;This bean will get picked up and applied to Spring Boot&amp;#8217;s autoconfigured &lt;code&gt;RestTemplateBuilder&lt;/code&gt;. Anytime you need a &lt;code&gt;RestTemplate&lt;/code&gt;, you simply inject &lt;code&gt;RestTemplateBuilder&lt;/code&gt;, apply any final adjustments (credentials, cache settings, etc.) and invoke &lt;code&gt;build()&lt;/code&gt;. This gives you a concrete &lt;code&gt;RestTemplate&lt;/code&gt; with hypermedia support applied.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="admonitionblock important"&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class="icon"&gt;
&lt;div class="title"&gt;Important&lt;/div&gt;
&lt;/td&gt;
&lt;td class="content"&gt;
Spring Boot has long moved past the concept of having a single &lt;code&gt;RestTemplate&lt;/code&gt; bean registered in the application context. Instead it supports the customizer-based approach. However, Spring HATEOAS will &lt;em&gt;still&lt;/em&gt; automatically configure a &lt;code&gt;RestTemplate&lt;/code&gt; if you register it as a bean.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Either way, Spring HATEOAS makes it super simple to register hypermedia support with your &lt;code&gt;RestTemplate&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="configuring-webclient-instances"&gt;&lt;a class="anchor" href="#configuring-webclient-instances"&gt;&lt;/a&gt;Configuring &lt;code&gt;WebClient&lt;/code&gt; instances&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;If you&amp;#8217;re building reactive applications using Spring WebFlux, you&amp;#8217;re probably itching to use &lt;code&gt;WebClient&lt;/code&gt;, Spring&amp;#8217;s newest client that has reactive built in. To wire it for hypermedia, you&amp;#8217;ll want to get a hold of Spring HATEOAS&amp;#8217;s &lt;code&gt;HypermediaWebClientConfigurer&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;@Bean
WebClient.Builder webClientBuilder(HypermediaWebClientConfigurer configurer) {
  return configurer.registerHypermediaTypes(WebClient.builder());
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;This bean will grab the &lt;code&gt;HypermediaWebClientConfigurer&lt;/code&gt; and apply it to the the &lt;code&gt;WebClient.Builder&lt;/code&gt; created via it&amp;#8217;s static helper method (&lt;code&gt;builder()&lt;/code&gt;), returning a &lt;code&gt;WebClient.Builder&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Remember how Boot has that &lt;code&gt;RestTemplateBuilder&lt;/code&gt;? &lt;code&gt;WebClient&lt;/code&gt; already has something just like that in the Spring Framework.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;And if you want to configure things in Spring Boot, this is how you do that:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;@Bean
WebClientCustomizer webClientCustomizer(HypermediaWebClientConfigurer configurer) {
    return webClientBuilder -&amp;gt; {
        configurer.registerHypermediaTypes(webClientBuilder);
    };
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Spring Boot autoconfigures a &lt;code&gt;WebClient.Builder&lt;/code&gt;. And it applies any &lt;code&gt;WebClientCustomizer&lt;/code&gt; beans, makingg it super easy to add hypermedia support. To use it, just inject that &lt;code&gt;WebClient.Builder&lt;/code&gt; into your app, apply any extra settings (credentials, etc.) , and hit &lt;code&gt;build()&lt;/code&gt; to get a &lt;code&gt;WebClient&lt;/code&gt; instance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;This even has support for &lt;code&gt;WebTestClient&lt;/code&gt;, but this post is already long enough. Go and &lt;a href="https://docs.spring.io/spring-hateoas/docs/1.1.0.BUILD-SNAPSHOT/reference/html/#client.web-test-client"&gt;chew on the reference docs&lt;/a&gt; if you are eager to include hypermedia-based unit testing in your application as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Cheers!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - April 21st, 2020</title>
    <link rel="alternate" href="https://spring.io/blog/2020/04/21/this-week-in-spring-april-21st-2020" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2020-04-21:4037</id>
    <updated>2020-04-21T19:10:00Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! It&amp;rsquo;s been another fun-filled week since we last spoke. I &lt;em&gt;just&lt;/em&gt; finished presenting an online talk for the Norwegian jaavBin Java User Group association - that was a ton of fun! - and now I&amp;rsquo;m preparing tomorrow&amp;rsquo;s &lt;a href="http://twitter.com/SpringTipsLive"&gt;&amp;ldquo;Spring Tips&amp;rdquo;&lt;/a&gt; installment.&lt;/p&gt;
&lt;p&gt;And, without further ado, let&amp;rsquo;s get to it!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/04/20/spring-boot-for-apache-geode-pivotal-gemfire-1-3-0-m4-available"&gt;Spring Boot for Apache Geode &amp;amp; Pivotal GemFire 1.3.0.M4 Available&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/04/20/spring-session-for-apache-geode-pivotal-gemfire-2-3-0-rc2-available"&gt;Spring Session for Apache Geode &amp;amp; Pivotal GemFire 2.3.0.RC2 Available&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/04/17/spring-cloud-app-broker-1-0-5-released"&gt;Spring Cloud App Broker 1.0.5 released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/04/17/spring-cloud-2020-0-0-m1-released"&gt;Spring Cloud 2020.0.0-M1 Released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/04/17/a-bootiful-podcast-jetbrains-developer-advocacy-head-talking-kotlin-podcast-host-and-kotlin-rockstar-hadi-hariri"&gt;A Bootiful Podcast: Jetbrains Developer Advocacy head, &amp;ldquo;Talking Kotlin&amp;rdquo; podcast host, and Kotlin rockstar Hadi Hariri&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/04/16/spring-tips-the-graalvm-native-image-builder-feature"&gt;Spring Tips: The GraalVM Native Image Builder Feature&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/04/15/announcing-the-spring-authorization-server"&gt;Announcing the Spring Authorization Server&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;[It&amp;rsquo;s official! SpringOne Platform 2020 is going free, and it&amp;rsquo;s going virtual!(&lt;a href="https://twitter.com/dormaindrewitz/status/1252624331869310977?s=12"&gt;https://twitter.com/dormaindrewitz/status/1252624331869310977?s=12&lt;/a&gt;) The event is now scheduled for September 1, 2020. We&amp;rsquo;d &lt;em&gt;love&lt;/em&gt; to see you there. I&amp;rsquo;ll be there, too.&lt;/li&gt;
  &lt;li&gt;New to VMware Tanzu: Join @cmcluck and @wattersjames on 4/23 to learn more &lt;a href="https://twitter.com/VMwareTanzu/status/1252435771090276360"&gt;about VMware&amp;rsquo;s commitment to helping you&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://starkandwayne.com/blog/deploy-cf-for-k8s-to-google-in-10-minutes/amp/?__twitter_impression=true"&gt;Deploy Cloud Foundry to Google Kubernetes in 10 minutes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Hello, my European friends, join me this Thursday for a &lt;a href="https://twitter.com/VMwareTanzu/status/1252259521642344449"&gt;2+ hour Reactive Spring workshop&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=B-h2yggVk8w&amp;feature=youtu.be"&gt;TAS for Kubernetes on the Desktop &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I loved this great post by Toshiaki Maki on &lt;a href="https://blog.ik.am/entries/521"&gt;running Cloud Foundry on Kuberentes&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Good news everybody! A new release of the &lt;a href="https://twitter.com/JavaAtMicrosoft/status/1251710906376916993"&gt;Java support for Visual Studio Code&lt;/a&gt; - 0.60.0 - that includes refactoring preview, type rename on file rename, wildcard imports preferences, and so much more.&lt;/li&gt;
  &lt;li&gt;Watch the replay of the &lt;a href="https://twitter.com/java/status/1251183672771960833"&gt;Java Flight Recorder session&lt;/a&gt; by @MikaelVidstedt at the inaugural #DevDotNextDigital conference.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://vaadin.com/learn/tutorials/modern-web-apps-with-spring-boot-and-vaadin"&gt;Building Modern Web Apps with Spring Boot and Vaadin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://tanzu.vmware.com/content/pivotal-blog/vmware-tanzu-application-service-2-9-key-enhancements-for-transformation-at-scale&amp;utm_source=twitter&amp;utm_medium=social"&gt;VMware Tanzu Application Service 2.9: Key Enhancements for Transformation at Scale&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Security teammember Josh Cumming&amp;rsquo;s has a Pluralsight course - on securing REST APIs with Spring Security - that you could enjoy during the #FreeApril promotion.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://blog.frankel.ch/coping-incompatible-code-graalvm-compilation/"&gt;Coping with incompatible code in Graal VM AOT compilation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://medium.com/neo4j/spring-data-neo4j-rx-released-into-the-wild-f1473951f91d"&gt;Spring Data Neo4j RX released into the wild &lt;/a&gt; from the Neo4j Developer Blog.&lt;/li&gt;
  &lt;li&gt;This isn&amp;rsquo;t related to Spring, &lt;em&gt;per se&lt;/em&gt;, but it&amp;rsquo;s still awesome: &lt;a href="https://github.blog/2020-04-14-github-is-now-free-for-teams/"&gt;GitHub is now free for teams - The GitHub Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Boot for Apache Geode &amp; Pivotal GemFire 1.3.0.M4 Available</title>
    <link rel="alternate" href="https://spring.io/blog/2020/04/20/spring-boot-for-apache-geode-pivotal-gemfire-1-3-0-m4-available" />
    <category term="releases" label="Releases" />
    <author>
      <name>John Blum</name>
    </author>
    <id>tag:spring.io,2020-04-20:4036</id>
    <updated>2020-04-20T18:26:56Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;On behalf of the Spring, Apache Geode and Pivotal GemFire communities, it is my pleasure to announce the release of &lt;em&gt;Spring Boot for Apache Geode &amp;amp; Pivotal GemFire&lt;/em&gt; (SBDG) &lt;code&gt;1.3.0.M4&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;SBDG &lt;code&gt;1.3.0.M4&lt;/code&gt; builds on Spring Boot 2.3.0.M4 and is based on Spring Framework 5.2.5.RELEASE, Spring Data Neumann-RC1, Spring Session for Apache Geode &amp;amp; Pivotal GemFire (SSDG) 2.3.0.RC2 and Spring Test for Apache Geode &amp;amp; Pivotal GemFire (STDG) 0.0.14.RELEASE.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Additionally, SBDG &lt;code&gt;1.3.0.M4&lt;/code&gt; is now based on Apache Geode 1.12.0 and Pivotal GemFire 9.10.0.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;You can find the 1.3.0.M4 release bits in the Spring &lt;a href="https://repo.spring.io/milestone/org/springframework/geode/spring-geode-starter/1.3.0.M4/"&gt;Milestone Repository&lt;/a&gt; as well as on &lt;a href="https://start.spring.io"&gt;start.spring.io&lt;/a&gt; by using the Spring Initializer to create a &lt;a href="https://start.spring.io/#!platformVersion=2.3.0.M4&amp;amp;dependencies=geode"&gt;Spring for Apache Geode&lt;/a&gt; project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Please see the &lt;a href="https://github.com/spring-projects/spring-boot-data-geode/blob/1.3.0.M4/spring-geode/src/main/resources/changelog.txt#L7-L27"&gt;changelog&lt;/a&gt; for more details.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="whats-new"&gt;&lt;a class="anchor" href="#whats-new"&gt;&lt;/a&gt;What&amp;#8217;s New&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;SBDG &lt;code&gt;1.3.0.M4&lt;/code&gt; includes the following improvements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Support for &lt;a href="https://geode.apache.org/docs/guide/112/reference/topics/gemfire_properties.html"&gt;Geode Properties&lt;/a&gt; (&lt;code&gt;gemfire.properties&lt;/code&gt; &amp;amp; &lt;code&gt;gfsecurity.properties&lt;/code&gt;) in Spring Boot &lt;code&gt;application.properties&lt;/code&gt;.  Read the &lt;a href="https://docs.spring.io/spring-boot-data-geode-build/1.3.x/reference/html5/#geode-configuration-gemfire-properties"&gt;documentation&lt;/a&gt; for more details.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Added a new &lt;strong&gt;Sample&lt;/strong&gt; for &lt;em&gt;Multi-Site Caching&lt;/em&gt;, which includes a &lt;a href="https://docs.spring.io/spring-boot-data-geode-build/1.3.x/reference/html5/guides/caching-multi-site.html"&gt;Guide&lt;/a&gt; and &lt;a href="https://github.com/spring-projects/spring-boot-data-geode/tree/1.3.0.M4/spring-geode-samples/caching/multi-site"&gt;Source Code&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;With the addition of the &lt;em&gt;Multi-Site Caching&lt;/em&gt; Sample Guide and Source Code, this completes our story on caching, and specifically caching patterns (such as: &lt;em&gt;Look-Aside&lt;/em&gt;, &lt;em&gt;Near&lt;/em&gt;, &lt;em&gt;Inline&lt;/em&gt; and &lt;em&gt;Multi-Site&lt;/em&gt;) along with use caches (e.g. HTTP &lt;em&gt;Session Caching&lt;/em&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="whats-next"&gt;&lt;a class="anchor" href="#whats-next"&gt;&lt;/a&gt;What&amp;#8217;s Next&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;We are still targeting to include the ability to load data into an Apache Geode cache on startup in the same way that Spring Boot applies &lt;code&gt;schemal.sql&lt;/code&gt; and &lt;code&gt;data.sql&lt;/code&gt; files to an RDBMS on startup for the SBDG 1.3 release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;You can find more details and follow along in &lt;a href="https://github.com/spring-projects/spring-boot-data-geode/issues/67"&gt;Issue #67&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="feedback"&gt;&lt;a class="anchor" href="#feedback"&gt;&lt;/a&gt;Feedback&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;As always, any feedback is greatly appreciated and welcomed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="https://github.com/spring-projects/spring-boot-data-geode/issues"&gt;Issues&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot-data-geode/pulls"&gt;PR&lt;/a&gt; | &lt;a href="https://stackoverflow.com/questions/tagged/spring-boot"&gt;StackOverflow&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Session for Apache Geode &amp; Pivotal GemFire 2.3.0.RC2 Available</title>
    <link rel="alternate" href="https://spring.io/blog/2020/04/20/spring-session-for-apache-geode-pivotal-gemfire-2-3-0-rc2-available" />
    <category term="releases" label="Releases" />
    <author>
      <name>John Blum</name>
    </author>
    <id>tag:spring.io,2020-04-20:4035</id>
    <updated>2020-04-20T18:03:00Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;On behalf of the Spring, Apache Geode &amp;amp; Pivotal GemFire communities, it is my pleasure to announce the release of &lt;em&gt;Spring Session for Apache Geode &amp;amp; Pivotal GemFire&lt;/em&gt; (SSDG) &lt;code&gt;2.3.0.RC2&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;SSDG &lt;code&gt;2.3.0.RC2&lt;/code&gt; builds on Spring Framework 5.2.5.RELEASE, Spring Data Neumann-RC1 and Spring Session core 2.3.0.RC1&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;SSDG &lt;code&gt;2.3.0.RC2&lt;/code&gt; pulls in transitive dependencies determined by Spring Boot 2.3.0.M4. Indeed, SSDG &lt;code&gt;2.3.0.RC2&lt;/code&gt; is suited to be used with Spring Boot 2.3.0.M4.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Release bits are available in Spring&amp;#8217;s &lt;a href="https://repo.spring.io/milestone/org/springframework/session/spring-session-data-geode/2.3.0.RC2/"&gt;Milestone Repository&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Please see the &lt;a href="https://github.com/spring-projects/spring-session-data-geode/blob/master/spring-session-data-geode/src/main/resources/changelog.txt#L7-L18"&gt;changelog&lt;/a&gt; for further details.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="feedback"&gt;&lt;a class="anchor" href="#feedback"&gt;&lt;/a&gt;Feedback&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;As always, any feedback is highly appreciated and welcomed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="https://github.com/spring-projects/spring-session-data-geode/issues"&gt;Issues&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-session-data-geode/pulls"&gt;PR&lt;/a&gt; | &lt;a href="https://stackoverflow.com/questions/tagged/spring-session"&gt;StackOverflow&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Cloud App Broker 1.0.5 released</title>
    <link rel="alternate" href="https://spring.io/blog/2020/04/17/spring-cloud-app-broker-1-0-5-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Roy Clarkson</name>
    </author>
    <id>tag:spring.io,2020-04-17:4033</id>
    <updated>2020-04-17T20:12:51Z</updated>
    <content type="html">&lt;p&gt;We are pleased to announce the release of Spring Cloud App Broker 1.0.5. This release includes the following fixes and improvements:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Upgrade to Spring Boot 2.1.13.RELEASE&lt;/li&gt;
  &lt;li&gt;Allow a &lt;code&gt;ServiceInstanceService&lt;/code&gt; bean to be provided by a consuming application&lt;/li&gt;
  &lt;li&gt;Correct an issue where the backing app environment was not being updated when the service instance was upgraded&lt;/li&gt;
  &lt;li&gt;If specified, the &lt;code&gt;routes&lt;/code&gt; property now takes precedence over &lt;code&gt;host&lt;/code&gt;, &lt;code&gt;hosts&lt;/code&gt;, &lt;code&gt;domain&lt;/code&gt; and &lt;code&gt;domains&lt;/code&gt; properties&lt;/li&gt;
  &lt;li&gt;Correct an issue where synchronous binding and unbinding requests were not being properly handled&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Gradle:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;implementation(&amp;quot;org.springframework.cloud:spring-cloud-starter-app-broker-cloudfoundry:1.0.5.RELEASE&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Maven:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;&amp;lt;dependency&amp;gt;&#xD;
  &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
  &amp;lt;artifactId&amp;gt;spring-cloud-starter-app-broker-cloudfoundry&amp;lt;/artifactId&amp;gt;&#xD;
  &amp;lt;version&amp;gt;1.0.5.RELEASE&amp;lt;/version&amp;gt;&#xD;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href="https://spring.io/projects/spring-cloud-app-broker"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-cloud/spring-cloud-app-broker"&gt;GitHub&lt;/a&gt; | &lt;a href="https://docs.spring.io/spring-cloud-app-broker/docs/1.0.5.RELEASE/reference/html5"&gt;Reference Doc&lt;/a&gt; | &lt;a href="https://docs.spring.io/spring-cloud-app-broker/docs/1.0.5.RELEASE/api/"&gt;API Doc&lt;/a&gt;&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Cloud 2020.0.0-M1 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2020/04/17/spring-cloud-2020-0-0-m1-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Spencer Gibb</name>
    </author>
    <id>tag:spring.io,2020-04-16:4031</id>
    <updated>2020-04-17T18:52:00Z</updated>
    <content type="html">&lt;p&gt;On behalf of the community, I am pleased to announce that the Milestone 1 (M1) of the &lt;a href="https://cloud.spring.io"&gt;Spring Cloud 2020.0.0&lt;/a&gt; (Code Name: &lt;code&gt;Ilford&lt;/code&gt;) Release Train is available today. The release can be found in the &lt;a href="https://repo.spring.io/milestone/"&gt;Spring Milestone&lt;/a&gt; repository. You can check out the 2020 &lt;a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-2020.0.0-Release-Notes"&gt;release notes for more information&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a href="#notable-changes-in-the-2020-release-train" class="anchor" name="notable-changes-in-the-2020-release-train"&gt;&lt;/a&gt;Notable Changes in the 2020 Release Train&lt;/h2&gt;
&lt;p&gt;We have changed our release train versioning scheme. We now follow &lt;a href="https://calver.org/"&gt;Calendar Versioning&lt;/a&gt; or calver for short. We will follow the &lt;code&gt;YYYY.MINOR.MICRO&lt;/code&gt; &lt;a href="https://calver.org/#scheme"&gt;scheme&lt;/a&gt; where &lt;code&gt;MINOR&lt;/code&gt; is an incrementing number that starts at zero each year. The &lt;code&gt;MICRO&lt;/code&gt; segment corresponds to suffixes previously used: &lt;code&gt;.0&lt;/code&gt; is analogous to &lt;code&gt;.RELEASE&lt;/code&gt; and &lt;code&gt;.2&lt;/code&gt; is analogous to &lt;code&gt;.SR2&lt;/code&gt;. Pre-release suffixes will also change from using a &lt;code&gt;.&lt;/code&gt; to a &lt;code&gt;-&lt;/code&gt; for the separator, for example &lt;code&gt;2020.0.0-M1&lt;/code&gt; and &lt;code&gt;2020.0.0-RC2&lt;/code&gt;. We will also stop prefixing snapshots with &lt;code&gt;BUILD-&lt;/code&gt; &amp;ndash; for example &lt;code&gt;2020.0.0-SNAPSHOT&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We will continue to use London Tube Station names for code names. The current codename is &lt;code&gt;Ilford&lt;/code&gt;. These names will no longer be used in versions published to maven repositories.&lt;/p&gt;
&lt;p&gt;Spring Cloud AWS and Spring Cloud GCP are no longer part of the release train. They will continue to be part of Hoxton as long as it is supported &amp;ndash; at least thru June of 2021. Spring Cloud GCP will continue on as a separate project in &lt;a href="https://github.com/GoogleCloudPlatform"&gt;https://github.com/GoogleCloudPlatform&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Initial milestones are based on Spring Boot 2.3.x but will shift to 2.4.x once that line has started.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;2020.0&lt;/code&gt; Release Train will be available on &lt;a href="https://start.spring.io"&gt;https://start.spring.io&lt;/a&gt; once development has started on the next feature release of Spring Boot (2.4.0). Please see &lt;a href="#gettingstarted"&gt;Getting Started&lt;/a&gt;, below, for instructions on including this release in your project.&lt;/p&gt;
&lt;p&gt;In all, a total of 183 issues, enhancements, bugs and pull requests were included in this release. See the &lt;a href="https://github.com/orgs/spring-cloud/projects/32"&gt;GitHub project&lt;/a&gt; for details. &lt;/p&gt;&lt;h3&gt;&lt;a href="#spring-cloud-netflix" class="anchor" name="spring-cloud-netflix"&gt;&lt;/a&gt;Spring Cloud Netflix&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;All of the maintence mode projects have been removed and all dependent projects were updated accordingly.&lt;/li&gt;
  &lt;li&gt;Added zoned loadBalancer implementation support &lt;a href="https://github.com/spring-cloud/spring-cloud-netflix/pull/3720"&gt;#3720&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Removed deprecated EurekaDiscoveryClient.EurekaServiceInstance &lt;a href="https://github.com/spring-cloud/spring-cloud-netflix/issues/3742"&gt;#3742&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href="#spring-cloud-sleuth" class="anchor" name="spring-cloud-sleuth"&gt;&lt;/a&gt;Spring Cloud Sleuth&lt;/h3&gt;
&lt;p&gt;Updated to support the latest version of Brave.&lt;/p&gt;&lt;h3&gt;&lt;a href="#spring-cloud-consul" class="anchor" name="spring-cloud-consul"&gt;&lt;/a&gt;Spring Cloud Consul&lt;/h3&gt;
&lt;p&gt;Support was added for Consul Service Metadata rather than using tags as metadata.&lt;/p&gt;&lt;h3&gt;&lt;a href="#spring-cloud-gateway" class="anchor" name="spring-cloud-gateway"&gt;&lt;/a&gt;Spring Cloud Gateway&lt;/h3&gt;
&lt;p&gt;Service Instance metadata is now added to Route metadata. Support was added for modifying request or response bodies even if the body was empty. An option to ignore route definition errors was added.&lt;/p&gt;&lt;h3&gt;&lt;a href="#spring-cloud-circuitbreaker" class="anchor" name="spring-cloud-circuitbreaker"&gt;&lt;/a&gt;Spring Cloud CircuitBreaker&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Upgraded Resilience4J to 1.3.1&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href="#spring-cloud-contract" class="anchor" name="spring-cloud-contract"&gt;&lt;/a&gt;Spring Cloud Contract&lt;/h3&gt;
&lt;p&gt;Support was added for incremental test generation in the Maven plugin. Support was added for Spring Cloud Loadbalancer in stubrunner.&lt;/p&gt;&lt;h3&gt;&lt;a href="#spring-cloud-zookeeper" class="anchor" name="spring-cloud-zookeeper"&gt;&lt;/a&gt;Spring Cloud Zookeeper&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Switch Ribbon-based functionalities were added to Spring Cloud LoadBalancer &lt;a href="https://github.com/spring-cloud/spring-cloud-zookeeper/pull/240"&gt;#240&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href="#spring-cloud-commons" class="anchor" name="spring-cloud-commons"&gt;&lt;/a&gt;Spring Cloud Commons&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Added a property source that produces a random value that is cached &lt;a href="https://github.com/spring-cloud/spring-cloud-commons/pull/719"&gt;#719&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Removed Spring Cloud LoadBalancer Ribbon integration &lt;a href="https://github.com/spring-cloud/spring-cloud-commons/pull/691"&gt;#691&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href="#spring-cloud-openfeign" class="anchor" name="spring-cloud-openfeign"&gt;&lt;/a&gt;Spring Cloud Openfeign&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Adjusted to LoadBalancer implementation changes &lt;a href="https://github.com/spring-cloud/spring-cloud-openfeign/pull/300"&gt;#300&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href="#included-modules" class="anchor" name="included-modules"&gt;&lt;/a&gt;Included Modules&lt;/h3&gt;
&lt;p&gt;The following modules were updated as part of 2020.0.0-M1:&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Module &lt;/th&gt;
      &lt;th&gt;Version &lt;/th&gt;
      &lt;th&gt;Issues&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Netflix &lt;/td&gt;
      &lt;td&gt;3.0.0.M1 &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-netflix/milestone/88?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Function &lt;/td&gt;
      &lt;td&gt;3.1.0.M1 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Sleuth &lt;/td&gt;
      &lt;td&gt;3.0.0.M1 &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-sleuth/milestone/74?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Consul &lt;/td&gt;
      &lt;td&gt;3.0.0.M1 &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-consul/milestone/47?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Kubernetes &lt;/td&gt;
      &lt;td&gt;2.0.0.M1 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Gateway &lt;/td&gt;
      &lt;td&gt;3.0.0.M1 &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-gateway/milestone/36?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Circuitbreaker &lt;/td&gt;
      &lt;td&gt;2.0.0.M1 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Contract &lt;/td&gt;
      &lt;td&gt;3.0.0.M1 &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-contract/milestone/63?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Config &lt;/td&gt;
      &lt;td&gt;3.0.0.M1 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Build &lt;/td&gt;
      &lt;td&gt;3.0.0.M1 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Cloudfoundry &lt;/td&gt;
      &lt;td&gt;3.0.0.M1 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Security &lt;/td&gt;
      &lt;td&gt;3.0.0.M1 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Bus &lt;/td&gt;
      &lt;td&gt;3.0.0.M1 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Vault &lt;/td&gt;
      &lt;td&gt;3.0.0.M1 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Zookeeper &lt;/td&gt;
      &lt;td&gt;3.0.0.M1 &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-zookeeper/milestone/28?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Commons &lt;/td&gt;
      &lt;td&gt;3.0.0.M1 &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-commons/milestone/72?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Openfeign &lt;/td&gt;
      &lt;td&gt;3.0.0.M1 &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-openfeign/milestone/23?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;As always, we welcome feedback on &lt;a href="https://github.com/spring-cloud/"&gt;GitHub&lt;/a&gt;, on &lt;a href="https://gitter.im/spring-cloud/spring-cloud"&gt;Gitter&lt;/a&gt;, on &lt;a href="https://stackoverflow.com/questions/tagged/spring-cloud"&gt;Stack Overflow&lt;/a&gt;, and on &lt;a href="https://twitter.com/SpringCloud"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a href="#getting-started" class="anchor" name="getting-started"&gt;&lt;/a&gt;Getting Started&lt;/h2&gt;
&lt;div id="gettingstarted"&gt;To get started with Maven with a BOM (dependency management only):&lt;/div&gt;
&lt;pre&gt;&lt;code class="prettyprint xml"&gt;&amp;lt;repositories&amp;gt;&#xD;
    &amp;lt;repository&amp;gt;&#xD;
        &amp;lt;id&amp;gt;spring-milestones&amp;lt;/id&amp;gt;&#xD;
        &amp;lt;name&amp;gt;Spring Milestones&amp;lt;/name&amp;gt;&#xD;
        &amp;lt;url&amp;gt;https://repo.spring.io/milestone&amp;lt;/url&amp;gt;&#xD;
        &amp;lt;snapshots&amp;gt;&#xD;
            &amp;lt;enabled&amp;gt;false&amp;lt;/enabled&amp;gt;&#xD;
        &amp;lt;/snapshots&amp;gt;&#xD;
    &amp;lt;/repository&amp;gt;&#xD;
&amp;lt;/repositories&amp;gt;&#xD;
&#xD;
&amp;lt;dependencyManagement&amp;gt;&#xD;
    &amp;lt;dependencies&amp;gt;&#xD;
        &amp;lt;dependency&amp;gt;&#xD;
            &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
            &amp;lt;artifactId&amp;gt;spring-cloud-dependencies&amp;lt;/artifactId&amp;gt;&#xD;
            &amp;lt;version&amp;gt;2020.0.0-M1&amp;lt;/version&amp;gt;&#xD;
            &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;&#xD;
            &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;&#xD;
        &amp;lt;/dependency&amp;gt;&#xD;
    &amp;lt;/dependencies&amp;gt;&#xD;
&amp;lt;/dependencyManagement&amp;gt;&#xD;
&#xD;
&amp;lt;dependencies&amp;gt;&#xD;
    &amp;lt;dependency&amp;gt;&#xD;
        &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
        &amp;lt;artifactId&amp;gt;spring-cloud-starter-config&amp;lt;/artifactId&amp;gt;&#xD;
    &amp;lt;/dependency&amp;gt;&#xD;
    &amp;lt;dependency&amp;gt;&#xD;
        &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
        &amp;lt;artifactId&amp;gt;spring-cloud-starter-netflix-eureka-client&amp;lt;/artifactId&amp;gt;&#xD;
    &amp;lt;/dependency&amp;gt;&#xD;
    &amp;lt;!-- ... --&amp;gt;&#xD;
&amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To get started with Gradle:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint groovy"&gt;plugins {&#xD;
  id &amp;#39;org.springframework.boot&amp;#39; version &amp;#39;2.3.0.M4&amp;#39;&#xD;
  id &amp;#39;io.spring.dependency-management&amp;#39; version &amp;#39;1.0.9.RELEASE&amp;#39;&#xD;
  id &amp;#39;java&amp;#39;&#xD;
}&#xD;
&#xD;
repositories {&#xD;
  mavenCentral()&#xD;
  maven { url &amp;#39;https://repo.spring.io/milestone&amp;#39; }&#xD;
}&#xD;
&#xD;
ext {&#xD;
  set(&amp;#39;springCloudVersion&amp;#39;, &amp;quot;2020.0.0-M1&amp;quot;)&#xD;
}&#xD;
&#xD;
dependencyManagement {&#xD;
  imports {&#xD;
    mavenBom &amp;quot;org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}&amp;quot;&#xD;
  }&#xD;
}&#xD;
&#xD;
dependencies {&#xD;
  compile &amp;#39;org.springframework.cloud:spring-cloud-starter-config&amp;#39;&#xD;
  compile &amp;#39;org.springframework.cloud:spring-cloud-starter-netflix-eureka-client&amp;#39;&#xD;
  //...&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
</feed>
