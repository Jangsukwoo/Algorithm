<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Spring</title>
  <link rel="alternate" href="https://spring.io/blog" />
  <link rel="self" href="https://spring.io/blog.atom" />
  <id>http://spring.io/blog.atom</id>
  <icon>https://spring.io/favicon.ico</icon>
  <updated>2020-01-08T21:50:54Z</updated>
  <entry>
    <title>Spring Security 5.3.0.M1 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2020/01/08/spring-security-5-3-0-m1-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Eleftheria Stein-Kousathana</name>
    </author>
    <id>tag:spring.io,2020-01-08:3924</id>
    <updated>2020-01-08T21:50:54Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;On behalf of the community, I¡¯m pleased to announce the release of
Spring Security 5.3.0.M1! You can find the complete details in the &lt;a href="https://github.com/spring-projects/spring-security/releases/tag/5.3.0.M1"&gt;release notes&lt;/a&gt; and the highlights below:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="saml"&gt;&lt;a class="anchor" href="#saml"&gt;&lt;/a&gt;SAML&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="sect4"&gt;
&lt;h5 id="gh-7654-allow-configuration-of-authenticationmanager-in-saml2login"&gt;&lt;a class="anchor" href="#gh-7654-allow-configuration-of-authenticationmanager-in-saml2login"&gt;&lt;/a&gt;&lt;a href="https://github.com/spring-projects/spring-security/issues/7654"&gt;gh-7654&lt;/a&gt; - Allow configuration of AuthenticationManager in saml2Login()&lt;/h5&gt;

&lt;/div&gt;
&lt;div class="sect4"&gt;
&lt;h5 id="gh-7681-make-saml2authentication-serializable"&gt;&lt;a class="anchor" href="#gh-7681-make-saml2authentication-serializable"&gt;&lt;/a&gt;&lt;a href="https://github.com/spring-projects/spring-security/issues/7681"&gt;gh-7681&lt;/a&gt; - Make Saml2Authentication serializable&lt;/h5&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="oauth-2-0"&gt;&lt;a class="anchor" href="#oauth-2-0"&gt;&lt;/a&gt;OAuth 2.0&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="sect4"&gt;
&lt;h5 id="gh-5385-resource-server-support-for-multiple-trusted-jwt-access-token-issuers"&gt;&lt;a class="anchor" href="#gh-5385-resource-server-support-for-multiple-trusted-jwt-access-token-issuers"&gt;&lt;/a&gt;&lt;a href="https://github.com/spring-projects/spring-security/issues/5385"&gt;gh-5385&lt;/a&gt; - Resource server support for multiple trusted JWT access token issuers&lt;/h5&gt;

&lt;/div&gt;
&lt;div class="sect4"&gt;
&lt;h5 id="gh-7569-reactive-implementation-of-authorizedclientserviceoauth2authorizedclientmanager"&gt;&lt;a class="anchor" href="#gh-7569-reactive-implementation-of-authorizedclientserviceoauth2authorizedclientmanager"&gt;&lt;/a&gt;&lt;a href="https://github.com/spring-projects/spring-security/issues/7569"&gt;gh-7569&lt;/a&gt; - Reactive implementation of AuthorizedClientServiceOAuth2AuthorizedClientManager&lt;/h5&gt;

&lt;/div&gt;
&lt;div class="sect4"&gt;
&lt;h5 id="gh-7592-add-oidcidtoken-builder"&gt;&lt;a class="anchor" href="#gh-7592-add-oidcidtoken-builder"&gt;&lt;/a&gt;&lt;a href="https://github.com/spring-projects/spring-security/issues/7592"&gt;gh-7592&lt;/a&gt; - Add OidcIdToken.Builder&lt;/h5&gt;

&lt;/div&gt;
&lt;div class="sect4"&gt;
&lt;h5 id="gh-7593-add-oidcuserinfo-builder"&gt;&lt;a class="anchor" href="#gh-7593-add-oidcuserinfo-builder"&gt;&lt;/a&gt;&lt;a href="https://github.com/spring-projects/spring-security/issues/7593"&gt;gh-7593&lt;/a&gt; - Add OidcUserInfo.Builder&lt;/h5&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="core"&gt;&lt;a class="anchor" href="#core"&gt;&lt;/a&gt;Core&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="sect4"&gt;
&lt;h5 id="gh-7785-idiomatic-kotlin-dsl-for-configuring-http-security-in-servlet-based-applications"&gt;&lt;a class="anchor" href="#gh-7785-idiomatic-kotlin-dsl-for-configuring-http-security-in-servlet-based-applications"&gt;&lt;/a&gt;&lt;a href="https://github.com/spring-projects/spring-security/issues/7785"&gt;gh-7785&lt;/a&gt; - Idiomatic Kotlin DSL for configuring HTTP security in servlet based applications&lt;/h5&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="test"&gt;&lt;a class="anchor" href="#test"&gt;&lt;/a&gt;Test&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="sect4"&gt;
&lt;h5 id="gh-7789-oauth2-login-mockmvc-test-support"&gt;&lt;a class="anchor" href="#gh-7789-oauth2-login-mockmvc-test-support"&gt;&lt;/a&gt;&lt;a href="https://github.com/spring-projects/spring-security/issues/7789"&gt;gh-7789&lt;/a&gt; - OAuth2 Login MockMvc Test Support&lt;/h5&gt;

&lt;/div&gt;
&lt;div class="sect4"&gt;
&lt;h5 id="gh-7712-opaque-token-mockmvc-test-support"&gt;&lt;a class="anchor" href="#gh-7712-opaque-token-mockmvc-test-support"&gt;&lt;/a&gt;&lt;a href="https://github.com/spring-projects/spring-security/issues/7712"&gt;gh-7712&lt;/a&gt; - Opaque token MockMvc Test Support&lt;/h5&gt;

&lt;/div&gt;
&lt;div class="sect4"&gt;
&lt;h5 id="gh-7618-oidc-login-mockmvc-test-support"&gt;&lt;a class="anchor" href="#gh-7618-oidc-login-mockmvc-test-support"&gt;&lt;/a&gt;&lt;a href="https://github.com/spring-projects/spring-security/issues/7618"&gt;gh-7618&lt;/a&gt; - Oidc Login MockMvc Test Support&lt;/h5&gt;

&lt;/div&gt;
&lt;div class="sect4"&gt;
&lt;h5 id="gh-7680-oidc-login-reactive-test-support"&gt;&lt;a class="anchor" href="#gh-7680-oidc-login-reactive-test-support"&gt;&lt;/a&gt;&lt;a href="https://github.com/spring-projects/spring-security/issues/7680"&gt;gh-7680&lt;/a&gt; - Oidc Login Reactive Test Support&lt;/h5&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="web"&gt;&lt;a class="anchor" href="#web"&gt;&lt;/a&gt;Web&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="sect4"&gt;
&lt;h5 id="gh-7731-compositeserverhttpheaderswriter-should-execute-sequentially"&gt;&lt;a class="anchor" href="#gh-7731-compositeserverhttpheaderswriter-should-execute-sequentially"&gt;&lt;/a&gt;&lt;a href="https://github.com/spring-projects/spring-security/issues/7731"&gt;gh-7731&lt;/a&gt; - CompositeServerHttpHeadersWriter Should Execute Sequentially&lt;/h5&gt;

&lt;/div&gt;
&lt;div class="sect4"&gt;
&lt;h5 id="gh-7723-delegatingserverlogouthandler-should-execute-sequentially"&gt;&lt;a class="anchor" href="#gh-7723-delegatingserverlogouthandler-should-execute-sequentially"&gt;&lt;/a&gt;&lt;a href="https://github.com/spring-projects/spring-security/issues/7723"&gt;gh-7723&lt;/a&gt; - DelegatingServerLogoutHandler Should Execute Sequentially&lt;/h5&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="http://projects.spring.io/spring-security/"&gt;Project Site&lt;/a&gt; |
&lt;a href="https://docs.spring.io/spring-security/site/docs/5.2.0.M2/reference/htmlsingle/"&gt;Reference&lt;/a&gt;
| &lt;a href="http://stackoverflow.com/questions/tagged/spring-security"&gt;Help&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - 9th Anniversary Edition - January 7, 2020</title>
    <link rel="alternate" href="https://spring.io/blog/2020/01/07/this-week-in-spring-9th-anniversary-edition-january-7-2020" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2020-01-07:3923</id>
    <updated>2020-01-07T18:28:17Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! This is also the 9th anniversary of the &lt;em&gt;This Week in Spring&lt;/em&gt; blog series. I started it the first Tuesday after the new year in January 2011. NINE years is a long time, and it&amp;rsquo;s been - and continues to be - a ton of fun. &lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve never missed an installment - every Tuesday for almost a decade, come heck or high water - I get this done. It&amp;rsquo;s always on Tuesday, my time - whatever time that is. If I&amp;rsquo;m in Tokyo or Shanghai or Sydney then the installment may very well post sometime in most people&amp;rsquo;s Monday, or if I&amp;rsquo;m in California or Hawaii or South America, then it might be posted sometime early into most people&amp;rsquo;s Wednesday. But it&amp;rsquo;s always my Tuesday. Some times, I&amp;rsquo;ve had to cheat and apply the Hawaii rule: it&amp;rsquo;s still Tuesday if it&amp;rsquo;s still Tuesday in Hawaii! But, it&amp;rsquo;s always Tuesday. Things have gotten easier for me. Nowadays, plenty of airplanes have Wi-Fi. And, our blog software now supports scheduled posts. So, almost no reason I should ever miss an installment unless I&amp;rsquo;m &lt;em&gt;very&lt;/em&gt; busy. &lt;/p&gt;
&lt;p&gt;I find that this exercise - of finding the latest and greatest, analyzing it and sharing it - has been very beneficial for me. It&amp;rsquo;s not only connected me to the zeitgeist of an ever-expanding, amazing ecosystem, it&amp;rsquo;s also connected me to you: you can&amp;rsquo;t know how much it means to me when people send &lt;a href="mailto:josh@joshlong.com"&gt;me email (josh@joshlong.com)&lt;/a&gt;, or &lt;a href="http://twitter.com/starbuxman"&gt;direct messages (@starbuxman)&lt;/a&gt; with their exciting new content to post. I love that enthusiasm. It&amp;rsquo;s better than coffee! Thank you, community. You&amp;rsquo;re epic, and I couldn&amp;rsquo;t be more grateful. &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Happy new year! In this first installment of &lt;em&gt;A Bootiful Podcast&lt;/em&gt; in the new year, I am delighted to have been able to bring you an interview with my hero, the amazing, the inimitable, the legendary, &lt;a href="https://spring.io/blog/2020/01/03/a-bootiful-podcast-spring-boot-and-spring-cloud-co-founder-dr-dave-syer"&gt;Spring Boot, and Spring Cloud co-founder Dr. Dave Syer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;We&amp;rsquo;d love your feedback on your &lt;a href="https://docs.google.com/forms/d/e/1FAIpQLSdh-FWTC1eWKym7z9dKkQZruQz8QePaQ94sBeL1EGHEbiOj7w/viewform?usp=send_form"&gt;opinion of Spring Cloud Data Flow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Did you see the Spring Cloud &lt;a href="https://spring.io/blog/2019/12/23/spring-cloud-roadmap-and-hoxton-and-greenwich-maintenance-and-eol-announcements"&gt;roadmap published right before Christmas?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I like this blog, &lt;a href="https://medium.com/@santanu.mojumder/modernize-monolith-java-application-to-containerized-microservices-case-study-guide-7349a8e1f6a9"&gt;Modernize Monolith Java Application to Containerized Microservices&lt;/a&gt;, that looks at building microservices with Spring Boot&lt;/li&gt;
  &lt;li&gt;I love Matt Raible&amp;rsquo;s tutorial over on the Okta blog, &lt;a href="https://developer.okta.com/blog/2020/01/06/crud-angular-9-spring-boot-2"&gt;&lt;em&gt;Build a CRUD App with Angular 9 and Spring Boot 2.2&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Oliver Drotbohm &lt;a href="https://www.infoq.com/presentations/monoliths-modules/"&gt;identifies the common issues in unstructured monoliths&lt;/a&gt; and discusses approaches to package design, component structure, transactions, and the usage of events, in this SpringOne Platform 2019 talk that&amp;rsquo;s now on InfoQ.&lt;/li&gt;
  &lt;li&gt;I loved &lt;a href="https://www.infoq.com/presentations/spring-jib-scaffold-kubernetes/?itm_source=presentations_about_spring&amp;itm_medium=link&amp;itm_campaign=spring"&gt;this talk from Google&amp;rsquo;s Ray Tsang&lt;/a&gt; on tools - Jib, Skaffold - and best practices for Spring and Kubernetes.&lt;/li&gt;
  &lt;li&gt;This is an interesting thread on Reddit: &lt;a href="https://www.reddit.com/r/java/comments/ehyvpo/is_reactive_stream_single_or_multi_threaded/"&gt;are Reactive Streams single threaded or multi-threaded&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;This is an interesting example on &lt;a href="https://github.com/gregwhitaker/springboot-rsocketbasicauth-example"&gt;doing RSocket BASIC authentication with Spring&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;This seems like an interesting usecase: &lt;a href="https://medium.com/@milosbiljanovic/springboot-autocomplete-with-elasticsearch-11ea95d58854"&gt;Spring Boot and Elasticsearch&lt;/a&gt;-powered autocompletion.&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>A Bootiful Podcast: Spring Boot and Spring Cloud co-founder Dr. Dave Syer</title>
    <link rel="alternate" href="https://spring.io/blog/2020/01/03/a-bootiful-podcast-spring-boot-and-spring-cloud-co-founder-dr-dave-syer" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2020-01-03:3922</id>
    <updated>2020-01-03T08:25:16Z</updated>
    <content type="html">&lt;iframe width="100%" height="300" scrolling="no" frameborder="no" allow="autoplay" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/737749519&amp;color=%23ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&amp;visual=true"&gt;&lt;/iframe&gt;
&lt;p&gt;Hi, Spring fans! In this episode, &lt;a href="http://twitter.com/starbuxman"&gt;Josh Long&lt;/a&gt; talks to the one, the only, the inimitable, the amazing, his hero, the good &lt;a href="http://twitter.com/david_syer"&gt;Dr. Dave Syer&lt;/a&gt;, Spring Framework committer, former Spring Batch lead, former Spring Security OAuth lead, co-founder of both Spring Boot and Spring Cloud, etc. Statistically, if you&amp;rsquo;re using Spring today, you&amp;rsquo;re probably using code he wrote. This episode was recorded at SpringOne Platform 2019. Happy new year, and enjoy! &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://github.com/dsyer"&gt;Dave on Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://twitter.com/david_syer"&gt;Dave on Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>This Decade in Spring - Happy New Year Edition - December 31, 2019</title>
    <link rel="alternate" href="https://spring.io/blog/2019/12/31/this-decade-in-spring-happy-new-year-edition-december-31-2019" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2019-12-31:3920</id>
    <updated>2019-12-31T18:31:23Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans, and &lt;em&gt;HAPPY NEW YEAR&lt;/em&gt;! Welcome to another, extra-special installment of This Week in Spring. Normally, when writing the first post after or before the new year, I chronicle the most important moments in the last year. This year, seeing as we&amp;rsquo;re about to tip the scales and embark upon not just a new year but a new &lt;em&gt;decade&lt;/em&gt;, I&amp;rsquo;m going to do my level headed best to distill the biggest and the best for the Spring ecosystem in the last decade. The problem I face in writing this isn&amp;rsquo;t in coming up with things to mention, it&amp;rsquo;s in limiting the number of things I mention! &lt;/p&gt;
&lt;p&gt;Where does one even start? It&amp;rsquo;s hard to believe we&amp;rsquo;ve come this far, as a community. Remember, the earliest pages of code in Spring date back to 2001, almost 19 years ago. Rod Johnson, the original creator of Spring, talked about Spring&amp;rsquo;s progression over the last &lt;a href="https://blog.atomist.com/eighteen-years-of-spring/"&gt;almost two decades in this blog post - &lt;em&gt;18 Years of Spring&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a href="#this-decade-in-spring" class="anchor" name="this-decade-in-spring"&gt;&lt;/a&gt;This Decade in Spring&lt;/h2&gt;
&lt;p&gt;Now, where do we begin? &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Spring Boot&lt;/strong&gt; - this one is pretty easy! Spring Boot is changing the world. When we on the Spring team announced the .4 release of Spring Boot back in 2013, none of us could have guessed how far it would go. It was an opinionated approach on Spring and the Java ecosystem it supports that embraces some of the best patterns from convention-over-configuration frameworks like Rails, Grails, Spring Roo and others while &lt;em&gt;also&lt;/em&gt; not sacrificing flexibility. Spring Boot is now - by far - the most widely used JVM library in the JVM ecosystem save for Java itself. All the major-scale online services use it. It&amp;rsquo;s been forged in the fires of production and the work, of late, has seen it go from being the most productive, powerful framework to being among the most performant frameworks. Who knows what the next decade will offer for the Spring developer, but I&amp;rsquo;ll bet it builds upon Spring Boot.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Spring Cloud&lt;/strong&gt; - if Spring Boot is an opinionated approach to building applications, Spring Cloud - which builds on Spring Boot - is an opinionated approach at building applications (microservices!) that are destined for the cloud. The cloud, for modern applications, &lt;em&gt;is&lt;/em&gt; production. Spring Cloud leverages the same Spring Boot autoconfiguration and supports an opinionated approach to building applications.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Java 8&lt;/strong&gt; - Java 8 came out in 2014 and revitalized the JVM. If it wasn&amp;rsquo;t clear with Spring Boot that Java was the ecosystem to bet on, this release cinched it. It showed that there was life yet in this workhorse ecosystem and introduced tons of new language and runtime features. Suddenly, Java syntax looked a lot more like some of its more contemporary siblings. It&amp;rsquo;s hard to underestimate how important Java 8 and deliver-new-features mindset the Java team has since embraced is to our ecosystem.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The Death of the Application Server&lt;/strong&gt; - While Spring Boot wasn&amp;rsquo;t the first to support alternative deployment models for JVM-based applications, it was the first to popularize it. It made clear that the application server, such as we knew them, were no longer relevant. Sure, you can run a Spring Boot application in an application server, but&amp;hellip;. why? You gained nothing and sacrificed, clearly sacrificed, a considerable amount to do so. Now, keep in mind, Pivotal/VMware are, and have been, one of the major investors into Apache Tomcat, the most prolific application server, so the death of the application server was a self-inflicted wound. We&amp;rsquo;re just fine with that. You can use Apache Tomcat, as a library, in Spring Boot, and millions already do. It&amp;rsquo;s just that you don&amp;rsquo;t have to. The HTTP server isn&amp;rsquo;t the same as your runtime, and that&amp;rsquo;s as it should be.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cloud Native Applications&lt;/strong&gt; - Spring Boot assumed the runtime responsibilities of the application server, where the cloud stepped in to deliver the platform-centric responsibilities that the application server never could. These two things - smart applications powered by Spring Boot and smart platforms like Cloud Foundry and Kubernetes - have ushered in a new era of Cloud Native Java applications, a topic I love so much I wrote a book on it!&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;&lt;a href="#this-week-in-spring" class="anchor" name="this-week-in-spring"&gt;&lt;/a&gt;This Week in Spring&lt;/h2&gt;
&lt;p&gt;Alright my friends, we&amp;rsquo;ve come a long way so let&amp;rsquo;s get to it! &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/pivotal/status/1211642643853258752"&gt;Pivotal is now officially part of VMware&lt;/a&gt;!&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/12/27/microsoft-s-jialin-dai-on-the-various-spring-for-azure-starters"&gt;Microsoft&amp;rsquo;s Jialin Dai on the various Spring for Azure Starters&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.solstice.com/fwd/spring-cloud-dataflow-confluent-cloud"&gt;Getting Started with Spring Cloud DataFlow and Confluent Cloud&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.baeldung.com/spring-boot-color-banner"&gt; Baeldung has a nice post on one of the other most important things to come out of the last decade for the average Spring developer: color ASCII art banners!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.marcobehler.com/guides/java-microservices-a-practical-guide"&gt;This Practical Guide&lt;/a&gt; looks at using Spring Boot and Spring Cloud for microservices.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://dzone.com/articles/applying-cicd-to-java-apps-using-spring-boot"&gt;Applying CI/CD to Java Apps Using Spring Boot - DZone Java&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Check out the talk that Google&amp;rsquo;s James Ward, Okta&amp;rsquo;s Matt Raible and I gave at SpringOne Platform 2019: &lt;a href="https://www.infoq.com/presentations/simplicity-spring-cloud-services/"&gt;From Idea to Dev to Ops&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://mromeh.com/2019/12/26/spring-cloud-gateway-with-resilience4j-circuit-breaker/"&gt;This is a nice post on using Reislience4J and Spring Cloud CircuitBreaker&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://medium.com/@shelbyc0hen/what-the-flow-c707da1c3903"&gt;I love this post introducing the &lt;code&gt;Flow&lt;/code&gt; concept in Kotlin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Did you see the amazing Christmas-themed &lt;a href="https://twitter.com/oodamien/status/1209535981222842369?s=12"&gt;Spring Initializr&lt;/a&gt;? :D&lt;/li&gt;
  &lt;li&gt;There are a ton of new features &lt;a href="https://www.infoq.com/news/2019/12/java14-feature-freeze/?itm_source=infoq&amp;itm_medium=popular_widget&amp;itm_campaign=popular_content_list&amp;itm_content="&gt;in Java 14 and you should check them out&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And, finally, my friends, it&amp;rsquo;s the end of the year. It&amp;rsquo;s new years day already in some parts of the world as I post this. I want to remind those of you who haven&amp;rsquo;t crossed the date line to not drinkn and code and not drink and drive. It&amp;rsquo;s dangerous out there. Stay safe, get a car home from tonight&amp;rsquo;s festivities if there&amp;rsquo;s even a moment of doubt. And, of course, to every one, everywhere, HAPPY NEW YEAR! &lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Microsoft's Jialin Dai on the various Spring for Azure Starters</title>
    <link rel="alternate" href="https://spring.io/blog/2019/12/27/microsoft-s-jialin-dai-on-the-various-spring-for-azure-starters" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2019-12-27:3919</id>
    <updated>2019-12-27T03:26:34Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! Welcome to another installment of &lt;em&gt;A Bootiful Podcast&lt;/em&gt;! In this installment, Josh Long (&lt;a href="http://twitter.com/starbuxman"&gt;@starbuxman&lt;/a&gt;) talks to Microsoft&amp;rsquo;s Jialin Dai about the various Spring for Azure Spring Boot starters and auto-configuration! &lt;/p&gt;
&lt;p&gt;Happy holidays from the &lt;a href="http://twitter.com/bootifulpodcast"&gt;@BootifulPodcast&lt;/a&gt; team to you!&lt;/p&gt;
&lt;iframe width="100%" height="300" scrolling="no" frameborder="no" allow="autoplay" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/734412553&amp;color=%23ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&amp;visual=true"&gt;&lt;/iframe&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - December 24th, 2019</title>
    <link rel="alternate" href="https://spring.io/blog/2019/12/24/this-week-in-spring-december-24th-2019" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2019-12-24:3918</id>
    <updated>2019-12-24T10:08:25Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! Can you believe it&amp;rsquo;s the 24th of December already? We&amp;rsquo;re already two days into Chanukah, and one day away from Christmas, one day away from Kwanza, and two days away from Boxing Day, among other holidays. And just a week away from the brand new year, the first year of the new decade! I can&amp;rsquo;t believe it! By the end of 2020, I&amp;rsquo;ll have been (officially) part of the Spring team for 10 years and I&amp;rsquo;ll have been doing these &lt;em&gt;This Week in Spring&lt;/em&gt; roundups for 10 years too. What a privilege it&amp;rsquo;s been to be a part of the team. &lt;/p&gt;
&lt;p&gt;I love this time of year. It represents a time for me to be with my family, to celebrate, to rekindle my energies, and to gather for the new year. I am so excited to see what&amp;rsquo;s coming in 2020! I&amp;rsquo;m also excited because next week, this column - like every year before it - will be a special &lt;em&gt;This Year in Spring&lt;/em&gt; retrospective. &lt;/p&gt;
&lt;p&gt;I wish you and yours the happiest of holidays! And now, without further ado, let&amp;rsquo;s get to it! &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/12/23/spring-for-apache-kafka-2-4-is-available"&gt;Spring for Apache Kafka 2.4 is Available&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/12/23/spring-cloud-roadmap-and-hoxton-and-greenwich-maintenance-and-eol-announcements"&gt;Spring Cloud Roadmap and Hoxton and Greenwich Maintenance and EOL Announcements&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/12/21/spring-cloud-hoxton-service-release-1-sr1-is-available"&gt;Spring Cloud Hoxton Service Release 1 (SR1) is available.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I really enjoyed talking to &lt;a href="https://spring.io/blog/2019/12/20/a-bootiful-podcast-reactor-teammate-simon-basl"&gt;Reactor teammate Simon Basl?&lt;/a&gt; in last week&amp;rsquo;s &lt;em&gt;A Bootiful Podcast&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/12/19/spring-tools-4-5-0-released"&gt;Spring Tools 4.5.0 released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/12/18/spring-for-apache-kafka-2-4-release-candidate"&gt;Spring for Apache Kafka 2.4 Release Candidate&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The Baeldung site has a nice look at &lt;a href="https://www.baeldung.com/spring-request-param"&gt;Spring&amp;rsquo;s &lt;code&gt;@RequestParam&lt;/code&gt; annotation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The Java guides have a nice example of &lt;a href="https://www.javaguides.net/2019/11/spring-dependency-injection-tutorial-with-example.html"&gt;Spring dependency injection, complete with an example&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Greg Whitaker has a nice &lt;a href="https://github.com/gregwhitaker/springboot-rsocketmetadata-example"&gt;example of using per-request RSocket Metadata in Spring Boot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I like Greg Turnquist&amp;rsquo;s video &lt;a href="https://www.youtube.com/watch?v=ifw1Dn7VLlU&amp;feature=emb_title"&gt;on testing with Spring Boot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/springcentral/status/1207966922740051973"&gt;The new Spring Tools 4.5.0 ships on top of the latest Eclipse 2019-12 edition&lt;/a&gt; - get the bits while they&amp;rsquo;re hot!&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/ryanjbaxter/status/1207682736879816705?s=12"&gt;Spring Cloud Circuit Breaker for Resilience4j now available !&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/azure-supportability/how-to-create-azure-support-request?WT.mc_id=twitter-social-judubois"&gt;Good news everybody! The support channel for Azure Spring Cloud is now available!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;An interesting post on the &lt;a href="https://howtodoinjava.com/spring-boot2/spring-boot-starter-parent-dependency/"&gt;Spring Boot starter parent&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring for Apache Kafka 2.4 is Available</title>
    <link rel="alternate" href="https://spring.io/blog/2019/12/23/spring-for-apache-kafka-2-4-is-available" />
    <category term="releases" label="Releases" />
    <author>
      <name>Gary Russell</name>
    </author>
    <id>tag:spring.io,2019-12-23:3917</id>
    <updated>2019-12-23T18:18:14Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;To support last week&amp;#8217;s Apache Kafka 2.4.0 release, I am pleased to announce that the Spring for Apache Kafka 2.4 - 2.4.0.RELEASE - is available in maven central.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;This version is essentially functionally equivalent to 2.3.x, but is compiled against the 2.4.0 &lt;code&gt;kafka-clients&lt;/code&gt; and supports the new incremental rebalancing protocol.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The 2.4.0 &lt;code&gt;kafka-clients&lt;/code&gt; are not binary compatible with Spring for Apache Kafka 2.3 so if you wish to use the 2.4.0 clients, you must upgrade to this version. See the appendix in the reference manual for how to override the jar versions, especially if you are using Spring Boot for dependency management and/or you are using the test embedded Kafka broker.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;At the time of writing, it is expected that the next Spring Boot version (2.3) will pull in 2.4.x of this project via its dependency management.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="https://spring.io/projects/spring-kafka/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-kafka"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-kafka/issues"&gt;Issues&lt;/a&gt; | &lt;a href="https://docs.spring.io/spring-kafka/docs/2.4.0..RELEASE/reference/html/"&gt;Documentation&lt;/a&gt; | &lt;a href="https://stackoverflow.com/questions/tagged/spring-kafka"&gt;Stack Overflow&lt;/a&gt; | &lt;a href="https://gitter.im/spring-projects/spring-kafka"&gt;Gitter&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Cloud Roadmap and Hoxton and Greenwich Maintenance and EOL Announcements</title>
    <link rel="alternate" href="https://spring.io/blog/2019/12/23/spring-cloud-roadmap-and-hoxton-and-greenwich-maintenance-and-eol-announcements" />
    <category term="releases" label="Releases" />
    <author>
      <name>Spencer Gibb</name>
    </author>
    <id>tag:spring.io,2019-12-21:3916</id>
    <updated>2019-12-23T14:27:00Z</updated>
    <content type="html">&lt;p&gt;With the recent &lt;a href="https://spring.io/blog/2019/12/03/spring-framework-maintenance-roadmap-in-2020-including-4-3-eol"&gt;Spring Framework&lt;/a&gt; and &lt;a href="https://spring.io/blog/2019/12/10/spring-boot-2-1-x-eol-november-1st-2020"&gt;Spring Boot&lt;/a&gt; maintenance and roadmap posts, the Spring Cloud team is taking the opportunity to provide some insight to our future roadmap as well as the lifetimes of the Greenwich and Hoxton release trains.&lt;/p&gt;&lt;h2&gt;&lt;a href="#spring-cloud-ilford" class="anchor" name="spring-cloud-ilford"&gt;&lt;/a&gt;Spring Cloud Ilford&lt;/h2&gt;
&lt;p&gt;We would like to announce our next major release, Spring Cloud Ilford. This will be the first major release since the release of Spring Cloud Finchley, which provided support for Spring Boot 2.x and Spring Framework 5.x. By making Ilford a major release, it will allow us to remove modules that have entered &lt;a href="https://spring.io/blog/2018/12/12/spring-cloud-greenwich-rc1-available-now#spring-cloud-netflix-projects-entering-maintenance-mode"&gt;maintenance mode&lt;/a&gt; and to complete the simplification of the release train &lt;a href="https://spring.io/blog/2019/07/24/simplifying-the-spring-cloud-release-train"&gt;announced earlier this year&lt;/a&gt;. It will also allow us to do some API refactoring that may introduce breaking changes.&lt;/p&gt;
&lt;p&gt;Ilford will be released following Spring Framework 5.3 and Spring Boot 2.4 sometime in Q4 2020.&lt;/p&gt;&lt;h2&gt;&lt;a href="#spring-cloud-hoxton" class="anchor" name="spring-cloud-hoxton"&gt;&lt;/a&gt;Spring Cloud Hoxton&lt;/h2&gt;
&lt;p&gt;According to the &lt;a href="https://pivotal.io/support/oss"&gt;Pivotal Open Source Support Policy&lt;/a&gt;, major releases are supported for a period of three years. Finchley was first released in June 2018. Therefore, Hoxton, a minor release of the Finchley release train, will be supported until the end of June 2021 with regular releases. Starting in July 2021 Hoxton will enter a special maintenance period where only critical bug fixes and security patches will be released until the end of December 2021.&lt;/p&gt;
&lt;p&gt;This will allow a full year of overlap between major versions.&lt;/p&gt;
&lt;p&gt;Spring Boot 2.3.x, scheduled for release in Q2 2020, will be supported by a Hoxton Service Release soon after the Spring Boot release.&lt;/p&gt;&lt;h2&gt;&lt;a href="#spring-cloud-greenwich" class="anchor" name="spring-cloud-greenwich"&gt;&lt;/a&gt;Spring Cloud Greenwich&lt;/h2&gt;
&lt;p&gt;Greenwich, a minor release of the Finchley release train, was released in January 2019. Its last regular Service Release will be in Jan 2020. After that, it will enter a special maintenance period where only critical bug fixes and security patches will be released until the end of December 2020. This will be the last release train to support Spring Boot 2.1.x.&lt;/p&gt;
&lt;p&gt;Please see the &lt;a href="https://github.com/spring-cloud/spring-cloud-release/milestones?direction=asc&amp;sort=due_date&amp;state=open"&gt;release train milestones&lt;/a&gt; to track future releases and the new &lt;a href="https://github.com/spring-cloud/spring-cloud-release/wiki/Supported-Versions"&gt;Supported Versions&lt;/a&gt; page to see version lifetime.&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Cloud Hoxton Service Release 1 (SR1) is available.</title>
    <link rel="alternate" href="https://spring.io/blog/2019/12/21/spring-cloud-hoxton-service-release-1-sr1-is-available" />
    <category term="releases" label="Releases" />
    <author>
      <name>Spencer Gibb</name>
    </author>
    <id>tag:spring.io,2019-12-21:3915</id>
    <updated>2019-12-21T03:34:00Z</updated>
    <content type="html">&lt;p&gt;On behalf of the community, I am pleased to announce that the Service Release 1 (SR1) of the &lt;a href="https://cloud.spring.io"&gt;Spring Cloud Hoxton&lt;/a&gt; Release Train is available today. The release can be found in &lt;a href="https://repo1.maven.org/maven2/org/springframework/cloud/spring-cloud-dependencies/Hoxton.SR1/"&gt;Maven Central&lt;/a&gt;. You can check out the Hoxton &lt;a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Hoxton-Release-Notes"&gt;release notes for more information&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a href="#notable-changes-in-the-hoxton-release-train" class="anchor" name="notable-changes-in-the-hoxton-release-train"&gt;&lt;/a&gt;Notable Changes in the Hoxton Release Train&lt;/h2&gt;
&lt;p&gt;This milestone was primarily a bugfix release.&lt;/p&gt;
&lt;p&gt;Please see the Hoxton.SR1 &lt;a href="https://github.com/orgs/spring-cloud/projects/34"&gt;Github Project&lt;/a&gt; for all issues closed.&lt;/p&gt;
&lt;p&gt;This milestone release is built with Spring Boot 2.2.2.RELEASE.&lt;/p&gt;&lt;h3&gt;&lt;a href="#spring-cloud-config" class="anchor" name="spring-cloud-config"&gt;&lt;/a&gt;Spring Cloud Config&lt;/h3&gt;
&lt;p&gt;Besides bug fixes, Vault authentication was changed to use the Spring Vault project providing more options. Plain text resources are now available through the AWS S3 environment repository.&lt;/p&gt;&lt;h3&gt;&lt;a href="#spring-cloud-contract" class="anchor" name="spring-cloud-contract"&gt;&lt;/a&gt;Spring Cloud Contract&lt;/h3&gt;
&lt;p&gt;Mappings may now be reset after each test.&lt;/p&gt;&lt;h3&gt;&lt;a href="#spring-cloud-commons" class="anchor" name="spring-cloud-commons"&gt;&lt;/a&gt;Spring Cloud Commons&lt;/h3&gt;
&lt;p&gt;Support was added for zone awareness in Spring Cloud Loadbalancer.&lt;/p&gt;&lt;h3&gt;&lt;a href="#spring-cloud-sleuth" class="anchor" name="spring-cloud-sleuth"&gt;&lt;/a&gt;Spring Cloud Sleuth&lt;/h3&gt;
&lt;p&gt;Support was added for Spring Cloud Circuitbreaker&lt;/p&gt;&lt;h3&gt;&lt;a href="#spring-cloud-gateway" class="anchor" name="spring-cloud-gateway"&gt;&lt;/a&gt;Spring Cloud Gateway&lt;/h3&gt;
&lt;p&gt;Besides bug fixes, support was added for new configuration properties.&lt;/p&gt;&lt;h3&gt;&lt;a href="#spring-cloud-netflix" class="anchor" name="spring-cloud-netflix"&gt;&lt;/a&gt;Spring Cloud Netflix&lt;/h3&gt;
&lt;p&gt;Eureka support for zone awareness in Spring Cloud Loadbalancer was added.&lt;/p&gt;
&lt;p&gt;The following modules were updated as part of Hoxton.SR1:&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Module &lt;/th&gt;
      &lt;th&gt;Version &lt;/th&gt;
      &lt;th&gt;Issues&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Config &lt;/td&gt;
      &lt;td&gt;2.2.1.RELEASE &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-config/milestone/74?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Cloudfoundry &lt;/td&gt;
      &lt;td&gt;2.2.0.RELEASE &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Vault &lt;/td&gt;
      &lt;td&gt;2.2.1.RELEASE &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-vault/milestone/36?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Aws &lt;/td&gt;
      &lt;td&gt;2.2.1.RELEASE &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Bus &lt;/td&gt;
      &lt;td&gt;2.2.0.RELEASE &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Cli &lt;/td&gt;
      &lt;td&gt;2.2.1.RELEASE &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Gcp &lt;/td&gt;
      &lt;td&gt;1.2.1.RELEASE &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Contract &lt;/td&gt;
      &lt;td&gt;2.2.1.RELEASE &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-contract/milestone/61?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Consul &lt;/td&gt;
      &lt;td&gt;2.2.1.RELEASE &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Starter &lt;/td&gt;
      &lt;td&gt;Hoxton.SR1 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Dependencies &lt;/td&gt;
      &lt;td&gt;Hoxton.SR1 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Starter Parent &lt;/td&gt;
      &lt;td&gt;Hoxton.SR1 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Sleuth &lt;/td&gt;
      &lt;td&gt;2.2.1.RELEASE &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-sleuth/milestone/72?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Commons &lt;/td&gt;
      &lt;td&gt;2.2.1.RELEASE &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-commons/milestone/70?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Openfeign &lt;/td&gt;
      &lt;td&gt;2.2.1.RELEASE &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-openfeign/milestone/21?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Zookeeper &lt;/td&gt;
      &lt;td&gt;2.2.0.RELEASE &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-zookeeper/milestone/27?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Kubernetes &lt;/td&gt;
      &lt;td&gt;1.1.1.RELEASE &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Security &lt;/td&gt;
      &lt;td&gt;2.2.0.RELEASE &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Circuitbreaker &lt;/td&gt;
      &lt;td&gt;1.0.0.RELEASE &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-circuitbreaker/milestone/1?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Stream &lt;/td&gt;
      &lt;td&gt;Horsham.SR1 &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-stream/milestone/68?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Gateway &lt;/td&gt;
      &lt;td&gt;2.2.1.RELEASE &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-gateway/milestone/34?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Netflix &lt;/td&gt;
      &lt;td&gt;2.2.1.RELEASE &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-netflix/milestone/85?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Function &lt;/td&gt;
      &lt;td&gt;3.0.1.RELEASE &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-function/milestone/27?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Task &lt;/td&gt;
      &lt;td&gt;2.2.2.RELEASE &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;As always, we welcome feedback on &lt;a href="https://github.com/spring-cloud/"&gt;GitHub&lt;/a&gt;, on &lt;a href="https://gitter.im/spring-cloud/spring-cloud"&gt;Gitter&lt;/a&gt;, on &lt;a href="https://stackoverflow.com/questions/tagged/spring-cloud"&gt;Stack Overflow&lt;/a&gt;, or on &lt;a href="https://twitter.com/SpringCloud"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To get started with Maven with a BOM (dependency management only):&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;&lt;br/&gt;&amp;lt;dependencyManagement&amp;gt;&#xD;
    &amp;lt;dependencies&amp;gt;&#xD;
        &amp;lt;dependency&amp;gt;&#xD;
            &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
            &amp;lt;artifactId&amp;gt;spring-cloud-dependencies&amp;lt;/artifactId&amp;gt;&#xD;
            &amp;lt;version&amp;gt;Hoxton.SR1&amp;lt;/version&amp;gt;&#xD;
            &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;&#xD;
            &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;&#xD;
        &amp;lt;/dependency&amp;gt;&#xD;
    &amp;lt;/dependencies&amp;gt;&#xD;
&amp;lt;/dependencyManagement&amp;gt;&#xD;
&amp;lt;dependencies&amp;gt;&#xD;
    &amp;lt;dependency&amp;gt;&#xD;
        &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
        &amp;lt;artifactId&amp;gt;spring-cloud-starter-config&amp;lt;/artifactId&amp;gt;&#xD;
    &amp;lt;/dependency&amp;gt;&#xD;
    &amp;lt;dependency&amp;gt;&#xD;
        &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
        &amp;lt;artifactId&amp;gt;spring-cloud-starter-netflix-eureka-client&amp;lt;/artifactId&amp;gt;&#xD;
    &amp;lt;/dependency&amp;gt;&#xD;
    ...&#xD;
&amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or with Gradle:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;buildscript {&#xD;
dependencies {&#xD;
classpath &amp;quot;io.spring.gradle:dependency-management-plugin:1.0.8.RELEASE&amp;quot;&#xD;
}&#xD;
}&#xD;
&#xD;
&#xD;
&#xD;
apply plugin: &amp;quot;io.spring.dependency-management&amp;quot;&#xD;
&#xD;
dependencyManagement {&#xD;
imports {&#xD;
mavenBom &amp;#39;org.springframework.cloud:spring-cloud-dependencies:Hoxton.SR1&amp;#39;&#xD;
}&#xD;
}&#xD;
&#xD;
dependencies {&#xD;
compile &amp;#39;org.springframework.cloud:spring-cloud-starter-config&amp;#39;&#xD;
compile &amp;#39;org.springframework.cloud:spring-cloud-starter-netflix-eureka-client&amp;#39;&#xD;
...&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>A Bootiful Podcast: Reactor teammate Simon Basl?</title>
    <link rel="alternate" href="https://spring.io/blog/2019/12/20/a-bootiful-podcast-reactor-teammate-simon-basl" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2019-12-20:3914</id>
    <updated>2019-12-20T11:43:41Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! In this episode, I talk to Reactor teammate &lt;a href="http://twitter.com/SimonBasle"&gt;Simon Basl?&lt;/a&gt; about Nantes, France; DevFest Nantes; &lt;a href="http://Twitter.com/ProjectReactor"&gt;Project Reactor&lt;/a&gt; operators, and so much more.&lt;/p&gt;
&lt;p&gt;Happy holidays from your friends on the Spring team to all of you!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://twitter.com/SimonBasle"&gt;Simon Basl?&lt;/a&gt; on Twitter&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://www.ProjectReactor.io"&gt;Project Reactor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe width="100%" height="300" scrolling="no" frameborder="no" allow="autoplay" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/731355979&amp;color=%23ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&amp;visual=true"&gt;&lt;/iframe&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Tools 4.5.0 released</title>
    <link rel="alternate" href="https://spring.io/blog/2019/12/19/spring-tools-4-5-0-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Martin Lippert</name>
    </author>
    <id>tag:spring.io,2019-12-19:3913</id>
    <updated>2019-12-19T09:24:42Z</updated>
    <content type="html">&lt;p&gt;Dear Spring Community,&lt;/p&gt;
&lt;p&gt;I am happy to announce the 4.5.0 release of the Spring Tools 4 for Eclipse, Visual Studio Code, and Theia.&lt;/p&gt;
&lt;p&gt;Highlights from this release include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;(Eclipse)&lt;/em&gt;: Spring Tools 4 for Eclipse distribution updated to Eclipse 2019-12 release&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Eclipse)&lt;/em&gt; improvement: progress updates from new live hover mechanism now appears in Eclipse as well&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Eclipse)&lt;/em&gt; bugfix: fixed NPE when deleting apps from CF via the boot dashboard&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Eclipse)&lt;/em&gt; bugfix: finish button was disabled after selecting an org/space when creating a CF target in the boot dashboard&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Spring Boot)&lt;/em&gt; improvement: better and more consistent labels for running processes in live hover actions across the board&lt;/li&gt;
  &lt;li&gt;various improvements to the Spring Tools 4 user guide&lt;/li&gt;
  &lt;li&gt;bugfixes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To download the distribution for Eclipse and find links to the marketplace entries for Visual Studio Code and Theia, please go visit:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Tools 4: &lt;a href="https://spring.io/tools/"&gt;https://spring.io/tools/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Detailed changes can be found here: &lt;a href="https://github.com/spring-projects/sts4/wiki/Changelog#2019-12-19-450-release"&gt;https://github.com/spring-projects/sts4/wiki/Changelog#2019-12-19-450-release&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Spring Tools 4.5.1 is scheduled to be released in late January 2020.&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring for Apache Kafka 2.4 Release Candidate</title>
    <link rel="alternate" href="https://spring.io/blog/2019/12/18/spring-for-apache-kafka-2-4-release-candidate" />
    <category term="releases" label="Releases" />
    <author>
      <name>Gary Russell</name>
    </author>
    <id>tag:spring.io,2019-12-13:3911</id>
    <updated>2019-12-18T17:32:15Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;Hot on the heels of the recent Apache Kafka 2.4.0 release, I am pleased to announce the release candidate for Spring for Apache Kafka 2.4 - 2.4.0.RC1 - is available in the &lt;a href="https://repo.spring.io/milestone"&gt;Spring milestone repository&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;This version is essentially functionally equivalent to 2.3.x, but is compiled against the 2.4.0 &lt;code&gt;kafka-clients&lt;/code&gt; and supports the new incremental rebalancing protocol.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The 2.4.0 kafka clients are not binary compatible with Spring for Apache Kafka 2.3 so if you wish to use the 2.4.0 clients, you must upgrade to this version. See the appendix in the reference manual for how to override the jar versions, especially if you are using Spring Boot and/or the test embedded kafka broker.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;We expect to release the GA shortly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;At the time of writing, it is expected that the next Spring Boot version (2.3) will pull in 2.4.x of this project via its dependency management.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="https://spring.io/projects/spring-kafka/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-kafka"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-kafka/issues"&gt;Issues&lt;/a&gt; | &lt;a href="https://docs.spring.io/spring-kafka/docs/2.4.0..RC1/reference/html/"&gt;Documentation&lt;/a&gt; | &lt;a href="https://stackoverflow.com/questions/tagged/spring-kafka"&gt;Stack Overflow&lt;/a&gt; | &lt;a href="https://gitter.im/spring-projects/spring-kafka"&gt;Gitter&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - December 18th, 2019</title>
    <link rel="alternate" href="https://spring.io/blog/2019/12/18/this-week-in-spring-december-18th-2019" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2019-12-18:3912</id>
    <updated>2019-12-18T07:54:10Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! This week I am in beautiful Tokyo, Japan, where I just spoke at the always lovely annual Spring Fest event. I loved the show and I hope that they got something out of my performance. &lt;/p&gt;
&lt;p&gt;Last week was tough. Possibly the toughest week of my life. I didn&amp;rsquo;t publish an episode of &lt;a href="http://twitter.com/Bootiful_Podcast"&gt;&lt;em&gt;A Bootiful Podcast&lt;/em&gt;&lt;/a&gt;, as such. You won&amp;rsquo;t see that episode reflected on the blog because it was my heartbroken dedication to my father, who passed away last week at the age of 81. No interview in that brief, less-than-20 minutes episode. &lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m feeling a little better and was glad to come back to the work of writing this blog and find that there was an absolute ton of good stuff to read and consume. I hope you get something out of it, too. &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/12/13/flight-of-the-flux-3-hopping-threads-and-schedulers"&gt;Flight of the Flux 3 - Hopping Threads and Schedulers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/12/12/spring-boot-for-apache-geode-pivotal-gemfire-1-1-4-release-1-2-2-release-available"&gt;Spring Boot for Apache Geode &amp;amp; Pivotal GemFire 1.1.4.RELEASE &amp;amp; 1.2.2.RELEASE Available&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/12/12/spring-session-for-apache-geode-pivotal-gemfire-2-1-7-release-and-2-2-1-release-available"&gt;Spring Session for Apache Geode &amp;amp; Pivotal GemFire 2.1.7.RELEASE and 2.2.1.RELEASE Available&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/12/10/spring-boot-2-1-x-eol-november-1st-2020"&gt;Spring Boot 2.1.x EOL November 1st 2020&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Learn how LAIKA, a premier stop-motion animation studio in Portland, OR, &lt;a href="https://www.rabbitmq.com/blog/2019/12/16/laika-gets-creative-with-rabbitmq-as-the-animation-companys-it-nervous-system/"&gt;uses RabbitMQ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://docs.google.com/forms/d/e/1FAIpQLSdh-FWTC1eWKym7z9dKkQZruQz8QePaQ94sBeL1EGHEbiOj7w/viewform"&gt;Please take this survey to help us know what you&amp;rsquo;d like to change for Spring Cloud Data Flow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Fellow Java Champion and Jetbrains&amp;rsquo; Trisha Gee concludes her epic series looking at Reactive Spring just in time for Christmas with this &lt;a href="https://blog.jetbrains.com/idea/2019/12/tutorial-reactive-spring-boot-spring-profiles-to-switch-clients/"&gt;latest installment introducing RSocket&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Not strictly speaking related to Spring, but generally good advice for anyone interested in software architectures: Simon Brown&amp;rsquo;s introduction to &lt;a href="http://www.codingthearchitecture.com/2016/04/25/layers_hexagons_features_and_components.html"&gt;Layers, hexagons, features and components&lt;/a&gt; is a worthy read.&lt;/li&gt;
  &lt;li&gt;DZone has a nice post on &lt;a href="https://dzone.com/articles/an-implementation-of-spring-boot-with-spring-data"&gt;implementing Spring Boot with Spring Data JPA&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Thanks everyone - &lt;a href="https://twitter.com/SpringData/status/1206513892077244417"&gt; the @SpringData handle has crossed 30,000 followers!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Our friends at Alibaba have open-sourced their Alibaba RSocket Broker &lt;a href="https://github.com/alibaba/alibaba-rsocket-broker"&gt;supporting meshes, streaming &amp;amp; IoT, among other things&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Greg Turnquist published a nice video, &lt;a href="https://m.youtube.com/watch?v=b66rXMgk8Iw&amp;feature=youtu.be"&gt;&lt;em&gt;Five Reasons to Use Spring Boot&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.brighttalk.com/webcast/14893/378835"&gt;Register now to make this webinar (tomorrow, Wednesday the 19th, 2019), on Spring Cloud Kubernetes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=_-aGFW4huvg&amp;feature=youtu.be"&gt;I loved this second introduction to Spring Data Neo4j&amp;rsquo;s new Reactive implementation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;This SpringOne Platform 2019 talk, &lt;a href="https://www.youtube.com/watch?v=7Faly8jORIw"&gt;&lt;em&gt;RabbitMQ &amp;amp; Kafka&lt;/em&gt;&lt;/a&gt; is now online and worth a watch.&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Flight of the Flux 3 - Hopping Threads and Schedulers</title>
    <link rel="alternate" href="https://spring.io/blog/2019/12/13/flight-of-the-flux-3-hopping-threads-and-schedulers" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Simon Basl?</name>
    </author>
    <id>tag:spring.io,2019-12-13:3910</id>
    <updated>2019-12-13T16:00:00Z</updated>
    <content type="html">&lt;p&gt;This blog post is the third in a series of posts that aim at providing a deeper look into &lt;a href="https://github.com/reactor/reactor-core"&gt;Reactor&lt;/a&gt;¡¯s more advanced concepts and inner workings.&lt;/p&gt;
&lt;p&gt;In this post, we explore the threading model, how some (most) operators are concurrent agnostic, the &lt;code&gt;Scheduler&lt;/code&gt; abstraction and how to hop from one thread to another mid-sequence with operators like &lt;code&gt;publishOn&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This series is derived from the &lt;code&gt;Flight of the Flux&lt;/code&gt; talk, which content I found to be more adapted to a blog post format.&lt;/p&gt;
&lt;p&gt;The table below will be updated with links when the other posts are published, but here is the planned content:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/03/06/flight-of-the-flux-1-assembly-vs-subscription"&gt;Assembly vs Subscription&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/04/16/flight-of-the-flux-2-debugging-caveats"&gt;Debugging caveats&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Hopping Threads and Schedulers (this post)&lt;/li&gt;
  &lt;li&gt;Inner workings: work stealing&lt;/li&gt;
  &lt;li&gt;Inner workings: operator fusion&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you¡¯re missing an introduction to &lt;em&gt;Reactive Streams&lt;/em&gt; and the basic concepts of Reactor, head out to the site¡¯s &lt;a href="https://projectreactor.io/learn"&gt;learning section&lt;/a&gt; and the &lt;a href="https://projectreactor.io/docs/core/release/reference"&gt;reference guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Without further ado, let¡¯s jump in:&lt;/p&gt;&lt;h2&gt;&lt;a href="#the-threading-model" class="anchor" name="the-threading-model"&gt;&lt;/a&gt;The Threading Model&lt;/h2&gt;
&lt;p&gt;Reactor operators generally are &lt;em&gt;concurrent agnostic&lt;/em&gt;: they don&amp;rsquo;t impose a particular threading model and just run on the &lt;code&gt;Thread&lt;/code&gt; on which their &lt;code&gt;onNext&lt;/code&gt; method was invoked.&lt;/p&gt;
&lt;p&gt;As we saw in the first post of this series, the &lt;code&gt;Thread&lt;/code&gt; that executes the subscription call also has an influence: the &lt;code&gt;subscribe&lt;/code&gt; calls are chained until a data-producing &lt;code&gt;Publisher&lt;/code&gt; is reached (the leftmost part of the chain of operators), then this &lt;code&gt;Publisher&lt;/code&gt; offers a &lt;code&gt;Subscription&lt;/code&gt; through &lt;code&gt;onSubscribe&lt;/code&gt;, in turn passed down the chain, requested, etc&amp;hellip; By default, again, this data production process starts on the &lt;code&gt;Thread&lt;/code&gt; that initiated the subscription.&lt;/p&gt;
&lt;p&gt;There is a general exception to this: operators that deal with a notion of &lt;strong&gt;time&lt;/strong&gt;. Any such operator will default to running timers/delays/etc&amp;hellip; on the &lt;code&gt;Schedulers.parallel()&lt;/code&gt; scheduler.&lt;/p&gt;
&lt;p&gt;A few other exceptions exist that also run on this &lt;code&gt;parallel()&lt;/code&gt; &lt;code&gt;Scheduler&lt;/code&gt;. They can be recognized by having at least one overload that takes a &lt;code&gt;Scheduler&lt;/code&gt; parameter.&lt;/p&gt;
&lt;p&gt;But what is a &lt;code&gt;Scheduler&lt;/code&gt; and why do we need it?&lt;/p&gt;&lt;h2&gt;&lt;a href="#the-code-scheduler-code-abstraction" class="anchor" name="the-code-scheduler-code-abstraction"&gt;&lt;/a&gt;The &lt;code&gt;Scheduler&lt;/code&gt; abstraction&lt;/h2&gt;
&lt;p&gt;In Reactor, a &lt;code&gt;Scheduler&lt;/code&gt; is an abstraction that gives the user control about threading. A &lt;code&gt;Scheduler&lt;/code&gt; can spawn &lt;code&gt;Worker&lt;/code&gt; which are conceptually &lt;code&gt;Threads&lt;/code&gt;, but are not necessarily backed by a &lt;code&gt;Thread&lt;/code&gt; (we&amp;rsquo;ll see an example of that later). A &lt;code&gt;Scheduler&lt;/code&gt; also includes the notion of a &lt;strong&gt;clock&lt;/strong&gt;, whereas the &lt;code&gt;Worker&lt;/code&gt; is purely about scheduling tasks.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;interface Scheduler extends Disposable {&#xD;
    &#xD;
  Disposable schedule(Runnable task);&#xD;
  Disposable schedule(Runnable task, long initialDelay, TimeUnit delayUnit);&#xD;
  Disposable schedulePeriodically(Runnable task, long initialDelay, long perido, TimeUnit unit);&#xD;
  &#xD;
  long now(TimeUnit unit);&#xD;
  &#xD;
  Worker createWorker();&#xD;
  &#xD;
  interface Worker extends Disposable {&#xD;
    Disposable schedule(Runnable task);&#xD;
    Disposable schedule(Runnable task, long initialDelay, TimeUnit delayUnit);&#xD;
    Disposable schedulePeriodically(Runnable task, long initialDelay, long perido, TimeUnit unit);&#xD;
  }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Reactor comes with several default &lt;code&gt;Scheduler&lt;/code&gt; implementations, each with its own specificity about how it manages &lt;code&gt;Workers&lt;/code&gt;. They can be instantiated via the &lt;code&gt;Schedulers&lt;/code&gt; factory methods. Here are rule of thumbs for their typical usage:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Schedulers.immediate()&lt;/code&gt; can be used as a &lt;em&gt;null object&lt;/em&gt; for when an API requires a &lt;code&gt;Scheduler&lt;/code&gt; but you don&amp;rsquo;t want to change threads&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Schedulers.single()&lt;/code&gt; is for one-off tasks that can be run on a unique &lt;code&gt;ExecutorService&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Schedulers.parallel()&lt;/code&gt; is good for CPU-intensive but short-lived tasks. It can execute &lt;code&gt;N&lt;/code&gt; such tasks in parallel (by default &lt;code&gt;N == number of CPUs&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Schedulers.elastic()&lt;/code&gt; and &lt;code&gt;Schedulers.boundedElastic()&lt;/code&gt; are good for more long-lived tasks (eg. blocking IO tasks). The &lt;code&gt;elastic&lt;/code&gt; one spawns threads on-demand without a limit while the recently introduced &lt;code&gt;boundedElastic&lt;/code&gt; does the same with a ceiling on the number of created threads.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each flavor of &lt;code&gt;Scheduler&lt;/code&gt; has a default global instance returned by the above methods, but one can create new instances using the &lt;code&gt;Schedulers.new***&lt;/code&gt; factory methods (eg. &lt;code&gt;Schedulers.newParallel(&amp;quot;myParallel&amp;quot;, 10))&lt;/code&gt; to create a custom parallel &lt;code&gt;Scheduler&lt;/code&gt; where &lt;code&gt;N&lt;/code&gt; = &lt;code&gt;10&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;parallel&lt;/code&gt; flavor is backed by &lt;code&gt;N&lt;/code&gt; workers each based on a &lt;code&gt;ScheduledExecutorService&lt;/code&gt;. If you submit &lt;code&gt;N&lt;/code&gt; long lived tasks to it, no more work can be executed, hence the affinity for &lt;em&gt;short-lived&lt;/em&gt; tasks.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;elastic&lt;/code&gt; flavor is also backed by workers based on &lt;code&gt;ScheduledExecutorService&lt;/code&gt;, except it creates these workers on demand and pools them. A &lt;code&gt;Worker&lt;/code&gt; that is no longer in used is returned to the pool on &lt;code&gt;dispose()&lt;/code&gt; and will be kept here for the configured TTL duration, so new incoming tasks may reuse idle workers. However, it keeps on creating new workers if no idle &lt;code&gt;Worker&lt;/code&gt; is available.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;boundedElastic&lt;/code&gt; flavor is very similar in concept to the &lt;code&gt;elastic&lt;/code&gt; one except it places an upper bound to the number of &lt;code&gt;ScheduledExecutorService&lt;/code&gt;-backed &lt;code&gt;Worker&lt;/code&gt; it creates. Past this point, its &lt;code&gt;createWorker()&lt;/code&gt; method returns a facade &lt;code&gt;Worker&lt;/code&gt; that will enqueue tasks instead of submitting them immediately. As soon as a concrete &lt;code&gt;Worker&lt;/code&gt; becomes available, it is swapped with the facade and starts actually submitting tasks (making it act like you only just submitted the task, including delayed ones). Additionally, one can put a cap on the total number of deferred tasks which can be enqueued by all the facade workers of the &lt;code&gt;Scheduler&lt;/code&gt; instance.&lt;/p&gt;&lt;h3&gt;&lt;a href="#are-schedulers-always-backed-by-an-executorservice" class="anchor" name="are-schedulers-always-backed-by-an-executorservice"&gt;&lt;/a&gt;Are Schedulers Always Backed by an ExecutorService?&lt;/h3&gt;
&lt;p&gt;As we said above, no. We already saw an example actually: the &lt;code&gt;immediate() Scheduler&lt;/code&gt;. This one doesn&amp;rsquo;t modify which &lt;code&gt;Thread&lt;/code&gt; the code is running on.&lt;/p&gt;
&lt;p&gt;But there is a more useful example in the &lt;code&gt;reactor-test&lt;/code&gt; library: the &lt;code&gt;VirtualTimeScheduler&lt;/code&gt;. This &lt;code&gt;Scheduler&lt;/code&gt; executes on the current &lt;code&gt;Thread&lt;/code&gt;, but stamps all tasks submitted to it with the time at which they are supposed to be run.&lt;/p&gt;
&lt;p&gt;It then manages a &lt;strong&gt;virtual clock&lt;/strong&gt; (thanks to the fact that &lt;code&gt;Scheduler&lt;/code&gt; also has the responsabilities of a clock) which can be manually advanced. When doing so, tasks that were queued to execute before or at the new virtual timestamp will be executed.&lt;/p&gt;
&lt;p&gt;This is very useful in test scenarios where you have a &lt;code&gt;Flux&lt;/code&gt; or &lt;code&gt;Mono&lt;/code&gt; with long intervals/delays and you want to test the logic rather than the timing. For instance something like a &lt;code&gt;Mono.delay(Duration.ofHours(4))&lt;/code&gt; can be run in under &lt;code&gt;100ms&lt;/code&gt;&amp;hellip;&lt;/p&gt;
&lt;p&gt;One could also imagine implementing a &lt;code&gt;Scheduler&lt;/code&gt; around a Actor system, the &lt;code&gt;ForkJoinPool&lt;/code&gt;, upcoming Loom fibers, etc&amp;hellip;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;About the &lt;em&gt;main&lt;/em&gt; &lt;code&gt;Thread&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
  &lt;p&gt;Often, people ask about switching back and forth between a &lt;code&gt;Scheduler&lt;/code&gt;&amp;rsquo;s thread and the &lt;em&gt;main&lt;/em&gt; thread. Going from the main to a scheduler is obviously possible, &lt;strong&gt;but going from an arbitrary thread to the &lt;em&gt;main&lt;/em&gt; thread is not possible&lt;/strong&gt;. That is plainly a Java limitation, as there is no way to submit tasks to the &lt;em&gt;main&lt;/em&gt; thread (e.g. there&amp;rsquo;s no MainThreadExecutorService).&lt;/p&gt;
&lt;/blockquote&gt;&lt;h2&gt;&lt;a href="#applying-schedulers-to-operators" class="anchor" name="applying-schedulers-to-operators"&gt;&lt;/a&gt;Applying Schedulers to Operators&lt;/h2&gt;
&lt;p&gt;No that we&amp;rsquo;re familiar with the building blocks of threading in Reactor, let&amp;rsquo;s see how this translates in the world of operators.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ve already established that most operator continue their work on the &lt;code&gt;Thread&lt;/code&gt; from which they were signalled, except for time-based operators (like &lt;code&gt;Mono.delay&lt;/code&gt;, &lt;code&gt;bufferTimeout()&lt;/code&gt;, etc&amp;hellip;).&lt;/p&gt;
&lt;p&gt;The philosophy of Reactor is to give you tools to do the right thing, by way of composing operators. Threading is not an exception: meet &lt;code&gt;subscribeOn&lt;/code&gt; and &lt;code&gt;publishOn&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;These two operators simply take a &lt;code&gt;Scheduler&lt;/code&gt; and will switch execution on one of that scheduler&amp;rsquo;s &lt;code&gt;Worker&lt;/code&gt;. There is of course a major difference between the two :)&lt;/p&gt;&lt;h3&gt;&lt;a href="#the-code-publishon-scheduler-s-code-operator" class="anchor" name="the-code-publishon-scheduler-s-code-operator"&gt;&lt;/a&gt;The &lt;code&gt;publishOn(Scheduler s)&lt;/code&gt; operator&lt;/h3&gt;
&lt;p&gt;This is the basic operator you need when you want to hop threads. Incoming signals from its source are &lt;em&gt;published&lt;/em&gt; on the given &lt;code&gt;Scheduler&lt;/code&gt;, effectively switching threads to one of that scheduler&amp;rsquo;s workers.&lt;/p&gt;
&lt;p&gt;This is valid for the &lt;code&gt;onNext&lt;/code&gt;, &lt;code&gt;onComplete&lt;/code&gt; and &lt;code&gt;onError&lt;/code&gt; signals. That is, signals that flow from an upstream source to a downstream subscriber.&lt;/p&gt;
&lt;p&gt;So in essence, every processing step that appears below this operator will execute on the new &lt;code&gt;Scheduler&lt;/code&gt; &lt;code&gt;s&lt;/code&gt;, until another operator switches again (eg. another &lt;code&gt;publishOn&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s take a deliberately sketchy example with blocking calls But remember, blocking calls in a reactive chain are always sketchy! :)&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;Flux.fromIterable(firstListOfUrls) //contains A, B and C&#xD;
    .map(url -&amp;gt; blockingWebClient.get(url))&#xD;
    .subscribe(body -&amp;gt; System.out.println(Thread.currentThread().getName + &amp;quot; from first list, got &amp;quot; + body));&#xD;
&#xD;
Flux.fromIterable(secondListOfUrls) //contains D and E&#xD;
    .map(url -&amp;gt; blockingWebClient.get(url))&#xD;
    .subscribe(body -&amp;gt; System.out.prinln(Thread.currentThread().getName + &amp;quot; from second list, got &amp;quot; + body));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the above example, assuming this code is executed on the &lt;em&gt;main&lt;/em&gt; thread, each &lt;code&gt;Flux.fromIterable&lt;/code&gt; emits the content of its &lt;code&gt;List&lt;/code&gt; on that same &lt;code&gt;Thread&lt;/code&gt;. We then use an imperative blocking web client inside a &lt;code&gt;map&lt;/code&gt; to fetch the body of each &lt;code&gt;url&lt;/code&gt;, which &amp;ldquo;inherits&amp;rdquo; that thread (and thus blocks it). The data-consuming lambda in each &lt;code&gt;subscribe&lt;/code&gt; is thus also running on the main thread.&lt;/p&gt;
&lt;p&gt;As a consequence, all these urls are processed sequentially on the main thread:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;main from first list, got A&#xD;
main from first list, got B&#xD;
main from first list, got C&#xD;
main from second list, got D&#xD;
main from second list, got E
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we introduce &lt;code&gt;publishOn&lt;/code&gt;, we can make this code more performant, so that the &lt;code&gt;Flux&lt;/code&gt; don&amp;rsquo;t block each other:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;Flux.fromIterable(firstListOfUrls) //contains A, B and C&#xD;
    .publishOn(Schedulers.boundedElastic())&#xD;
    .map(url -&amp;gt; blockingWebClient.get(url))&#xD;
    .subscribe(body -&amp;gt; System.out.println(Thread.currentThread().getName + &amp;quot; from first list, got &amp;quot; + body));&#xD;
&#xD;
Flux.fromIterable(secondListOfUrls) //contains D and E&#xD;
    .publishOn(Schedulers.boundedElastic())&#xD;
    .map(url -&amp;gt; blockingWebClient.get(url))&#xD;
    .subscribe(body -&amp;gt; System.out.prinln(Thread.currentThread().getName + &amp;quot; from second list, got &amp;quot; + body));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which could give us something like the following output:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;boundedElastic-1 from first list, got A&#xD;
boundedElastic-2 from second list, got D&#xD;
boundedElastic-1 from first list, got B&#xD;
boundedElastic-2 from second list, got E&#xD;
boundedElastic-1 from first list, got C
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First list and second list are interleaved now, great !&lt;/p&gt;&lt;h3&gt;&lt;a href="#the-code-subscribeon-scheduler-s-code-operator" class="anchor" name="the-code-subscribeon-scheduler-s-code-operator"&gt;&lt;/a&gt;The &lt;code&gt;subscribeOn(Scheduler s)&lt;/code&gt; operator&lt;/h3&gt;
&lt;p&gt;In the preceding example we saw how &lt;code&gt;publishOn&lt;/code&gt; could be used to offset blocking work on a separate Thread, by switching the publication of the &lt;em&gt;triggers&lt;/em&gt; for that blocking work (the urls to fetch) on a provided &lt;code&gt;Scheduler&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Since the &lt;code&gt;map&lt;/code&gt; operator runs on its source thread, switching that source thread by putting a &lt;code&gt;publishOn&lt;/code&gt; before the &lt;code&gt;map&lt;/code&gt; works as intended.&lt;/p&gt;
&lt;p&gt;But what if that url-fetching method was written by somebody else, and they regrettably forgot to add the &lt;code&gt;publishOn&lt;/code&gt;? Is there a way to influence the &lt;code&gt;Thread&lt;/code&gt; &lt;strong&gt;upstream&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;In a way, there is. That&amp;rsquo;s where &lt;code&gt;subscribeOn&lt;/code&gt; can come in handy.&lt;/p&gt;
&lt;p&gt;This operator changes where the &lt;code&gt;subscribe&lt;/code&gt; method is executed. And since the subscribe signal flows upward, it directly influences where the source &lt;code&gt;Flux&lt;/code&gt; subscribes and starts generating data.&lt;/p&gt;
&lt;p&gt;As a consequence, it can seem to act on the parts of the reactive chain of operators upward and downward (as long as there is no &lt;code&gt;publishOn&lt;/code&gt; thrown in the mix):&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;//code provided in library you have no write access to&#xD;
final Flux&amp;lt;String&amp;gt; fetchUrls(List&amp;lt;String&amp;gt; urls) {&#xD;
  return Flux.fromIterable(urls)&#xD;
    .map(url -&amp;gt; blockingWebClient.get(url)); //oops!&#xD;
}&#xD;
&#xD;
//your code:&#xD;
fetchUrls(A, B, C)&#xD;
  .subscribeOn(Schedulers.boundedElastic())&#xD;
  .subscribe(body -&amp;gt; System.out.println(Thread.currentThread().getName + &amp;quot; from first list, got &amp;quot; + body));&#xD;
&#xD;
fetchUrls(D, E)&#xD;
  .subscribeOn(Schedulers.boundedElastic())&#xD;
  .subscribe(body -&amp;gt; System.out.prinln(Thread.currentThread().getName + &amp;quot; from second list, got &amp;quot; + body));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Like in our second &lt;code&gt;publishOn&lt;/code&gt; example, that code will correctly output something like:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;boundedElastic-1 from first list, got A&#xD;
boundedElastic-2 from second list, got D&#xD;
boundedElastic-1 from first list, got B&#xD;
boundedElastic-2 from second list, got E&#xD;
boundedElastic-1 from first list, got C
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So what happened?&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;subscribe&lt;/code&gt; calls are still running on the &lt;em&gt;main&lt;/em&gt; thread, but they propagate a &lt;code&gt;subscribe&lt;/code&gt; signal to their source, &lt;code&gt;subscribeOn&lt;/code&gt;. In turn &lt;code&gt;subscribeOn&lt;/code&gt; propagates that same signal to its own source from &lt;code&gt;fetchUrls&lt;/code&gt;, &lt;strong&gt;but on a &lt;em&gt;boundedElastic&lt;/em&gt; &lt;code&gt;Worker&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;Flux&lt;/code&gt; sequence returned by &lt;code&gt;fetchUrls&lt;/code&gt;, the map is subscribed on the boundedElastic worker thread, and so is the &lt;code&gt;range&lt;/code&gt;. The &lt;code&gt;range&lt;/code&gt; starts generating data, still on the boundedElastic worker thread.&lt;/p&gt;
&lt;p&gt;This continues down the data path, each subscriber executing &lt;code&gt;onNext&lt;/code&gt; on its source thread, the &lt;code&gt;boundedElastic&lt;/code&gt; one.&lt;/p&gt;
&lt;p&gt;At last, the lambdas configured in the &lt;code&gt;subscribe(...)&lt;/code&gt; call are also executed on the &lt;code&gt;boundedElastic&lt;/code&gt; thread.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;&lt;/p&gt;
  &lt;p&gt;It is important to distinguish the &lt;em&gt;act&lt;/em&gt; of subscribing and the lambda passed to the &lt;code&gt;subscribe()&lt;/code&gt; method. This method subscribes to its source &lt;code&gt;Flux&lt;/code&gt;, but the lambda are executed at the end of processing, when the data has flown through all the steps (including steps that hop to another thread),.&lt;/p&gt;
  &lt;p&gt;So the &lt;code&gt;Thread&lt;/code&gt; on which the lambda is executed might be different from the subscription &lt;code&gt;Thread&lt;/code&gt; , ie. the thread on which the &lt;code&gt;subscribe&lt;/code&gt; method is called.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And if we were the author of the &lt;code&gt;fetchUrls&lt;/code&gt; library, we could make the code even more performant by letting each fetch run on its own &lt;code&gt;Worker&lt;/code&gt;, by leveraging &lt;code&gt;subscribeOn&lt;/code&gt; in a slightly different way:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;final Flux&amp;lt;String&amp;gt; betterFetchUrls(List&amp;lt;String&amp;gt; urls) {&#xD;
  return Flux.fromIterable(urls)&#xD;
    .flatMap(url -&amp;gt; &#xD;
             //wrap the blocking call in a Mono&#xD;
             Mono.fromCallable(() -&amp;gt; blockingWebClient.get(url))&#xD;
             //ensure that Mono is subscribed in an boundedElastic Worker&#xD;
             .subscribeOn(Schedulers.boundedElastic())&#xD;
    ); //each individual URL fetch runs in its own thread!&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;a href="#and-what-if-i-mix-the-two" class="anchor" name="and-what-if-i-mix-the-two"&gt;&lt;/a&gt;And What If I Mix the Two?&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;subscribeOn&lt;/code&gt; will act throughout the subscribe phase, from bottom to top, then on the data path until it encounters a &lt;code&gt;publishOn&lt;/code&gt; (or a time based operator).&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s consider the following example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;Flux.just(&amp;quot;hello&amp;quot;)&#xD;
    .doOnNext(v -&amp;gt; System.out.println(&amp;quot;just &amp;quot; + Thread.currentThread().getName()))&#xD;
    .publishOn(Scheduler.boundedElastic())&#xD;
    .doOnNext(v -&amp;gt; System.out.println(&amp;quot;publish &amp;quot; + Thread.currentThread().getName()))&#xD;
    .delayElements(Duration.ofMillis(500))&#xD;
    .subscribeOn(Schedulers.elastic())&#xD;
    .subscribe(v -&amp;gt; System.out.println(v + &amp;quot; delayed &amp;quot; + Thread.currentThread().getName()));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will print:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;just elastic-1&#xD;
publish boundedElastic-1&#xD;
hello delayed parallel-1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We should unpack what happened step by step:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Here &lt;code&gt;subscribe&lt;/code&gt; is called on the &lt;em&gt;main&lt;/em&gt; thread, but subscription is rapidly switched to the &lt;code&gt;elastic&lt;/code&gt; scheduler due to the &lt;code&gt;subscribeOn&lt;/code&gt; immediately above.&lt;/li&gt;
  &lt;li&gt;All the operators above it are also subscribed on &lt;code&gt;elastic&lt;/code&gt;, from bottom to top.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;just&lt;/code&gt; emits its value on the &lt;code&gt;elastic&lt;/code&gt; scheduler.&lt;/li&gt;
  &lt;li&gt;the first &lt;code&gt;doOnNext&lt;/code&gt; receives that value on the same thread and prints it out: &lt;code&gt;just elastic-1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;then on the top to bottom data path, we encounter the &lt;code&gt;publishOn&lt;/code&gt;: data from &lt;code&gt;doOnNext&lt;/code&gt; is propagated downstream on the &lt;code&gt;boundedElastic&lt;/code&gt; scheduler.&lt;/li&gt;
  &lt;li&gt;the second &lt;code&gt;doOnNext&lt;/code&gt; receives its data on &lt;code&gt;boundedElastic&lt;/code&gt; and prints &lt;code&gt;publish bounderElastic-1&lt;/code&gt; accordingly.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;delayElements&lt;/code&gt; is a time operator, so by default it publishes data on the &lt;code&gt;Schedulers.parallel()&lt;/code&gt; scheduler.&lt;/li&gt;
  &lt;li&gt;on the data path, &lt;code&gt;subscribeOn&lt;/code&gt; does nothing but propagating signal on the same thread.&lt;/li&gt;
  &lt;li&gt;on the data path, the lambda(s) passed to &lt;code&gt;subscribe(...)&lt;/code&gt; are executed on the thread in which data signals are received, so the lambda prints &lt;code&gt;hello delayed parallel-1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;&lt;a href="#conclusion" class="anchor" name="conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this article, we¡¯ve learned about the &lt;code&gt;Scheduler&lt;/code&gt; abstraction and how it enables advanced usage like the &lt;code&gt;VirtualTimeScheduler&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We then have learned how to switch threads (or rather &lt;code&gt;Scheduler&lt;/code&gt; workers) in the middle of a reactive sequence, and what is the difference between &lt;code&gt;publishOn&lt;/code&gt; and &lt;code&gt;subscribeOn&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the next instalment, we¡¯ll dig deeper in the innards of the library to describe some optimizations that are in place to ensure Reactor&amp;rsquo;s performance.&lt;/p&gt;
&lt;p&gt;In the meantime, happy reactive coding!&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Boot for Apache Geode &amp; Pivotal GemFire 1.1.4.RELEASE &amp; 1.2.2.RELEASE Available</title>
    <link rel="alternate" href="https://spring.io/blog/2019/12/12/spring-boot-for-apache-geode-pivotal-gemfire-1-1-4-release-1-2-2-release-available" />
    <category term="releases" label="Releases" />
    <author>
      <name>John Blum</name>
    </author>
    <id>tag:spring.io,2019-12-12:3909</id>
    <updated>2019-12-12T19:49:38Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;On behalf of the Spring, Apache Geode &amp;amp; Pivotal GemFire communities, it is my pleasure to announce the release of &lt;em&gt;Spring Boot for Apache Geode &amp;amp; Pivotal GemFire&lt;/em&gt; (SBDG) &lt;code&gt;1.1.4.RELEASE&lt;/code&gt; as well as &lt;code&gt;1.2.2.RELEASE&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Both releases are available in &lt;a href="https://search.maven.org/artifact/org.springframework.geode/spring-geode-starter"&gt;Maven Central&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="whats-new"&gt;&lt;a class="anchor" href="#whats-new"&gt;&lt;/a&gt;What&amp;#8217;s New&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;While SBDG &lt;code&gt;1.1.4.RELEASE&lt;/code&gt; primarily aligns with the latest Spring bits in its release line:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Spring Framework &lt;code&gt;5.1.12.RELEASE&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring Boot &lt;code&gt;2.1.11.RELEASE&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring Data &lt;code&gt;Lovelace-SR14/2.1.14.RELEASE&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring Session for Apache Geode &amp;amp; Pivotal GemFire (SSDG) &lt;code&gt;Bean-SR8/2.1.7.RELEASE&lt;/code&gt; (&lt;strong&gt;NEW&lt;/strong&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;And SBDG &lt;code&gt;1.2.2.RELEASE&lt;/code&gt; builds on:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Spring Framework &lt;code&gt;5.2.2.RELEASE&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring Boot &lt;code&gt;2.2.2.RELEASE&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring Data &lt;code&gt;Moore-SR3/2.2.3.RELEASE&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring Session for Apache Geode &amp;amp; Pivotal GemFire (SSDG) &lt;code&gt;Corn-RELEASE/2.2.1.RELEASE&lt;/code&gt; (&lt;strong&gt;NEW&lt;/strong&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring Test for Apache Geode &amp;amp; Pivotal GemFire (STDG) &lt;code&gt;0.0.11.RELEASE&lt;/code&gt; (&lt;strong&gt;NEW&lt;/strong&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;SBDG &lt;code&gt;1.2.2.RELEASE&lt;/code&gt; additionally includes the following improvements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Enhancements to &lt;code&gt;@EnableClusterAware&lt;/code&gt; Region bean detection.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Changes the Pool used in the Spring Session Starter from (the legacy SDG) "gemfirePool" to the Apache Geode "DEFAULT" Pool for convenience, especially when getting started.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;See &lt;a href="https://github.com/spring-projects/spring-boot-data-geode/milestone/26?closed=1"&gt;here&lt;/a&gt; for more details.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;See the &lt;a href="https://github.com/spring-projects/spring-boot-data-geode/blob/1.2.2.RELEASE/spring-geode/src/main/resources/changelog.txt#L7-L38"&gt;changelog&lt;/a&gt; for complete details.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="whats-next"&gt;&lt;a class="anchor" href="#whats-next"&gt;&lt;/a&gt;What&amp;#8217;s Next&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;We will continue to address Issues in our &lt;a href="https://github.com/spring-projects/spring-boot-data-geode/issues"&gt;backlog&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;1 improvement in a future release (~1.3 M1/M2) will include support to populate an Apache Geode or Pivotal GemFire Region using a &lt;code&gt;data.json&lt;/code&gt; file in the same way a Spring Boot user can use &lt;code&gt;data.sql&lt;/code&gt; to populate DBMS Tables.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;See &lt;a href="https://github.com/spring-projects/spring-boot-data-geode/issues/67"&gt;Issue #67&lt;/a&gt; for full details and to track progress.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="conclusion"&gt;&lt;a class="anchor" href="#conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;As always, any feedback is welcomed and appreciated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Thank you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="https://github.com/spring-projects/spring-boot-data-geode/issues"&gt;Issues&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot-data-geode/pulls"&gt;PR&lt;/a&gt; | &lt;a href="https://stackoverflow.com/questions/tagged/spring-boot"&gt;StackOverflow&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Session for Apache Geode &amp; Pivotal GemFire 2.1.7.RELEASE and 2.2.1.RELEASE Available</title>
    <link rel="alternate" href="https://spring.io/blog/2019/12/12/spring-session-for-apache-geode-pivotal-gemfire-2-1-7-release-and-2-2-1-release-available" />
    <category term="releases" label="Releases" />
    <author>
      <name>John Blum</name>
    </author>
    <id>tag:spring.io,2019-12-12:3908</id>
    <updated>2019-12-12T19:13:20Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;On behalf of the Spring, Apache Geode and Pivotal GemFire communities, it is my pleasure to announce the release of &lt;em&gt;Spring Session for Apache Geode &amp;amp; Pivotal GemFire&lt;/em&gt; (SSDG)  &lt;code&gt;2.1.7.RELEASE&lt;/code&gt; as well as &lt;code&gt;2.2.1.RELEASE&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Both releases are available in &lt;a href="https://search.maven.org/artifact/org.springframework.session/spring-session-data-geode"&gt;Maven Central&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="whats-new"&gt;&lt;a class="anchor" href="#whats-new"&gt;&lt;/a&gt;What&amp;#8217;s New&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;While SSDG &lt;code&gt;2.1.7.RELASE&lt;/code&gt; primarily aligns with the latest Spring bits in its respective line:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Spring Framework &lt;code&gt;5.1.12.RELEASE&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring Boot &lt;code&gt;2.1.11.RELEASE&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring Data &lt;code&gt;Lovelace-SR14/2.1.14.RELEASE&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring Session &lt;code&gt;Bean-SR8/2.1.9.RELEASE&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;And SSDG &lt;code&gt;2.2.1.RELEASE&lt;/code&gt; aligns with:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Spring Framework &lt;code&gt;5.2.2.RELEASE&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring Boot &lt;code&gt;2.2.2.RELEASE&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring Data &lt;code&gt;Moore-SR3/2.2.3.RELEASE&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring Session &lt;code&gt;Corn-RELEASE/2.2.0.RELEASE&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;SSDG &lt;code&gt;2.2.1.RELEASE&lt;/code&gt; additionally includes the following improvements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Converts all Spring Session OQL Indexes from HASH to FUNCTIONAL (RANGE) Indexes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Adds support to disable OQL Indexes created by SSDG.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And enhances the PdxSerializableSessionSerializer to mark the PDX identity field using the Session ID.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;See &lt;a href="https://github.com/spring-projects/spring-session-data-geode/milestone/20?closed=1"&gt;here&lt;/a&gt; for full details.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="whats-next"&gt;&lt;a class="anchor" href="#whats-next"&gt;&lt;/a&gt;What&amp;#8217;s Next&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Heading into the New Year (2020), we plan to tackle much of what is in our &lt;a href="https://github.com/spring-projects/spring-session-data-geode/issues"&gt;backlog&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="conclusion"&gt;&lt;a class="anchor" href="#conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;As always, feedback is welcomed and appreciated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="https://github.com/spring-projects/spring-session-data-geode/issues"&gt;Issues&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-session-data-geode/pulls"&gt;PR&lt;/a&gt; | &lt;a href="https://stackoverflow.com/questions/tagged/spring-session"&gt;StackOverflow&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Boot 2.1.x EOL November 1st 2020</title>
    <link rel="alternate" href="https://spring.io/blog/2019/12/10/spring-boot-2-1-x-eol-november-1st-2020" />
    <category term="releases" label="Releases" />
    <author>
      <name>Phil Webb</name>
    </author>
    <id>tag:spring.io,2019-12-10:3907</id>
    <updated>2019-12-10T22:57:31Z</updated>
    <content type="html">&lt;p&gt;With the recent release of Spring Boot 2.2, we&amp;rsquo;d like to announce that maintenance for Spring Boot 2.1 will end on November 1st 2020.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll keep publishing the occasional maintenance release up until that point, but we recommend that all users consider upgrading to Spring Boot 2.2 as soon as possible. Upgrading to Spring Boot 2.2 from 2.1 should not be too difficult, and upgrade instructions are &lt;a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.2-Release-Notes#upgrading-from-spring-boot-21"&gt;available on the WIKI&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In order to help track the state of supported releases we&amp;rsquo;ve also introduced a &lt;a href="https://github.com/spring-projects/spring-boot/wiki/Supported-Versions"&gt;new &amp;ldquo;supported versions&amp;rdquo; WIKI page&lt;/a&gt;. You can see at a glance which Spring Boot versions are supported and when they will EOL.&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - December 10th, 2019</title>
    <link rel="alternate" href="https://spring.io/blog/2019/12/10/this-week-in-spring-december-10th-2019" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2019-12-10:3906</id>
    <updated>2019-12-10T01:41:10Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! Today I just wrapped up my appearance in Brisbane, Australia, where I have been for the epic YOW! conference. Truly, one of my all-time favorite shows on the planet. I feel like an imposter in the ranks of the other speakers. I can not recommend this show enough.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m just about to board my fight back to San Francisco, and we&amp;rsquo;ve got a ton of stuff to get to so let&amp;rsquo;s press on! &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/12/09/spring-cloud-data-flow-2-3-0-ga-released"&gt;Spring Cloud Data Flow 2.3.0 GA Released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/12/09/stream-processing-with-spring-cloud-stream-and-apache-kafka-streams-part-6-state-stores-and-interactive-queries"&gt;Stream Processing with Spring Cloud Stream and Apache Kafka Streams. Part 6 - State Stores and Interactive Queries&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/12/06/stream-processing-with-spring-cloud-stream-and-apache-kafka-streams-part-5-application-customizations"&gt;Stream Processing with Spring Cloud Stream and Apache Kafka Streams. Part 5 - Application Customizations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/12/06/spring-data-r2dbc-goes-ga"&gt;Spring Data R2DBC goes GA&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/12/06/spring-boot-2-2-2-is-now-available"&gt;Spring Boot 2.2.2 is now available&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/12/06/spring-boot-2-1-11-is-now-available"&gt;Spring Boot 2.1.11 is now available&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;In last week&amp;rsquo;s &lt;em&gt;A Bootiful Podcast&lt;/em&gt;, I talked to &lt;a href="https://spring.io/blog/2019/12/05/a-bootiful-podcast-pivotal-s-katrina-bakas-about-the-pivotal-healthwatch-product-kubernetes-cloud-foundry-and-so-much-more"&gt;Pivotal&amp;rsquo;s Katrina Bakas about the Pivotal HealthWatch product, Kubernetes, Cloud Foundry and so much more.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/12/05/stream-processing-with-spring-cloud-stream-and-apache-kafka-streams-part-4-error-handling"&gt;Stream Processing with Spring Cloud Stream and Apache Kafka Streams. Part 4 - Error Handling&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/12/04/stream-processing-with-spring-cloud-stream-and-apache-kafka-streams-part-3-data-deserialization-and-serialization"&gt;Stream Processing with Spring Cloud Stream and Apache Kafka Streams. Part 3 - Data deserialization and serialization&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/12/04/spring-data-moore-sr3-and-lovelace-sr14-released"&gt;Spring Data Moore SR3 and Lovelace SR14 released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/12/03/stream-processing-with-spring-cloud-stream-and-apache-kafka-streams-part-2-programming-model-continued"&gt;Stream Processing with Spring Cloud Stream and Apache Kafka Streams. Part 2 - Programming Model Continued&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/12/03/spring-framework-maintenance-roadmap-in-2020-including-4-3-eol"&gt;Spring Framework maintenance roadmap in 2020 (including 4.3 EOL)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/12/03/spring-framework-5-2-2-and-5-1-12-available-now"&gt;Spring Framework 5.2.2 and 5.1.12 available now&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Reactor team member Sergei Egorov&amp;rsquo;s new &lt;a href="https://bsideup.github.io/posts/daily_reactive/where_is_my_exception/"&gt;&lt;em&gt;Daily Reactive&lt;/em&gt;&lt;/a&gt; series looks awesome! Well worth a read, too!&lt;/li&gt;
  &lt;li&gt;Have you checked out this month&amp;rsquo;s &lt;a href="https://www.rabbitmq.com/blog/2019/12/07/this-month-in-rabbitmq-november-2019-recap/"&gt;&lt;em&gt;This Month in RabbitMQ&lt;/em&gt; roundup yet?&lt;/a&gt;&lt;br/&gt;conference-recording-recommendations-2019/)&lt;/li&gt;
  &lt;li&gt;I love Trisha Gee¡¯s tutorial series introducing &lt;a href="https://blog.jetbrains.com/idea/tag/tutorial-reactive-spring/"&gt; reactive Spring Boot.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Cloud Data Flow 2.3.0 GA Released</title>
    <link rel="alternate" href="https://spring.io/blog/2019/12/09/spring-cloud-data-flow-2-3-0-ga-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Janne Valkealahti</name>
    </author>
    <id>tag:spring.io,2019-12-06:3904</id>
    <updated>2019-12-09T19:16:48Z</updated>
    <content type="html">&lt;p&gt;The release 2.3.0 delivers a lot of enhancements and generic compatibility changes for Spring Boot 2.2.x and Spring Cloud Hoxton.&lt;/p&gt;&lt;h2&gt;&lt;a href="#continuous-deployment-for-tasks" class="anchor" name="continuous-deployment-for-tasks"&gt;&lt;/a&gt;Continuous Deployment For Tasks&lt;/h2&gt;
&lt;p&gt;As task applications evolve faster to keep up with business needs, the ability for new versions to be consumed via Data Flow in an automated way is needed. While Data Flow has supported the ability to register multiple versions of a task application in previous iterations, the ability to run them in a practical way by re-hydrating command line arguments, deployment properties, and application properties used in previous executions has been missing. In this version, the storage of those values in a manifest and the ability to both retrieve them to determine if an application needs to be upgraded and apply them to the new execution allows for developers to create continuous deployment flows for their task applications. All these capabilities are readily available through RESTful APIs, as well, so the overall CI/CD workflow for Tasks can be automated.&lt;/p&gt;&lt;h2&gt;&lt;a href="#scheduler-improvements" class="anchor" name="scheduler-improvements"&gt;&lt;/a&gt;Scheduler improvements&lt;/h2&gt;
&lt;p&gt;Scheduling has been updated to support the Task¡¯s CI/CD features. Thus when the Kubernetes or Cloud Foundry Task-scheduler launches the application after the user updates the Task application to a new version, the next execution in Spring Cloud Data Flow will take advantage of these updates automatically.&lt;/p&gt;&lt;h2&gt;&lt;a href="#monitoring-improvements" class="anchor" name="monitoring-improvements"&gt;&lt;/a&gt;Monitoring improvements&lt;/h2&gt;
&lt;p&gt;In this release, we have revised the monitoring architecture to drive towards a consistent experience in Local, Kubernetes, and Cloud Foundry.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Using &lt;a href="https://github.com/micrometer-metrics/prometheus-rsocket-proxy"&gt;Prometheus RSocket Proxy&lt;/a&gt; as a default approach for Prometheus-based monitoring of the &lt;a href="https://github.com/micrometer-metrics/prometheus-rsocket-proxy#support-for-short-lived-or-serverless-applications"&gt;short lived&lt;/a&gt; Tasks, as well as long-lived streaming applications, and across all supported platforms.&lt;/li&gt;
  &lt;li&gt;Native &lt;a href="https://dataflow.spring.io/docs/2.3.0.SNAPSHOT/feature-guides/batch/monitoring/"&gt;monitoring of Spring Cloud Tasks and Spring Cloud Batch&lt;/a&gt;, complements to the existing monitoring support for streaming applications through Spring Cloud Streams.&lt;/li&gt;
  &lt;li&gt;We have a few &lt;a href="https://github.com/spring-cloud/spring-cloud-dataflow-samples/tree/master/monitoring-samples"&gt;monitoring-samples&lt;/a&gt;. You will find instructions for building custom Stream and Task applications integrated with the Data Flow Monitoring Architecture:&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-dataflow-samples/tree/master/monitoring-samples/stream-apps"&gt;stream-apps&lt;/a&gt; - how to enable monitoring for custom built source, processor and sink apps.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-dataflow-samples/tree/master/monitoring-samples/task-apps"&gt;task-apps&lt;/a&gt; - how to enable monitoring for custom built task apps.&lt;/li&gt;
  &lt;li&gt;Allow using the monitoring architecture to implement elastic, auto-scaling adapters for stream pipelines.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/50398/70357194-37365c00-186e-11ea-9bc2-5dfe4924d114.gif" alt="SCDF-monitoring-promethesu-proxy" /&gt;&lt;/p&gt;&lt;h2&gt;&lt;a href="#kubernetes-deployer-improvements" class="anchor" name="kubernetes-deployer-improvements"&gt;&lt;/a&gt;Kubernetes deployer improvements&lt;/h2&gt;
&lt;p&gt;The following new capabilities are readily available as &lt;a href="https://docs.spring.io/spring-cloud-dataflow/docs/2.3.0.RELEASE/reference/htmlsingle/#configuration-kubernetes-deployer"&gt;deployment properties&lt;/a&gt; in Kubrentes for both streaming and batch data pipelines.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Support for Node Affinity, Pod Affinity and Anti-Affinity&lt;/li&gt;
  &lt;li&gt;Ability to add multiple ports to Service objects&lt;/li&gt;
  &lt;li&gt;Allow customization of the container image used in StatefulSet deployments&lt;/li&gt;
  &lt;li&gt;Implementation of Scaling API&lt;/li&gt;
  &lt;li&gt;Support for custom init containers&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;&lt;a href="#helm-chart-improvements" class="anchor" name="helm-chart-improvements"&gt;&lt;/a&gt;Helm chart improvements&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Ability to enable monitoring support using Prometheus and Grafana&lt;/li&gt;
  &lt;li&gt;Try out the &lt;a href="https://hub.helm.sh/charts/stable/spring-cloud-data-flow"&gt;2.3 GA compatible version of the Helm Chart&lt;/a&gt; and let us know what you think!&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;&lt;a href="#scaling-api" class="anchor" name="scaling-api"&gt;&lt;/a&gt;Scaling API&lt;/h2&gt;
&lt;p&gt;The addition of new scaling API is available to quickly alter the number of application instances without redeploying a whole stream with updates to the deployment properties. The Scaling API is agnostic to the target platform and can be used seamlessly with K8s, CF and Local.&lt;/p&gt;&lt;h2&gt;&lt;a href="#import-export-utility" class="anchor" name="import-export-utility"&gt;&lt;/a&gt;Import/Export Utility&lt;/h2&gt;
&lt;p&gt;We also made it easier to work with multiple environments by adding &lt;a href="https://docs.spring.io/spring-cloud-dataflow/docs/2.3.0.RELEASE/reference/htmlsingle/#_import_export_streams"&gt;Import/Export Streams&lt;/a&gt; feature which provides easy moving streams across different environments, e.g. dev, test, prod.&lt;/p&gt;&lt;h2&gt;&lt;a href="#security" class="anchor" name="security"&gt;&lt;/a&gt;Security&lt;/h2&gt;
&lt;p&gt;Our journey to fully move into next generation Spring Security OAuth2 support is almost complete and we expect to finalize it in next releases. There is a blog post &lt;a href="https://spring.io/blog/2018/01/30/next-generation-oauth-2-0-support-with-spring-security"&gt;Next Generation OAuth 2.0 Support with Spring Security&lt;/a&gt; which outlined where things are going in a Spring world.&lt;/p&gt;&lt;h2&gt;&lt;a href="#developer-surveys" class="anchor" name="developer-surveys"&gt;&lt;/a&gt;Developer Surveys&lt;/h2&gt;
&lt;p&gt;We have released one major release (2.0), three minor releases (2.1, 2.2, and 2.3), and several maintenance releases in 2019! Likewise, Spring Cloud Stream, Spring Cloud Task, Deployers, Skipper, Apps, and remaining others in the SCDF ecosystem independently evolved in isolation, as well.&lt;/p&gt;
&lt;p&gt;Thank you, everyone, for your support, contributions, and participation!&lt;/p&gt;
&lt;p&gt;As we are inching towards the New Year¡¯s, we wanted to reach out to the community to learn about your interests and feedback. Please take these super quick 1-page surveys and let us know.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://forms.gle/VWjQai7DzBTFNVof6"&gt;Spring Cloud Data Flow&lt;/a&gt;&lt;br/&gt;&lt;a href="https://forms.gle/z9ja25wQrDZSmeQb7"&gt;Spring Cloud Stream&lt;/a&gt;&lt;br/&gt;&lt;a href="https://forms.gle/upYHVn3wVJnHKbyB8"&gt;Spring Cloud Task&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;&lt;a href="#stay-in-touch-hellip" class="anchor" name="stay-in-touch-hellip"&gt;&lt;/a&gt;Stay in touch&amp;hellip;&lt;/h2&gt;
&lt;p&gt;As always, we welcome feedback and contributions, so please reach out to us on &lt;a href="https://stackoverflow.com/questions/tagged/spring-cloud-dataflow"&gt;Stackoverflow&lt;/a&gt; or &lt;a href="https://github.com/spring-cloud/spring-cloud-dataflow/issues"&gt;GitHub&lt;/a&gt; or via &lt;a href="https://gitter.im/spring-cloud/spring-cloud-dataflow"&gt;Gitter&lt;/a&gt;.&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Stream Processing with Spring Cloud Stream and Apache Kafka Streams. Part 6 - State Stores and Interactive Queries</title>
    <link rel="alternate" href="https://spring.io/blog/2019/12/09/stream-processing-with-spring-cloud-stream-and-apache-kafka-streams-part-6-state-stores-and-interactive-queries" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Soby Chacko</name>
    </author>
    <id>tag:spring.io,2019-12-09:3905</id>
    <updated>2019-12-09T18:04:21Z</updated>
    <content type="html">&lt;p&gt;Part 1 - &lt;a href="https://spring.io/blog/2019/12/02/stream-processing-with-spring-cloud-stream-and-apache-kafka-streams-part-1-programming-model"&gt;Programming Model&lt;/a&gt;&lt;br/&gt;Part 2 - &lt;a href="https://spring.io/blog/2019/12/03/stream-processing-with-spring-cloud-stream-and-apache-kafka-streams-part-2-programming-model-continued"&gt;Programming Model Continued&lt;/a&gt;&lt;br/&gt;Part 3 - &lt;a href="https://spring.io/blog/2019/12/04/stream-processing-with-spring-cloud-stream-and-apache-kafka-streams-part-3-data-deserialization-and-serialization"&gt;Data deserialization and serialization&lt;/a&gt;&lt;br/&gt;Part 4 - &lt;a href="https://spring.io/blog/2019/12/05/stream-processing-with-spring-cloud-stream-and-apache-kafka-streams-part-4-error-handling"&gt;Error Handling&lt;/a&gt;&lt;br/&gt;Part 5 - &lt;a href="https://spring.io/blog/2019/12/06/stream-processing-with-spring-cloud-stream-and-apache-kafka-streams-part-5-application-customizations"&gt;Application Customizations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this part (the sixth and final one of this series), we are going to look into the ways Spring Cloud Stream Binder for Kafka Streams supports state stores and interactive queries in Kafka Streams.&lt;/p&gt;&lt;h2&gt;&lt;a href="#named-state-stores" class="anchor" name="named-state-stores"&gt;&lt;/a&gt;Named State Stores&lt;/h2&gt;
&lt;p&gt;When you have the need to maintain state in the application, Kafka Streams lets you materialize that state information into a named state store. There are several operations in Kafka Streams that require it to keep track of the state such as &lt;code&gt;count&lt;/code&gt;, &lt;code&gt;aggregate&lt;/code&gt;, &lt;code&gt;reduce&lt;/code&gt;, various &lt;code&gt;windowing&lt;/code&gt; operations, and others. Kafka Streams uses a special database called &lt;a href="https://rocksdb.org/"&gt;RocksDB&lt;/a&gt; for maintaining this state store in most cases (unless you explicitly change the store type). By default, the same information in the state store is backed up to a changelog topic as well as within Kafka, for fault-tolerant reasons. &lt;/p&gt;
&lt;p&gt;When you explicitly materialize state like this into a named state store, this gives the ability for applications to query that state store at a later stage. This is a very powerful feature, as this gives you the ability to query into a database-like structure from within your Kafka Streams applications.&lt;/p&gt;&lt;h2&gt;&lt;a href="#consuming-data-as-ktable-or-globalktable" class="anchor" name="consuming-data-as-ktable-or-globalktable"&gt;&lt;/a&gt;Consuming data as KTable or GlobalKTable&lt;/h2&gt;
&lt;p&gt;Kafka Streams binder-based applications can bind to destinations as &lt;code&gt;KTable&lt;/code&gt; or &lt;code&gt;GlobalKTable&lt;/code&gt;. &lt;code&gt;GlobalKTable&lt;/code&gt; is a special table type, where you get data from all partitions of an input topic, regardless of the instance that it is running. By contrast, a &lt;code&gt;KTable&lt;/code&gt; gives you only data from the respective partitions of the topic that the instance is consuming from. &lt;/p&gt;
&lt;p&gt;The following is a function signature we saw earlier in this series of blog posts:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;@Bean&#xD;
public Function&amp;lt;KStream&amp;lt;Long, Order&amp;gt;,&#xD;
     Function&amp;lt;KTable&amp;lt;Long, Customer&amp;gt;,&#xD;
           Function&amp;lt;GlobalKTable&amp;lt;Long, Product&amp;gt;, KStream&amp;lt;Long, EnrichedOrder&amp;gt;&amp;gt;&amp;gt;&amp;gt; process() {
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, this function has three input bindings, one &lt;code&gt;KStream&lt;/code&gt;, one &lt;code&gt;KTable&lt;/code&gt;, and another &lt;code&gt;GlobalKTable&lt;/code&gt;. Kafka Streams lets you materialize tables consumed like these into named state stores, given that these tables are based on a primary key. You can use the binding level property to materialize them into named state stores along with consumption. The following examples show how to do so:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;spring.cloud.stream.kafka.streams.bindings.process-in-1.consumer.materializedAs: incoming-store-1&#xD;
spring.cloud.stream.kafka.streams.bindings.process-in-2.consumer.materializedAs: incoming-store-2
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a href="#kafka-streams-dsl-operations-materialized-into-state-stores" class="anchor" name="kafka-streams-dsl-operations-materialized-into-state-stores"&gt;&lt;/a&gt;Kafka Streams DSL operations materialized into state stores&lt;/h2&gt;
&lt;p&gt;There are various methods in the Kafka Streams high-level DSL, which returns table types such as &lt;code&gt;count&lt;/code&gt;, &lt;code&gt;aggregate&lt;/code&gt;, and &lt;code&gt;reduce&lt;/code&gt;. There are other operations that use state stores to keep track of information. For example, the various join method calls in &lt;code&gt;KStream&lt;/code&gt;, although they return a &lt;code&gt;KStream&lt;/code&gt; type, internally use state stores to keep the joined data. In summary, when Kafka Streams lets you materialize data either as a table or stream, it is materialized into a state store, much like data stored in a database table. &lt;/p&gt;&lt;h2&gt;&lt;a href="#explicit-state-stores-to-use-in-low-level-processors" class="anchor" name="explicit-state-stores-to-use-in-low-level-processors"&gt;&lt;/a&gt;Explicit state stores to use in low-level processors&lt;/h2&gt;
&lt;p&gt;When using the processor API of Kafka Streams, which gives you more flexibility on how the stream is processed, you have to declare a state store beforehand and provide that to the StreamsBuilder. Kafka Streams binder can scan the application to detect beans of type StoreBuilder and then use that to create state stores and pass them along with the underlying StreamsBuilder through the StreamsBuilderFactoryBean. Here is a look at such beans:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;@Bean&#xD;
public StoreBuilder myStore() {&#xD;
  return Stores.keyValueStoreBuilder(&#xD;
        Stores.persistentKeyValueStore(&amp;quot;my-store&amp;quot;), Serdes.Long(),&#xD;
        Serdes.Long());&#xD;
}&#xD;
&#xD;
@Bean&#xD;
public StoreBuilder otherStore() {&#xD;
  return Stores.windowStoreBuilder(&#xD;
        Stores.persistentWindowStore(&amp;quot;other-store&amp;quot;,&#xD;
              Duration.ofSeconds(3), Duration.ofSeconds(3),  false), Serdes.Long(),&#xD;
        Serdes.Long());&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The two StoreBuilder beans are detected by the binder, and it then attaches them to the streams builder automatically. Later on, you can access them, in your processor API based applications, as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;¡¦&#xD;
KeyValueStore&amp;lt;Long, Long&amp;gt; state1;&#xD;
WindowStore&amp;lt;Long, Long&amp;gt; state2;&#xD;
...&#xD;
@Bean&#xD;
public java.util.function.Consumer&amp;lt;KStream&amp;lt;Object, String&amp;gt;&amp;gt; process() {&#xD;
  return input -&amp;gt;&#xD;
        input.process((ProcessorSupplier&amp;lt;Object, String&amp;gt;) () -&amp;gt; new Processor&amp;lt;Object, String&amp;gt;() {&#xD;
           @Override&#xD;
            public void init(ProcessorContext context) {&#xD;
              state1 = (KeyValueStore&amp;lt;Long, Long&amp;gt;) context.getStateStore(&amp;quot;my-store&amp;quot;);&#xD;
              state2 = (WindowStore&amp;lt;Long, Long&amp;gt;) context.getStateStore(&amp;quot;other-store&amp;quot;);&#xD;
           }&#xD;
&#xD;
           @Override&#xD;
           public void process(Object key, String value) {&#xD;
              // processing code&#xD;
           }&#xD;
&#xD;
           @Override&#xD;
           public void close() {&#xD;
              if (state1 != null) {&#xD;
                 state1.close();&#xD;
              }&#xD;
              if (state2 != null) {&#xD;
                 state2.close();&#xD;
              }&#xD;
           }&#xD;
        }, &amp;quot;my-store&amp;quot;, &amp;quot;other-store&amp;quot;);&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One quick note about the usage of the processor API in Kafka Streams binder-based applications. The only way you can use the low-level processor API when you use the binder is through a usage pattern of higher-level DSL and then combine that with a transform or process call on it, as shown in the preceding example. See &lt;a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-stream-binder-kafka/3.0.0.RELEASE/reference/html/spring-cloud-stream-binder-kafka.html#_mixing_high_level_dsl_and_low_level_processor_api"&gt;here&lt;/a&gt; for more details on how the processor API can be used in a binder based application. &lt;/p&gt;
&lt;p&gt;Instead of creating &lt;code&gt;StoreBuilder&lt;/code&gt; beans in the application, you can also use the &lt;code&gt;StreamsBuilderFactoryBean&lt;/code&gt; customizer which we saw in the &lt;a href="https://spring.io/blog/2019/12/06/stream-processing-with-spring-cloud-stream-and-apache-kafka-streams-part-5-application-customizations"&gt;previous blog&lt;/a&gt;, to add the state stores programmatically, if that is your preference. &lt;/p&gt;&lt;h2&gt;&lt;a href="#using-interactive-queries-to-query-data-from-state-stores" class="anchor" name="using-interactive-queries-to-query-data-from-state-stores"&gt;&lt;/a&gt;Using interactive queries to query data from state stores&lt;/h2&gt;
&lt;p&gt;Kafka Streams lets you interactively query the data in the state store in real time as live stream processing is going on. The binder provides abstractions around this feature to make it easier to work with interactive queries. &lt;code&gt;InteractiveQueryService&lt;/code&gt; is a basic API that the binder provides to work with state store querying. You can usually inject this as a bean into your application and then invoke various API methods from it. Here is an example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;@Autowired&#xD;
private InteractiveQueryService interactiveQueryService;&#xD;
 ¡¦&#xD;
 ...&#xD;
ReadOnlyKeyValueStore&amp;lt;Object, Object&amp;gt; keyValueStore =&#xD;
                                                interactiveQueryService.getQueryableStoreType(&amp;quot;my-store&amp;quot;, QueryableStoreTypes.keyValueStore());
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then you can invoke various retrieval methods from the store and iterate through the result. There are various methods that you can invoke from these state stores based on your use case and the type of state store that you are using. Please refer to the Kafka Streams documentation for &lt;a href="https://kafka.apache.org/10/documentation/streams/developer-guide/interactive-queries.html"&gt;interactive queries&lt;/a&gt; for these various iteration methods available. &lt;/p&gt;&lt;h2&gt;&lt;a href="#interactive-queries-over-rpc-mechanisms" class="anchor" name="interactive-queries-over-rpc-mechanisms"&gt;&lt;/a&gt;Interactive Queries over RPC Mechanisms&lt;/h2&gt;
&lt;p&gt;Oftentimes, you want to expose the state of your system from state stores over an RPC mechanism. You can combine Spring web support for writing powerful REST based applications in this manner. Here is a blueprint:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;@RestController&#xD;
public class Controller {&#xD;
&#xD;
		@RequestMapping(&amp;quot;/song/id&amp;quot;)&#xD;
		public SongBean song(@RequestParam(value=&amp;quot;id&amp;quot;) Long id) {&#xD;
			final ReadOnlyKeyValueStore&amp;lt;Long, Song&amp;gt; songStore =&#xD;
					interactiveQueryService.getQueryableStore(¡°song-store¡±, QueryableStoreTypes.&amp;lt;Long, Song&amp;gt;keyValueStore());&#xD;
&#xD;
			final Song song = songStore.get(id);&#xD;
			if (song == null) {&#xD;
				throw new IllegalArgumentException(&amp;quot;...&amp;quot;);&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This REST controller can be accessed from a front end web application for example. &lt;/p&gt;
&lt;p&gt;This usage pattern obviously raises concerns. What happens if there are multiple Kafka Streams application instances running? For instance, what if there are 3 instances in which each of them is pulling data from a single source partition? Which controller instance is going to be responsible for providing information for key &lt;em&gt;X&lt;/em&gt;? What if key &lt;em&gt;X&lt;/em&gt; is only hosted in partition 3 and that happens to be the instance 3, but the request landed on instance 1. This is obviously a problem, but Kafka Streams provides a solution for that. &lt;/p&gt;&lt;h2&gt;&lt;a href="#retrieving-a-key-from-the-right-instance" class="anchor" name="retrieving-a-key-from-the-right-instance"&gt;&lt;/a&gt;Retrieving a key from the right instance&lt;/h2&gt;
&lt;p&gt;When you have multiple instances running and you want to use interactive queries, you have to set this property at the binder level:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;spring.cloud.stream.kafka.streams.binder.configuration.application.server: &amp;lt;server&amp;gt;:&amp;lt;port&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, in the controller method, you have to write logic that is similar to the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;@RequestMapping(&amp;quot;/charts/top-five&amp;quot;)&#xD;
@SuppressWarnings(&amp;quot;unchecked&amp;quot;)&#xD;
public List&amp;lt;SongPlayCountBean&amp;gt; topFive(@RequestParam(value=&amp;quot;genre&amp;quot;) String genre) {&#xD;
{&#xD;
&#xD;
org.apache.kafka.streams.state.HostInfo hostInfo = interactiveQueryService.getHostInfo(&amp;quot;store-name&amp;quot;,&#xD;
                                                key, keySerializer);&#xD;
&#xD;
if (interactiveQueryService.getCurrentHostInfo().equals(hostInfo)) {&#xD;
&#xD;
    //query from the store that is locally available&#xD;
}&#xD;
else {&#xD;
    //query from the remote host&#xD;
RestTemplate restTemplate = new RestTemplate();&#xD;
	return restTemplate.postForObject(&#xD;
						String.format(&amp;quot;http://%s:%d/%s&amp;quot;, hostInfo.host(),&#xD;
								hostInfo.port(), &amp;quot;charts/top-five?genre=Punk&amp;quot;), ¡¦);&#xD;
&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a href="#summary" class="anchor" name="summary"&gt;&lt;/a&gt;Summary&lt;/h2&gt;
&lt;p&gt;In this blog, we saw the various ways in which Kafka Streams lets you materialize state information into state stores. The binder lets you consume data as &lt;code&gt;KTable&lt;/code&gt; or &lt;code&gt;GlobalKTable&lt;/code&gt; while allowing you to materialize that into a named state store. Kafka Streams has several operations in which state stores can be materialized as named stores. We saw that, when using the processor API in Kafka Streams, the application needs to create state store builder beans that the binder detects which it then passes along to Kafka Streams. Finally, we saw how these state stores can be queried by using interactive queries. We also saw the nuances involving multiple instances of an application and interactive queries against them. &lt;/p&gt;&lt;h2&gt;&lt;a href="#concluding-the-series-and-where-to-go-next-hellip" class="anchor" name="concluding-the-series-and-where-to-go-next-hellip"&gt;&lt;/a&gt;Concluding the series and Where to Go Next&amp;hellip;&lt;/h2&gt;
&lt;p&gt;Thank you for reading this blog series!&lt;/p&gt;
&lt;p&gt;In this six-part series, we saw many features of Kafka Streams binder in Spring Cloud Stream, such as its &lt;a href="https://spring.io/blog/2019/12/03/stream-processing-with-spring-cloud-stream-and-apache-kafka-streams-part-2-programming-model-continued"&gt;programming models&lt;/a&gt;, &lt;a href="https://spring.io/blog/2019/12/04/stream-processing-with-spring-cloud-stream-and-apache-kafka-streams-part-3-data-deserialization-and-serialization"&gt;data serialization&lt;/a&gt;, &lt;a href="https://spring.io/blog/2019/12/05/stream-processing-with-spring-cloud-stream-and-apache-kafka-streams-part-4-error-handling"&gt;error handling&lt;/a&gt;, &lt;a href="https://spring.io/blog/2019/12/06/stream-processing-with-spring-cloud-stream-and-apache-kafka-streams-part-5-application-customizations"&gt;customization&lt;/a&gt;, and interactively querying the state stores. There are more features that we haven¡¯t covered as part of this series as we wanted to focus on the general theme of introducing the main features of this binder that was added or enhanced in version &lt;code&gt;3.0.0&lt;/code&gt;. For those additional features or to engage with the engineering team behind Spring Cloud Stream, please check out the various links provided in the resources section below.&lt;/p&gt;&lt;h2&gt;&lt;a href="#resources" class="anchor" name="resources"&gt;&lt;/a&gt;Resources:&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-stream-binder-kafka/3.0.0.RELEASE/reference/html/spring-cloud-stream-binder-kafka.html#_kafka_streams_binder"&gt;Kafka Streams Binder Docs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://spring.io/projects/spring-cloud-stream"&gt;Spring Cloud Stream&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-stream"&gt;Core Spring Cloud Stream GitHub&lt;/a&gt;&lt;br/&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-stream-binder-kafka"&gt;Spring Cloud Stream Kafka Binder GitHub&lt;/a&gt;&lt;br/&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-stream-samples"&gt;Spring Cloud Stream Samples&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/tagged/spring-cloud-stream"&gt;Stack Overflow&lt;/a&gt;&lt;br/&gt;&lt;a href="https://gitter.im/spring-cloud/spring-cloud-stream"&gt;Gitter&lt;/a&gt;&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
</feed>
