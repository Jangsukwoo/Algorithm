<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Spring</title>
  <link rel="alternate" href="https://spring.io/blog" />
  <link rel="self" href="https://spring.io/blog.atom" />
  <id>http://spring.io/blog.atom</id>
  <icon>https://spring.io/favicon.ico</icon>
  <updated>2020-06-25T22:06:47Z</updated>
  <entry>
    <title>A Bootiful Podcast: Tanzu Wavefront co-founder and VMware Principal Engineer Clement Pang</title>
    <link rel="alternate" href="https://spring.io/blog/2020/06/25/a-bootiful-podcast-tanzu-wavefront-co-founder-and-vmware-principal-engineer-clement-pang" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2020-06-25:4116</id>
    <updated>2020-06-25T22:06:47Z</updated>
    <content type="html">&lt;p&gt;Hi Spring fans! In this installment &lt;a href="http://twitter.com/starbuxman"&gt;Josh Long (@starbuxman)&lt;/a&gt; talks to Wavefront co-founder and VMware Principal Engineer &lt;a href="https://twitter.com/panghy"&gt;Clement Pang (@panghy)&lt;/a&gt;.&lt;/p&gt;
&lt;iframe title="VMware Principal Engineer and Tanzu Wavefront co-founder Clement Pang" height="122" width="100%" style="border: none;" scrolling="no" data-name="pb-iframe-player" src="https://www.podbean.com/media/player/37kum-e12282?from=yiiadmin&amp;download=1&amp;version=1&amp;skin=1&amp;btn-skin=107&amp;auto=0&amp;share=1&amp;fonts=Helvetica&amp;download=1&amp;rtl=0&amp;pbad=1"&gt;&lt;/iframe&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>First milestone of Spring Data 2020.0 available</title>
    <link rel="alternate" href="https://spring.io/blog/2020/06/25/first-milestone-of-spring-data-2020-0-available" />
    <category term="releases" label="Releases" />
    <author>
      <name>Mark Paluch</name>
    </author>
    <id>tag:spring.io,2020-06-25:4115</id>
    <updated>2020-06-25T10:23:00Z</updated>
    <content type="html">&lt;p&gt;On behalf of the Spring Data team, I¡¯m happy to announce the first milestone of the 2020.0 (Code name &lt;a href="https://en.wikipedia.org/wiki/William_of_Ockham"&gt;&amp;ldquo;Ockham&amp;rdquo;&lt;/a&gt;) release train, &lt;code&gt;2020.0.0-M1&lt;/code&gt;. This release ships with &lt;a href="https://jira.spring.io/issues/?filter=16934"&gt;over 120 tickets fixed&lt;/a&gt;. This Spring Data release is the first release using &lt;a href="https://spring.io/blog/2020/04/30/updates-to-spring-versions"&gt;calver&lt;/a&gt; as an update to the release train version scheme.&lt;/p&gt;
&lt;p&gt;The most notable new features are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Support for RxJava 3&lt;/li&gt;
  &lt;li&gt;Introduction of &lt;code&gt;org.springframework.data:spring-data-bom&lt;/code&gt;, which replaces &lt;code&gt;org.springframework.data:spring-data-releasetrain&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can find a curated changelog in our &lt;a href="https://github.com/spring-projects/spring-data-commons/wiki/Release-Train-Ockham-%282020.0.0%29"&gt;release train wiki&lt;/a&gt; or skim through a &lt;a href="https://jira.spring.io/issues/?filter=16934"&gt;full list of changes in JIRA&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;A second milestone is planned for August. It will contain a full rewrite of Spring Data Neo4j, along with a version bump to 6.0 and the adoption of the newly introduced Spring R2DBC module in Spring Data R2DBC. Release candidates are scheduled for mid-September, followed by a GA release in late October.&lt;/p&gt;
&lt;p&gt;We look forward to your feedback!&lt;/p&gt;
&lt;p&gt;Finally, here are links to all the artifacts, changelogs, and documentation:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Data Commons 2.4 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-commons/2.4.0-M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.4.0-M1/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.4.0-M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.4.0-M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JDBC 2.1 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-jdbc/2.1.0-M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/2.1.0-M1/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/2.1.0-M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/2.1.0-M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JPA 2.4 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-jpa/2.4.0-M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.4.0-M1/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.4.0-M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.4.0-M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data KeyValue 2.4 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-keyvalue/2.4.0-M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.4.0-M1/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.4.0-M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.4.0-M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Solr 4.3 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-solr/4.3.0-M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/4.3.0-M1/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/4.3.0-M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/4.3.0-M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Neo4j 5.4 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-neo4j/5.4.0-M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/5.4.0-M1/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/5.4.0-M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/5.4.0-M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Cassandra 3.1 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-cassandra/3.1.0-M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/3.1.0-M1/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/3.1.0-M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/3.1.0-M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Geode 2.4 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-geode/2.4.0-M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.4.0-M1/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.4.0-M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.4.0-M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data MongoDB 3.1 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-mongodb/3.1.0-M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/3.1.0-M1/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/3.1.0-M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/3.1.0-M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data R2DBC 1.2 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-r2dbc/1.2.0-M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/r2dbc/docs/1.2.0-M1/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/r2dbc/docs/1.2.0-M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/r2dbc/docs/1.2.0-M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data LDAP 2.4 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-ldap/2.4.0-M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.4.0-M1/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.4.0-M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.4.0-M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Envers 2.4 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-envers/2.4.0-M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.4.0-M1/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.4.0-M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.4.0-M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data REST 3.4 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-rest-webmvc/3.4.0-M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.4.0-M1/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.4.0-M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.4.0-M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Redis 2.4 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-redis/2.4.0-M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.4.0-M1/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.4.0-M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.4.0-M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Elasticsearch 4.1 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-elasticsearch/4.1.0-M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/4.1.0-M1/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/4.1.0-M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/4.1.0-M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Couchbase 4.1 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-couchbase/4.1.0-M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/4.1.0-M1/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/4.1.0-M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/4.1.0-M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>First Spring Framework 5.3 milestone released</title>
    <link rel="alternate" href="https://spring.io/blog/2020/06/25/first-spring-framework-5-3-milestone-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Juergen Hoeller</name>
    </author>
    <id>tag:spring.io,2020-06-24:4114</id>
    <updated>2020-06-25T08:40:14Z</updated>
    <content type="html">&lt;p&gt;Dear Spring community,&lt;/p&gt;
&lt;p&gt;On behalf of the team and everyone who contributed, it is my pleasure to announce that &lt;a href="https://github.com/spring-projects/spring-framework/milestone/222"&gt;Spring Framework 5.3 M1&lt;/a&gt; is available from &lt;a href="https://repo.spring.io/milestone/"&gt;our milestone repository&lt;/a&gt; now! Find an initial list of &lt;a href="https://github.com/spring-projects/spring-framework/wiki/What%27s-New-in-Spring-Framework-5.x#whats-new-in-version-53"&gt;new features and refinements&lt;/a&gt; and corresponding &lt;a href="https://github.com/spring-projects/spring-framework/wiki/Upgrading-to-Spring-Framework-5.x#upgrading-to-version-53"&gt;upgrade notes including several deprecations&lt;/a&gt; on our wiki.&lt;/p&gt;
&lt;p&gt;Please note that 5.3 is designed as the final 5.x feature release, wrapping up the major themes in the Spring Framework 5 generation, in particular reactive programming and Kotlin support, while also taking GraalVM compatibility to the next level. Last but not least, we are not only preparing for JDK 15 and 16 but also for next year&amp;rsquo;s JDK 17 LTS already, expecting an extended 5.3.x maintenance life.&lt;/p&gt;
&lt;p&gt;As a new module in 5.3, &lt;code&gt;spring-r2dbc&lt;/code&gt; introduces core &lt;a href="https://r2dbc.io/"&gt;R2DBC&lt;/a&gt; support within the Spring Framework umbrella, analogous to the existing &lt;code&gt;spring-jdbc&lt;/code&gt; module. While several R2DBC support features are still candidates for some minor refactoring, 5.3 M1 includes a pretty comprehensive arrangement there already, including a reactive &lt;code&gt;DatabaseClient&lt;/code&gt; API (analogous to &lt;code&gt;WebClient&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;At the same time, we are revisiting our JDBC support: e.g. introducing &lt;code&gt;queryForStream&lt;/code&gt; operations on &lt;code&gt;JdbcTemplate&lt;/code&gt; and providing a &lt;code&gt;JdbcTransactionManager&lt;/code&gt; with commit exception translation.&lt;/p&gt;
&lt;p&gt;This milestone also &lt;a href="https://github.com/spring-projects/spring-framework/issues/22968#issuecomment-638136709"&gt;improves GraalVM native support&lt;/a&gt;, e.g. making default &lt;code&gt;DispatcherServlet&lt;/code&gt; configuration fully discoverable and allowing for the removal of unsupported features from native images (e.g. through properties such as &lt;code&gt;spring.spel.ignore&lt;/code&gt; and &lt;code&gt;spring.xml.ignore&lt;/code&gt;). The &lt;a href="https://github.com/spring-projects-experimental/spring-graalvm-native"&gt;&lt;code&gt;spring-graalvm-native&lt;/code&gt;&lt;/a&gt; project is tracking Spring Framework 5.3 milestones from now on.&lt;/p&gt;
&lt;p&gt;Revisiting Spring&amp;rsquo;s web support, Spring MVC comes with &lt;code&gt;PathPattern&lt;/code&gt; parsing for efficient URL matching now, and WebFlux comes with a completely new and fully reactive multipart parser implementation, plus many further refinements in 5.3 M1 already.&lt;/p&gt;
&lt;p&gt;A &lt;a href="https://github.com/spring-projects/spring-framework/milestone/237"&gt;second milestone&lt;/a&gt; is planned for early August, introducing data binding for Java record classes as well as Kotlin 1.4 and &lt;a href="https://github.com/Kotlin/kotlinx.serialization"&gt;&lt;code&gt;kotlinx.serialization&lt;/code&gt;&lt;/a&gt; support for JSON on Spring MVC. A first release candidate is planned for mid September, with general availability expected in late October.&lt;/p&gt;
&lt;p&gt;Cheers,&lt;br/&gt;Juergen&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - June 23, 2020</title>
    <link rel="alternate" href="https://spring.io/blog/2020/06/23/this-week-in-spring-june-23-2020" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2020-06-23:4113</id>
    <updated>2020-06-23T22:43:00Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! What a week it&amp;rsquo;s been! Tomorrow I&amp;rsquo;ll be presenting a webinar on the easy integration &lt;a href="https://tanzu.vmware.com/content/webinars/jun-24-tanzu-observability-tips-for-understanding-your-spring-boot-applications"&gt;between Spring Boot and Tanzu Wavefront&lt;/a&gt;. Wavefront is an all-in-one, integrated distributed tracing metrics analytics observability platform. Join us tomorrow to learn about observability, about Wavefront, and their integration in the Spring ecosystem with Spring Cloud Sleuth and Micrometer, among other things.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ve so many great things to look at this week so let&amp;rsquo;s get to it! &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/06/19/spring-tools-4-7-0-released"&gt;Spring Tools 4.7.0 released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/06/19/a-bootiful-podcast-nisha-kumar-and-rose-judge-on-the-linux-foundation-s-project-tern"&gt;A Bootiful Podcast: Nisha Kumar and Rose Judge on the Linux Foundation&amp;rsquo;s project Tern&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/06/18/what-s-new-in-spring-boot-2-3"&gt;What&amp;rsquo;s new in Spring Boot 2.3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/06/17/getting-started-with-rsocket-spring-security"&gt;Getting Started With RSocket: Spring Security&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/06/16/spring-tips-spring-and-graal-pt-2"&gt;Spring Tips: Spring and Graal (pt. 2)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/06/16/spring-boot-for-apache-geode-vmware-gemfire-1-1-8-release-and-1-2-8-release-available"&gt;Spring Boot for Apache Geode &amp;amp; VMware GemFire 1.1.8.RELEASE and 1.2.8.RELEASE available!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/juliendubois/status/1275415716049674241?s=12"&gt;Julien Dubois on an Azure Native Function with Spring Cloud Function&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://blogs.vmware.com/vmworld/2020/06/vmworld-2020-digital-edition.html"&gt;VMworld 2020 Digital Edition&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I love this &lt;a href="https://github.com/spring-projects/spring-data-examples/blob/master/jdbc/jooq/README.adoc"&gt;Spring Data JDBC example demonstrating an integration with JOOQ&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Check out the rewritten getting started guide on &lt;a href="https://docs.microsoft.com/en-us/azure/developer/java/spring-framework/"&gt;using Spring Data JPA with Azure Database for MySQL&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;A great post on Okta Developer: &lt;a href="https://developer.okta.com/blog/2020/06/17/angular-docker-spring-boot"&gt;Angular, Docker with a Big Hug from Spring Boot &lt;/a&gt;. Okta&amp;rsquo;s Matt Raible drove the creation of the article. He solicited input from Benoit Sautel (who helped with Gradle), Google&amp;rsquo;s Ray Tsang (who helped with Docker and Jib), Google&amp;rsquo;s James Ward (Kubernetes and Google Cloud), Heroku&amp;rsquo;s Joe Kutner (who helped with Heroku and Docker and buildpacks), and me (I helped with Spring and Cloud Foundry). It was a lot of fun collaborating with so many talented people.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.infoq.com/presentations/ddd-spring-data-jdbc/"&gt;Domain-Driven Design with Relational Databases Using Spring Data JDBC&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;A great post on the Codecentric AG blog: &lt;a href="https://blog.codecentric.de/en/2020/06/spring-boot-graalvm-native-image-maven-plugin/"&gt;Simplifying Spring Boot GraalVM Native Image builds with the native-image-maven-plugin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://inside.java/2020/06/18/java14-preview-api/"&gt;Java 14 - Preview Features and their APIs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://inside.java/2020/06/17/sealed-classes/"&gt;Java Feature Spotlight: Sealed Classes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Tools 4.7.0 released</title>
    <link rel="alternate" href="https://spring.io/blog/2020/06/19/spring-tools-4-7-0-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Martin Lippert</name>
    </author>
    <id>tag:spring.io,2020-06-19:4112</id>
    <updated>2020-06-19T07:56:41Z</updated>
    <content type="html">&lt;p&gt;Dear Spring Community,&lt;/p&gt;
&lt;p&gt;I am happy to announce the 4.7.0 release of the Spring Tools 4 for Eclipse, Visual Studio Code, and Theia.&lt;/p&gt;
&lt;p&gt;Highlights from this release include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;(Spring Boot)&lt;/em&gt; bugfix: automatic live hover detection works again reliably&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Eclipse)&lt;/em&gt; update: Spring Tools 4 for Eclipse distribution updated to Eclipse 2020-06 release&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Eclipse)&lt;/em&gt; improvement: added support for multiple instances of symbols view&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Eclipse)&lt;/em&gt; improvement: added favorites dropdown to symbols view&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Eclipse)&lt;/em&gt; improvement: boot dashboard shows request mappings, beans, and the environment of running apps now if SSH tunnel is enabled for the app on CF&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Eclipse)&lt;/em&gt; update: Support SemVer format in Spring Initializr wizard (&lt;a href="https://github.com/spring-projects/sts4/issues/473"&gt;#473&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Eclipse)&lt;/em&gt; bugfix: STS 4.6.2 and Eclipse 2020-06 RC1: FrameworkEvent ERROR (&lt;a href="https://github.com/spring-projects/sts4/issues/477"&gt;#477&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Eclipse)&lt;/em&gt; bugfix: select manifest action for cf apps in boot dashboard doesn&amp;rsquo;t show SSH option anymore&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(VSCode)&lt;/em&gt; improvement: Flag to configure the &amp;ldquo;JAVA_HOME or PATH&amp;hellip;&amp;rdquo; message display (&lt;a href="https://github.com/spring-projects/sts4/issues/478"&gt;#478&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(VSCode)&lt;/em&gt; bugfix: green live hovers markers are no longer gone after switching to a different editor&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To download the distribution for Eclipse and find links to the marketplace entries for Visual Studio Code and Theia, please go visit:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Tools 4: &lt;a href="https://spring.io/tools/"&gt;https://spring.io/tools/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Detailed changes can be found here: &lt;a href="https://github.com/spring-projects/sts4/wiki/Changelog#2020-06-18-470-release-incl-language-servers-version-1190"&gt;https://github.com/spring-projects/sts4/wiki/Changelog#2020-06-18-470-release-incl-language-servers-version-1190&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Spring Tools 4.7.1 is scheduled to be released in late July 2020.&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>A Bootiful Podcast: Nisha Kumar and Rose Judge on the Linux Foundation's project Tern</title>
    <link rel="alternate" href="https://spring.io/blog/2020/06/19/a-bootiful-podcast-nisha-kumar-and-rose-judge-on-the-linux-foundation-s-project-tern" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2020-06-19:4111</id>
    <updated>2020-06-19T06:54:29Z</updated>
    <content type="html">&lt;iframe title="Nisha Kumar and Rose Judge on the Linux Foundation's Tern" src="https://www.podbean.com/media/player/2fmu6-e05e01-pb?from=share&amp;skin=1&amp;share=1&amp;fonts=Helvetica&amp;download=1&amp;version=1&amp;vjs=1&amp;skin=1" height="315" width="100%" style="border: none;" scrolling="no" data-name="pb-iframe-player"&gt;&lt;/iframe&gt;
&lt;p&gt;Hi, Spring fans! In this installment &lt;a href="http://twitter.com/starbuxman"&gt;Josh Long (@starbuxman)&lt;/a&gt; talks to Nisha Kumar and Rose Judge who work on the Linux Foundation&amp;rsquo;s project Tern. &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://www.linuxfoundation.org/blog/2019/12/tern-1-0-0-is-generally-available/"&gt;Tern from the Linux Foundation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Shift-left_testing"&gt;Shift Left testing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spdx.org/licenses/"&gt;SPDX&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spdx/spdx-maven-plugin"&gt;A Maven plugin supporting SPDX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>What's new in Spring Boot 2.3</title>
    <link rel="alternate" href="https://spring.io/blog/2020/06/18/what-s-new-in-spring-boot-2-3" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Phil Webb</name>
    </author>
    <id>tag:spring.io,2020-06-18:4110</id>
    <updated>2020-06-18T16:17:49Z</updated>
    <content type="html">&lt;p&gt;Speaker: &lt;a href="http://twitter.com/phillip_webb"&gt;Phil Webb (@phillip_webb)&lt;/a&gt;&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/WL7U-yGfUXA" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;&lt;h2&gt;&lt;a href="#timecodes" class="anchor" name="timecodes"&gt;&lt;/a&gt;Timecodes&lt;/h2&gt;
&lt;p&gt;Use the timecodes below if you want to jump to a specific part of the presentation:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://youtu.be/WL7U-yGfUXA?t=27"&gt;00:27&lt;/a&gt; - Intro&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://youtu.be/WL7U-yGfUXA?t=119"&gt;01:59&lt;/a&gt; - Creating the Demo&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://youtu.be/WL7U-yGfUXA?t=241"&gt;04:01&lt;/a&gt; - Building Docker Images with the Spring Boot Plugin&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://youtu.be/WL7U-yGfUXA?t=561"&gt;09:21&lt;/a&gt; - Building Docker Images with a Dockerfile&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://youtu.be/WL7U-yGfUXA?t=1000"&gt;16:40&lt;/a&gt; - Customizing Layers&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://youtu.be/WL7U-yGfUXA?t=1298"&gt;21:38&lt;/a&gt; - Graceful Shutdown&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://youtu.be/WL7U-yGfUXA?t=1519"&gt;25:19&lt;/a&gt; - Kubernetes Probes&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://youtu.be/WL7U-yGfUXA?t=1855"&gt;30:55&lt;/a&gt; - Configuration Properties End-to-End Traceability&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://youtu.be/WL7U-yGfUXA?t=1980"&gt;33:00&lt;/a&gt; - Wrap-up and Upgrade Gotchas&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;&lt;a href="#links" class="anchor" name="links"&gt;&lt;/a&gt;Links&lt;/h2&gt;
&lt;p&gt;The following links are referenced in the presentation:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Building OCI Images [&lt;a href="https://docs.spring.io/spring-boot/docs/current/maven-plugin/reference/html/#build-image"&gt;Maven&lt;/a&gt;|&lt;a href="https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/html/#build-image"&gt;Gradle&lt;/a&gt;]&lt;/li&gt;
  &lt;li&gt;Packaging Layered Jars [&lt;a href="https://docs.spring.io/spring-boot/docs/current/maven-plugin/reference/html/#repackage-layers"&gt;Maven&lt;/a&gt;|&lt;a href="https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/html/#packaging-layered-jars"&gt;Gradle&lt;/a&gt;]&lt;/li&gt;
  &lt;li&gt;Customizing Layers [&lt;a href="https://docs.spring.io/spring-boot/docs/current/maven-plugin/reference/html/#repackage-layers-configuration"&gt;Maven&lt;/a&gt;|&lt;a href="https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/html/#packaging-layers-configuration"&gt;Gradle&lt;/a&gt;]&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#writing-the-dockerfile"&gt;Writing a Dockerfile&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.3-Release-Notes"&gt;Release Notes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-projects/spring-boot/blob/master/CONTRIBUTING.adoc"&gt;Contributing Instructions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Getting Started With RSocket: Spring Security</title>
    <link rel="alternate" href="https://spring.io/blog/2020/06/17/getting-started-with-rsocket-spring-security" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Ben Wilcock</name>
    </author>
    <id>tag:spring.io,2020-06-16:4106</id>
    <updated>2020-06-17T15:00:00Z</updated>
    <content type="html">&lt;p&gt;&lt;strong&gt;Reading time: about 6 minutes&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;Coding time: about 20 minutes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;ve been following &lt;a href="https://spring.io/team/benwilcock"&gt;my series on RSocket&lt;/a&gt;, you&amp;rsquo;ve already learned how to build client-server applications with Spring Boot. In today&amp;rsquo;s exercise, you&amp;rsquo;re going to learn how to add security to your RSocket applications. &lt;/p&gt;
&lt;p&gt;The task of securing RSocket applications is greatly simplified when you use Spring Security. &lt;a href="https://spring.io/projects/spring-security"&gt;Spring Security&lt;/a&gt; is a must-have module for any production application. It allows you to easily plugin many different authentication providers and restricts each user&amp;rsquo;s access to your application based on their identity and their role. &lt;/p&gt;
&lt;p&gt;As you will see, the code required to secure your application is pretty straightforward. But because security is such a &amp;ldquo;cross-cutting&amp;rdquo; concern, the changes do touch a few different parts of the code. It&amp;rsquo;s not difficult to make these changes yourself, but as ever, the full code sample is available on &lt;a href="https://github.com/benwilcock/spring-rsocket-demo"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; At the time of writing, RSocket¡¯s security extensions are still a work in progress. You can follow their progress &lt;a href="https://github.com/rsocket/rsocket/blob/master/Extensions/Security/Authentication.md"&gt;here&lt;/a&gt;. In this exercise, we¡¯ll be using &lt;a href="https://github.com/rsocket/rsocket/blob/master/Extensions/Security/Simple.md"&gt;Simple Authentication&lt;/a&gt; which carries the warning: ¡°Simple Authentication transmits the username and password in cleartext. Additionally, it does not protect the authenticity or confidentiality of the payload that is transmitted along with it. This means that the Transport that is used should provide both authenticity and confidentiality to protect both the username and password and corresponding payload.¡±&lt;/p&gt;
&lt;/blockquote&gt;&lt;h2&gt;&lt;a href="#step-1-add-the-spring-security-dependencies" class="anchor" name="step-1-add-the-spring-security-dependencies"&gt;&lt;/a&gt;Step 1: Add The Spring Security Dependencies&lt;/h2&gt;
&lt;p&gt;In the &lt;code&gt;POM.xml&lt;/code&gt; files for the &lt;code&gt;rsocket-client&lt;/code&gt; and &lt;code&gt;rsocket-server&lt;/code&gt; projects, add the following security dependencies:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint xml"&gt;       &amp;lt;dependency&amp;gt;&#xD;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&#xD;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-security&amp;lt;/artifactId&amp;gt;&#xD;
        &amp;lt;/dependency&amp;gt;&#xD;
        &amp;lt;dependency&amp;gt;&#xD;
            &amp;lt;groupId&amp;gt;org.springframework.security&amp;lt;/groupId&amp;gt;&#xD;
            &amp;lt;artifactId&amp;gt;spring-security-rsocket&amp;lt;/artifactId&amp;gt;&#xD;
        &amp;lt;/dependency&amp;gt;&#xD;
        &amp;lt;dependency&amp;gt;&#xD;
            &amp;lt;groupId&amp;gt;org.springframework.security&amp;lt;/groupId&amp;gt;&#xD;
            &amp;lt;artifactId&amp;gt;spring-security-messaging&amp;lt;/artifactId&amp;gt;&#xD;
        &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Together, these dependencies will integrate Spring Security into your RSocket applications. Including the &lt;code&gt;spring-boot-starter-security&lt;/code&gt; package means that much of the configuration happens automatically.&lt;/p&gt;&lt;h2&gt;&lt;a href="#step-2-secure-your-rsocket-server" class="anchor" name="step-2-secure-your-rsocket-server"&gt;&lt;/a&gt;Step 2: Secure Your RSocket Server&lt;/h2&gt;
&lt;p&gt;Securing your RSocket responders is best done in two stages. First, add a security configuration class, and second, secure your RSocket responder methods.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Note: These changes will temporarily break the integration test you added in the &lt;a href="https://spring.io/blog/2020/05/25/getting-started-with-rsocket-testing-spring-boot-responders"&gt;last tutorial&lt;/a&gt;. Don&amp;rsquo;t worry; I&amp;rsquo;ll show you how to fix it again later.&lt;/p&gt;
&lt;/blockquote&gt;&lt;h3&gt;&lt;a href="#2-1-configure-spring-security" class="anchor" name="2-1-configure-spring-security"&gt;&lt;/a&gt;2.1 Configure Spring Security&lt;/h3&gt;
&lt;p&gt;To customize the configuration of Spring Security, in your &lt;code&gt;rsocket-server&lt;/code&gt; project, add a new class called &lt;code&gt;RSocketSecurityConfig.java&lt;/code&gt; containing the code below. &lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Note: The import statements are missing. Ask your IDE to add them for you when prompted.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@Configuration // (1)&#xD;
@EnableRSocketSecurity // (2)&#xD;
@EnableReactiveMethodSecurity // (3)&#xD;
public class RSocketSecurityConfig {&#xD;
&#xD;
    @Bean // (4)&#xD;
    RSocketMessageHandler messageHandler(RSocketStrategies strategies) {&#xD;
&#xD;
        RSocketMessageHandler handler = new RSocketMessageHandler();&#xD;
        handler.getArgumentResolverConfigurer().addCustomResolver(new AuthenticationPrincipalArgumentResolver());&#xD;
        handler.setRSocketStrategies(strategies);&#xD;
        return handler;&#xD;
    }&#xD;
&#xD;
    @Bean // (5)&#xD;
    MapReactiveUserDetailsService authentication() {&#xD;
        //This is NOT intended for production use (it is intended for getting started experience only)&#xD;
        UserDetails user = User.withDefaultPasswordEncoder()&#xD;
                .username(&amp;quot;user&amp;quot;)&#xD;
                .password(&amp;quot;pass&amp;quot;)&#xD;
                .roles(&amp;quot;USER&amp;quot;)&#xD;
                .build();&#xD;
&#xD;
        UserDetails admin = User.withDefaultPasswordEncoder()&#xD;
                .username(&amp;quot;test&amp;quot;)&#xD;
                .password(&amp;quot;pass&amp;quot;)&#xD;
                .roles(&amp;quot;NONE&amp;quot;)&#xD;
                .build();&#xD;
&#xD;
        return new MapReactiveUserDetailsService(user, admin);&#xD;
    }&#xD;
&#xD;
    @Bean // (6)&#xD;
    PayloadSocketAcceptorInterceptor authorization(RSocketSecurity security) {&#xD;
        security.authorizePayload(authorize -&amp;gt;&#xD;
                authorize&#xD;
                        .anyExchange().authenticated() // all connections, exchanges.&#xD;
        ).simpleAuthentication(Customizer.withDefaults());&#xD;
        return security.build();&#xD;
    }&#xD;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Specifying &lt;code&gt;@Configuration&lt;/code&gt; (1) tells Spring Boot that this is a configuration class. The &lt;code&gt;@EnableRSocketSecurity&lt;/code&gt; annotation (2) activates Spring&amp;rsquo;s security features for RSocket. Setting &lt;code&gt;@EnableReactiveMethodSecurity&lt;/code&gt; (3) allows you to secure your reactive methods.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;RSocketMessageHandler&lt;/code&gt; bean configured at (4) automatically converts user credentials into a &lt;code&gt;UserDetails&lt;/code&gt; object. The &lt;code&gt;MapReactiveUserDetailsService&lt;/code&gt; bean set at (5) provides Spring with a hardcoded database of users. Providing the user database manually in this way isn&amp;rsquo;t very realistic, but it will suffice for this demo. You can read up on &lt;a href="https://docs.spring.io/spring-security/site/docs/5.3.2.RELEASE/reference/html5/#modules"&gt;how this is done with other identity providers later&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finally, the &lt;code&gt;PayloadSocketAcceptorInterceptor&lt;/code&gt; bean at (6) specifies what users can do with the application. In this case, users must authenticate before being connected or granted access to any server-side features.&lt;/p&gt;&lt;h3&gt;&lt;a href="#2-2-secure-your-rsocket-methods" class="anchor" name="2-2-secure-your-rsocket-methods"&gt;&lt;/a&gt;2.2 Secure Your RSocket Methods&lt;/h3&gt;
&lt;p&gt;The user&amp;rsquo;s role governs the methods accessible to them. This &amp;ldquo;role-based access control&amp;rdquo; is configured in this case using Spring Security&amp;rsquo;s &lt;code&gt;@PreAuthorize&lt;/code&gt; annotation. The following code shows an example of this annotation in action ? securing the &amp;ldquo;fire-and-forget&amp;rdquo; message-mapping in the RSocketController class:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;    @PreAuthorize(&amp;quot;hasRole(&amp;#39;USER&amp;#39;)&amp;quot;) // (1)&#xD;
    @MessageMapping(&amp;quot;fire-and-forget&amp;quot;)&#xD;
    public Mono&amp;lt;Void&amp;gt; fireAndForget(final Message request, @AuthenticationPrincipal UserDetails user) { // (2)&#xD;
        log.info(&amp;quot;Received fire-and-forget request: {}&amp;quot;, request);&#xD;
        log.info(&amp;quot;Fire-And-Forget initiated by &amp;#39;{}&amp;#39; in the role &amp;#39;{}&amp;#39;&amp;quot;, user.getUsername(), user.getAuthorities());&#xD;
        return Mono.empty();&#xD;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;@PreAuthorize(&amp;quot;hasRole(&amp;#39;USER&amp;#39;)&amp;quot;)&lt;/code&gt; annotation (1) ensures that only users with the authority ¡®ROLE_USER¡¯ are allowed access to this method. In section 2.1 above, you created a user with this role.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re particularly eagle-eyed, you&amp;rsquo;ll have noticed two other changes in the &lt;code&gt;fireAndForget()&lt;/code&gt; method&amp;rsquo;s signature. The first is that the method parameters now include &lt;code&gt;@AuthenticationPrincipal UserDetails user&lt;/code&gt; (2). Spring provides this &lt;code&gt;user&lt;/code&gt; object automatically. Second, the return parameter is now &lt;code&gt;Mono&amp;lt;Void&amp;gt;&lt;/code&gt; rather than a regular &amp;lsquo;void.&amp;rsquo; This change is required because &lt;code&gt;@EnableReactiveMethodSecurity&lt;/code&gt; demands that the return values are from &lt;a href="https://projectreactor.io/docs/core/release/reference/#core-features"&gt;project Reactor&lt;/a&gt; (i.e. Flux or Mono).&lt;/p&gt;&lt;h2&gt;&lt;a href="#step-3-add-security-to-your-client" class="anchor" name="step-3-add-security-to-your-client"&gt;&lt;/a&gt;Step 3: Add Security To Your Client&lt;/h2&gt;
&lt;p&gt;In the code sample, the client has undergone several code changes. Most of them are not related to security. The majority of the changes simply make the client more comfortable to use when working with a secured server-side RSocket responder. In this section, you&amp;rsquo;ll cover only the security changes. See the &lt;a href="https://github.com/benwilcock/spring-rsocket-demo"&gt;code sample&lt;/a&gt; for the additional code.&lt;/p&gt;
&lt;p&gt;The security changes made to the client-side are all related to how it connects to the RSocket server. The connection code has been moved out of the class constructor and into a new &lt;code&gt;login()&lt;/code&gt; method. This login method expects the user to provide their username and password as they login. These credentials become metadata for the RSocket connection. The code for the login command is below:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;private static final MimeType SIMPLE_AUTH = MimeTypeUtils.parseMimeType(WellKnownMimeType.MESSAGE_RSOCKET_AUTHENTICATION.getString()); // (1)&#xD;
&#xD;
@ShellMethod(&amp;quot;Login with your username and password.&amp;quot;)&#xD;
    public void login(String username, String password) {&#xD;
        SocketAcceptor responder = RSocketMessageHandler.responder(rsocketStrategies, new ClientHandler());&#xD;
&#xD;
        UsernamePasswordMetadata user = new UsernamePasswordMetadata(username, password); // (2)&#xD;
&#xD;
        this.rsocketRequester = rsocketRequesterBuilder&#xD;
                .setupRoute(&amp;quot;shell-client&amp;quot;)&#xD;
                .setupData(CLIENT_ID)&#xD;
                .setupMetadata(user, SIMPLE_AUTH) // (3)&#xD;
                .rsocketStrategies(builder -&amp;gt;&#xD;
                        builder.encoder(new SimpleAuthenticationEncoder())) // (4)&#xD;
                .rsocketConnector(connector -&amp;gt; connector.acceptor(responder))&#xD;
                .connectTcp(&amp;quot;localhost&amp;quot;, 7000)&#xD;
                .block();&#xD;
&#xD;
 // ...connection handling code omitted. See the sample for details.&#xD;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This code looks very similar to the old constructor code. The most relevant lines in terms of adding security are as follows:&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;SIMPLE_AUTH&lt;/code&gt; static variable (1) declares how your user object should be encoded when passed as connection metadata. A new &lt;code&gt;UsernamePasswordMetadata&lt;/code&gt; is defined (2), which contains the credentials provided by the user as they login. When connecting (3), the &lt;code&gt;setupMetadata()&lt;/code&gt; method passes the &lt;code&gt;user&lt;/code&gt; object and the encoding mimetype defined at point (1). A new &lt;code&gt;SimpleAuthenticationEncoder&lt;/code&gt; (4) is placed in the &lt;code&gt;RSocketStrategies&lt;/code&gt; used for this connection. This object takes care of encoding the UsernamePasswordMetadata (2) into the correct mimetype (1).&lt;/p&gt;
&lt;p&gt;Further changes in the sample code allow the user to &lt;code&gt;logout&lt;/code&gt;. This means the user can switch between identities without having to restart the client every time. &lt;/p&gt;&lt;h2&gt;&lt;a href="#step-4-test-the-security-works" class="anchor" name="step-4-test-the-security-works"&gt;&lt;/a&gt;Step 4: Test The Security Works&lt;/h2&gt;
&lt;p&gt;The moment you added Spring Security&amp;rsquo;s dependencies and your security configuration class, your code became more secure. At the same time, your integration test stopped working because it doesn&amp;rsquo;t respect the new security settings.&lt;/p&gt;
&lt;p&gt;To fix the &lt;code&gt;RSocketClientToServerITest.java&lt;/code&gt; integration test, modify the &lt;code&gt;setupOnce()&lt;/code&gt; method so that a user object added to the connection metadata. The code required looks very similar to that you just saw in the client&amp;rsquo;s login method:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@BeforeAll&#xD;
    public static void setupOnce(@Autowired RSocketRequester.Builder builder,&#xD;
                                 @LocalRSocketServerPort Integer port,&#xD;
                                 @Autowired RSocketStrategies strategies) {&#xD;
&#xD;
        SocketAcceptor responder = RSocketMessageHandler.responder(strategies, new ClientHandler());&#xD;
        credentials = new UsernamePasswordMetadata(&amp;quot;user&amp;quot;, &amp;quot;pass&amp;quot;);&#xD;
        mimeType = MimeTypeUtils.parseMimeType(WellKnownMimeType.MESSAGE_RSOCKET_AUTHENTICATION.getString());&#xD;
&#xD;
        requester = builder&#xD;
                .setupRoute(&amp;quot;shell-client&amp;quot;)&#xD;
                .setupData(UUID.randomUUID().toString())&#xD;
                .setupMetadata(credentials, mimeType)&#xD;
                .rsocketStrategies(b -&amp;gt;&#xD;
                        b.encoder(new SimpleAuthenticationEncoder()))&#xD;
                .rsocketConnector(connector -&amp;gt; connector.acceptor(responder))&#xD;
                .connectTcp(&amp;quot;localhost&amp;quot;, port)&#xD;
                .block();&#xD;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the credentials now added to the connection, the test functions correctly. To verify this, at the terminal, navigate to your &lt;code&gt;rsocket-server&lt;/code&gt; folder and run the Maven &lt;code&gt;verify&lt;/code&gt; command. This action will run the revised integration test.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint bash"&gt;./mvnw clean verify
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Congratulations. Your integration test now runs and passes once again!&lt;/p&gt;&lt;h2&gt;&lt;a href="#there-rsquo-s-more" class="anchor" name="there-rsquo-s-more"&gt;&lt;/a&gt;There&amp;rsquo;s More&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve included two further integration tests in the &lt;code&gt;rsocket-server&lt;/code&gt; sample code. The first, &lt;code&gt;RSocketClientToSecuredServerITest.java&lt;/code&gt; uses the &lt;code&gt;test&lt;/code&gt; user credentials from the &lt;code&gt;RSocketSecurityConfig&lt;/code&gt; class to confirm that the server-side methods are not accessible to users who don&amp;rsquo;t have the &lt;code&gt;USER&lt;/code&gt; role. The test method code looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;    @Test&#xD;
    public void testFireAndForget() {&#xD;
        // Send a fire-and-forget message&#xD;
        Mono&amp;lt;Void&amp;gt; result = requester&#xD;
                .route(&amp;quot;fire-and-forget&amp;quot;)&#xD;
                .data(new Message(&amp;quot;TEST&amp;quot;, &amp;quot;Fire-And-Forget&amp;quot;))&#xD;
                .retrieveMono(Void.class);&#xD;
&#xD;
        // Assert that the user &amp;#39;test&amp;#39; is DENIED access to the method.&#xD;
        StepVerifier&#xD;
                .create(result)&#xD;
                .verifyErrorMessage(&amp;quot;Denied&amp;quot;); // (1)&#xD;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The test asserts that the result of the fire and forget call should be an exception stating that the user is &amp;ldquo;Denied&amp;rdquo; access (1).&lt;/p&gt;
&lt;p&gt;The other new test asserts that users with fake credentials can&amp;rsquo;t obtain an RSocket connection. The code for this test is in the file &lt;code&gt;RSocketClientDeniedConnectionToSecuredServerITest.java&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And finally, feel free to try the updated &lt;code&gt;rsocket-client&lt;/code&gt; at the command line. You can login using the various credentials and try accessing the server-side methods for yourself. &lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint bash"&gt;cd rsocket-client&#xD;
./mvnw clean package spring-boot:run&#xD;
&#xD;
# To get help with all the available commands&#xD;
shell:&amp;gt; help&#xD;
&#xD;
# To access to all features.&#xD;
shell:&amp;gt; login user pass &#xD;
&#xD;
# To access no features.&#xD;
shell:&amp;gt; login test pass&#xD;
&#xD;
# To exit the client&#xD;
shell:&amp;gt; exit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&amp;rsquo;s it for this tour of RSocket and Spring Security. I hope you found it useful. You can also see how Josh Long handles the same topic in &lt;a href="https://youtu.be/ER-mbWp2xYg"&gt;this Spring Tips video&lt;/a&gt;. As usual, feel free to like, share, and leave a comment below. For future news and updates, why not &lt;a href="https://twitter.com/benbravo73"&gt;follow me on Twitter&lt;/a&gt;?&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Tips: Spring and GraalVM (pt. 2)</title>
    <link rel="alternate" href="https://spring.io/blog/2020/06/16/spring-tips-spring-and-graalvm-pt-2" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2020-06-17:4109</id>
    <updated>2020-06-16T23:50:00Z</updated>
    <content type="html">&lt;p&gt;speaker: &lt;a href="http://twitter.com/starbuxman"&gt;Josh Long (@starbuxman)&lt;/a&gt;&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/aTNLtU5YYtg" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;Hi Spring fans! Welcome to a very special, interregnum episode of Spring Tips where we revisit Spring and GraalVM native images. I wanted to get this video out in light of the recent &lt;a href="https://spring.io/blog/2020/06/10/the-path-towards-spring-boot-native-applications"&gt;Spring Graal 0.7.1&lt;/a&gt; release which &lt;em&gt;drastically&lt;/em&gt; simplifies things even compared to the last time we looked at Spring and Graal &lt;em&gt;waaay&lt;/em&gt; &lt;a href="https://spring.io/blog/2020/04/16/spring-tips-the-graalvm-native-image-builder-feature"&gt;back in April 2020&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;TL;DR: GraalVm is a JIT replacement that you can use with a stock-standard JVM, and that&amp;rsquo;s worth looking into in its own right. GraalVM &lt;em&gt;also&lt;/em&gt; offers a separate feature supporting native image compilation. This &lt;code&gt;native-image&lt;/code&gt; builder takes bytecode and turns it into an architecture-specific binary that sheds the JVM and embeds something called SubstrateVM. Native images are &lt;em&gt;fast&lt;/em&gt; to startup and they take &lt;em&gt;way&lt;/em&gt; less memory at runtime. These qualities make it desirable in a containerized, cloud-centric environment. &lt;/p&gt;
&lt;p&gt;In the April installment, I had to write out heaps of hand-crafted artisanal configuration. In this latest edition, it&amp;rsquo;s possible to get a huge swath of applications working without variable configuration. In the video, I demonstrated how to get a Spring Data JPA (with Hibernate) and Apache Tomcat working. I also demonstrated how to get a reactive application working. Let&amp;rsquo;s look at the reactive application first and then we&amp;rsquo;ll look at the JPA example. The steps we&amp;rsquo;ll take in the first example are common to most applications. &lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re going to use GraalVM and Java 8 for this project. I&amp;rsquo;m using SDKManager to install various versions of Java: &lt;code&gt;sdk install java 20.1.0.r8-grl&lt;/code&gt;. Then, you can optionally make it the default: &lt;code&gt;sdk default java 20.1.0.r8-grl&lt;/code&gt;. You&amp;rsquo;ll also need to install the native image builder into your GraalVM installation. Use &lt;code&gt;gu install native-image&lt;/code&gt;. Now we can build the application. &lt;/p&gt;&lt;h2&gt;&lt;a href="#a-reactive-example" class="anchor" name="a-reactive-example"&gt;&lt;/a&gt;A Reactive Example&lt;/h2&gt;
&lt;p&gt;First, go to &lt;a href="http://start.Spring.io"&gt;the Spring Initializr&lt;/a&gt; and generate a new project with &lt;code&gt;R2DBC&lt;/code&gt;, &lt;code&gt;Lombok&lt;/code&gt;, &lt;code&gt;H2&lt;/code&gt;, &lt;code&gt;Reactive Web&lt;/code&gt; and use Java 8. &lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ve seen the Java code before:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;package com.example.reactive;&#xD;
&#xD;
import lombok.AllArgsConstructor;&#xD;
import lombok.Data;&#xD;
import lombok.NoArgsConstructor;&#xD;
import lombok.RequiredArgsConstructor;&#xD;
import org.springframework.boot.SpringApplication;&#xD;
import org.springframework.boot.autoconfigure.SpringBootApplication;&#xD;
import org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration;&#xD;
import org.springframework.boot.context.event.ApplicationReadyEvent;&#xD;
import org.springframework.context.ApplicationListener;&#xD;
import org.springframework.data.annotation.Id;&#xD;
import org.springframework.data.r2dbc.core.DatabaseClient;&#xD;
import org.springframework.data.repository.reactive.ReactiveCrudRepository;&#xD;
import org.springframework.stereotype.Component;&#xD;
import org.springframework.web.bind.annotation.GetMapping;&#xD;
import org.springframework.web.bind.annotation.RestController;&#xD;
import reactor.core.publisher.Flux;&#xD;
&#xD;
@SpringBootApplication(&#xD;
        exclude = SpringDataWebAutoConfiguration.class,&#xD;
        proxyBeanMethods = false&#xD;
)&#xD;
public class ReactiveApplication {&#xD;
&#xD;
    public static void main(String[] args) {&#xD;
        SpringApplication.run(ReactiveApplication.class, args);&#xD;
    }&#xD;
&#xD;
}&#xD;
&#xD;
&#xD;
@RestController&#xD;
@RequiredArgsConstructor&#xD;
class CustomerRestController {&#xD;
&#xD;
    private final CustomerRepository customerRepository;&#xD;
&#xD;
    @GetMapping(&amp;quot;/customers&amp;quot;)&#xD;
    Flux&amp;lt;Customer&amp;gt; customers() {&#xD;
        return this.customerRepository.findAll();&#xD;
    }&#xD;
}&#xD;
&#xD;
@Component&#xD;
@RequiredArgsConstructor&#xD;
class Initializer implements ApplicationListener&amp;lt;ApplicationReadyEvent&amp;gt; {&#xD;
&#xD;
    private final CustomerRepository customerRepository;&#xD;
&#xD;
    private final DatabaseClient databaseClient;&#xD;
&#xD;
    @Override&#xD;
    public void onApplicationEvent(ApplicationReadyEvent applicationReadyEvent) {&#xD;
        Flux&amp;lt;Customer&amp;gt; save = Flux.just(&amp;quot;Madhura&amp;quot;, &amp;quot;Dr. Syer&amp;quot;)&#xD;
                .map(name -&amp;gt; new Customer(null, name))&#xD;
                .flatMap(this.customerRepository::save);&#xD;
&#xD;
        String sql = &amp;quot;create table CUSTOMER(id serial primary key, name varchar(255))&amp;quot;;&#xD;
&#xD;
        this.databaseClient&#xD;
                .execute(sql)&#xD;
                .fetch()&#xD;
                .rowsUpdated()&#xD;
                .thenMany(save)&#xD;
                .thenMany(this.customerRepository.findAll())&#xD;
                .subscribe(System.out::println);&#xD;
    }&#xD;
}&#xD;
&#xD;
interface CustomerRepository extends ReactiveCrudRepository&amp;lt;Customer, Integer&amp;gt; {&#xD;
&#xD;
}&#xD;
&#xD;
@Data&#xD;
@AllArgsConstructor&#xD;
@NoArgsConstructor&#xD;
class Customer {&#xD;
&#xD;
    @Id&#xD;
    private Integer id;&#xD;
    private String name;&#xD;
&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The only thing worth noting, as it pertains to Graal and native images anyway, is that we&amp;rsquo;ve disabled the creation of proxies for &lt;code&gt;@Configuration&lt;/code&gt; class (using &lt;code&gt;proxyBeanMethods = false&lt;/code&gt;) and excluded the &lt;code&gt;SpringDataWebAutoConfiguration.class&lt;/code&gt; Java autoconfiguration. Hopefully, that last bit will be irrelevant in the near-term future. &lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s the application. Start it and you&amp;rsquo;ll see it works. We need to change the build a smidge to accommodate Graal as well. You&amp;rsquo;ll need the snapshot and milestone Spring artifact repositories in your build. &lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint xml"&gt;    &amp;lt;repositories&amp;gt;&#xD;
        &amp;lt;repository&amp;gt;&#xD;
            &amp;lt;id&amp;gt;spring-milestones&amp;lt;/id&amp;gt;&#xD;
            &amp;lt;name&amp;gt;Spring Milestones&amp;lt;/name&amp;gt;&#xD;
            &amp;lt;url&amp;gt;https://repo.spring.io/milestone&amp;lt;/url&amp;gt;&#xD;
        &amp;lt;/repository&amp;gt;&#xD;
        &amp;lt;repository&amp;gt;&#xD;
            &amp;lt;id&amp;gt;spring-snapshots&amp;lt;/id&amp;gt;&#xD;
            &amp;lt;name&amp;gt;Spring Snapshots&amp;lt;/name&amp;gt;&#xD;
            &amp;lt;url&amp;gt;https://repo.spring.io/snapshot&amp;lt;/url&amp;gt;&#xD;
            &amp;lt;snapshots&amp;gt;&#xD;
                &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;&#xD;
            &amp;lt;/snapshots&amp;gt;&#xD;
        &amp;lt;/repository&amp;gt;&#xD;
    &amp;lt;/repositories&amp;gt;&#xD;
    &amp;lt;pluginRepositories&amp;gt;&#xD;
        &amp;lt;pluginRepository&amp;gt;&#xD;
            &amp;lt;id&amp;gt;spring-milestones&amp;lt;/id&amp;gt;&#xD;
            &amp;lt;name&amp;gt;Spring Milestones&amp;lt;/name&amp;gt;&#xD;
            &amp;lt;url&amp;gt;https://repo.spring.io/milestone&amp;lt;/url&amp;gt;&#xD;
        &amp;lt;/pluginRepository&amp;gt;&#xD;
        &amp;lt;pluginRepository&amp;gt;&#xD;
            &amp;lt;id&amp;gt;spring-snapshots&amp;lt;/id&amp;gt;&#xD;
            &amp;lt;name&amp;gt;Spring Snapshots&amp;lt;/name&amp;gt;&#xD;
            &amp;lt;url&amp;gt;https://repo.spring.io/snapshot&amp;lt;/url&amp;gt;&#xD;
            &amp;lt;snapshots&amp;gt;&#xD;
                &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;&#xD;
            &amp;lt;/snapshots&amp;gt;&#xD;
        &amp;lt;/pluginRepository&amp;gt;&#xD;
    &amp;lt;/pluginRepositories&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, add these three Maven dependencies. &lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint xml"&gt;    &amp;lt;dependency&amp;gt;&#xD;
        &amp;lt;groupId&amp;gt;org.springframework.experimental&amp;lt;/groupId&amp;gt;&#xD;
        &amp;lt;artifactId&amp;gt;spring-graalvm-native&amp;lt;/artifactId&amp;gt;&#xD;
        &amp;lt;version&amp;gt;0.7.1&amp;lt;/version&amp;gt;&#xD;
    &amp;lt;/dependency&amp;gt;&#xD;
    &amp;lt;dependency&amp;gt;&#xD;
        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&#xD;
        &amp;lt;artifactId&amp;gt;spring-boot-configuration-processor&amp;lt;/artifactId&amp;gt;&#xD;
        &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt;&#xD;
    &amp;lt;/dependency&amp;gt;&#xD;
    &amp;lt;dependency&amp;gt;&#xD;
        &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;&#xD;
        &amp;lt;artifactId&amp;gt;spring-context-indexer&amp;lt;/artifactId&amp;gt;&#xD;
    &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&amp;rsquo;s it! In the code for this repository, &lt;a href="https://github.com/spring-tips/spring-and-graal-part-2/tree/master/mongodb"&gt;I&amp;rsquo;ve also got a Spring Data MongoDB demonstration as well&lt;/a&gt;. It is a trivial Spring Data MongoDB application that uses Spring MVC. This example requires the exact same dependencies and attributes as the reactive one I&amp;rsquo;ve just shown you. &lt;/p&gt;
&lt;p&gt;Now we&amp;rsquo;ll need to compile it. First, run the normal &lt;code&gt;mvn clean package&lt;/code&gt;. Then, we&amp;rsquo;ll need to pass the &lt;code&gt;.jar&lt;/code&gt; into the Graal &lt;code&gt;native-image&lt;/code&gt; builder. I have a script, &lt;code&gt;compile.sh&lt;/code&gt;, that I reuse for all three examples. Here it is.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint shell"&gt;#!/usr/bin/env bash&#xD;
&#xD;
ARTIFACT=${1}&#xD;
MAINCLASS=${2}&#xD;
VERSION=${3}&#xD;
&#xD;
JAR=&amp;quot;${ARTIFACT}-${VERSION}.jar&amp;quot;&#xD;
&#xD;
rm -rf target&#xD;
mkdir -p target/native-image&#xD;
mvn -ntp package  &#xD;
rm -f $ARTIFACT&#xD;
cd target/native-image&#xD;
jar -xvf ../$JAR  &#xD;
cp -R META-INF BOOT-INF/classes&#xD;
&#xD;
LIBPATH=`find BOOT-INF/lib | tr &amp;#39;\n&amp;#39; &amp;#39;:&amp;#39;`&#xD;
CP=BOOT-INF/classes:$LIBPATH&#xD;
GRAALVM_VERSION=`native-image --version`&#xD;
&#xD;
time native-image \&#xD;
  --verbose \&#xD;
  -H:EnableURLProtocols=http \&#xD;
  -H:+RemoveSaturatedTypeFlows \&#xD;
  -H:Name=$ARTIFACT \&#xD;
  -Dspring.native.verbose=true \&#xD;
  -Dspring.native.remove-jmx-support=true \&#xD;
  -Dspring.native.remove-spel-support=true \&#xD;
  -Dspring.native.remove-yaml-support=true \&#xD;
  -cp $CP $MAINCLASS  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you use this script, you need to provide three things: the build artifact, the main-class name, and the version. So, for this application, we can run it like this in the same directory: &lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint shell"&gt;./compile.sh reactive com.example.reactive.ReactiveApplication 0.0.1-SNAPSHOT
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then go make a cup of coffee. A quick one. Because this will take at least three minutes. &lt;/p&gt;&lt;h2&gt;&lt;a href="#jpa" class="anchor" name="jpa"&gt;&lt;/a&gt;JPA&lt;/h2&gt;
&lt;p&gt;Done? Good. Let&amp;rsquo;s build another example, this time using Spring Data JPA (Hibernate) and Spring MVC (with Apache Tomcat). &lt;/p&gt;
&lt;p&gt;Go to the Spring Initializr, generate another project. This time, specify &lt;code&gt;JPA&lt;/code&gt;, &lt;code&gt;H2&lt;/code&gt;, &lt;code&gt;Web&lt;/code&gt; and then click &lt;code&gt;Generate&lt;/code&gt;. Here&amp;rsquo;s the code. &lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;package com.example.jpa;&#xD;
&#xD;
import lombok.AllArgsConstructor;&#xD;
import lombok.Data;&#xD;
import lombok.NoArgsConstructor;&#xD;
import lombok.RequiredArgsConstructor;&#xD;
import org.springframework.boot.SpringApplication;&#xD;
import org.springframework.boot.autoconfigure.SpringBootApplication;&#xD;
import org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration;&#xD;
import org.springframework.boot.context.event.ApplicationReadyEvent;&#xD;
import org.springframework.context.ApplicationListener;&#xD;
import org.springframework.context.annotation.Bean;&#xD;
import org.springframework.data.jpa.repository.JpaRepository;&#xD;
import org.springframework.stereotype.Component;&#xD;
import org.springframework.web.bind.annotation.GetMapping;&#xD;
import org.springframework.web.bind.annotation.RestController;&#xD;
&#xD;
import javax.persistence.Entity;&#xD;
import javax.persistence.GeneratedValue;&#xD;
import javax.persistence.Id;&#xD;
import java.util.Collection;&#xD;
import java.util.stream.Stream;&#xD;
&#xD;
@SpringBootApplication(&#xD;
        exclude = SpringDataWebAutoConfiguration.class,&#xD;
        proxyBeanMethods = false&#xD;
)&#xD;
public class JpaApplication {&#xD;
&#xD;
    public static void main(String[] args) {&#xD;
        SpringApplication.run(JpaApplication.class, args);&#xD;
    }&#xD;
&#xD;
}&#xD;
&#xD;
&#xD;
@RestController&#xD;
@RequiredArgsConstructor&#xD;
class CustomerRestController {&#xD;
&#xD;
    private final CustomerRepository customerRepository;&#xD;
&#xD;
    @GetMapping(&amp;quot;/customers&amp;quot;)&#xD;
    Collection&amp;lt;Customer&amp;gt; customers() {&#xD;
        return this.customerRepository.findAll();&#xD;
    }&#xD;
}&#xD;
&#xD;
@Component&#xD;
@RequiredArgsConstructor&#xD;
class Initializer implements ApplicationListener&amp;lt;ApplicationReadyEvent&amp;gt; {&#xD;
&#xD;
    private final CustomerRepository customerRepository;&#xD;
&#xD;
    @Override&#xD;
    public void onApplicationEvent(ApplicationReadyEvent applicationReadyEvent) {&#xD;
        Stream.of(&amp;quot;Madhura&amp;quot;, &amp;quot;Dr. Syer&amp;quot;)&#xD;
                .map(name -&amp;gt; new Customer(null, name))&#xD;
                .map(this.customerRepository::save)&#xD;
                .forEach(System.out::println);&#xD;
    }&#xD;
}&#xD;
&#xD;
interface CustomerRepository extends JpaRepository&amp;lt;Customer, Integer&amp;gt; {&#xD;
&#xD;
}&#xD;
&#xD;
@Entity&#xD;
@Data&#xD;
@AllArgsConstructor&#xD;
@NoArgsConstructor&#xD;
class Customer {&#xD;
&#xD;
    @Id&#xD;
    @GeneratedValue&#xD;
    private Integer id;&#xD;
    private String name;&#xD;
&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, this application uses JPA (and Hibernate). Hibernate, like Spring, can do a lot of dynamic things at runtime. Graal &lt;em&gt;hates&lt;/em&gt; that. So we need to get Hibernate to enhance the entities in our application at build time. Add the following Maven plugin to your build. &lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint xml"&gt;&amp;lt;plugin&amp;gt;&#xD;
    &amp;lt;groupId&amp;gt;org.hibernate.orm.tooling&amp;lt;/groupId&amp;gt;&#xD;
    &amp;lt;artifactId&amp;gt;hibernate-enhance-maven-plugin&amp;lt;/artifactId&amp;gt;&#xD;
    &amp;lt;version&amp;gt;${hibernate.version}&amp;lt;/version&amp;gt;&#xD;
    &amp;lt;executions&amp;gt;&#xD;
        &amp;lt;execution&amp;gt;&#xD;
            &amp;lt;configuration&amp;gt;&#xD;
                &amp;lt;failOnError&amp;gt;true&amp;lt;/failOnError&amp;gt;&#xD;
                &amp;lt;enableLazyInitialization&amp;gt;true&amp;lt;/enableLazyInitialization&amp;gt;&#xD;
                &amp;lt;enableDirtyTracking&amp;gt;true&amp;lt;/enableDirtyTracking&amp;gt;&#xD;
                &amp;lt;enableExtendedEnhancement&amp;gt;false&amp;lt;/enableExtendedEnhancement&amp;gt;&#xD;
            &amp;lt;/configuration&amp;gt;&#xD;
            &amp;lt;goals&amp;gt;&#xD;
                &amp;lt;goal&amp;gt;enhance&amp;lt;/goal&amp;gt;&#xD;
            &amp;lt;/goals&amp;gt;&#xD;
        &amp;lt;/execution&amp;gt;&#xD;
    &amp;lt;/executions&amp;gt;&#xD;
&amp;lt;/plugin&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The last thing we&amp;rsquo;ll need to do is to tell Hibernate, at runtime, to &lt;em&gt;not&lt;/em&gt; do any enhancement. Create a file, &lt;code&gt;src/main/resources/hibernate.properties&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint properties"&gt;hibernate.bytecode.provider=none
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can compile the application, the same as you did the reactive one, swapping out the main-class. Give it a few minutes. Now you should have two different applications in the &lt;code&gt;target/native-image&lt;/code&gt; directory of each application. Run them. &lt;/p&gt;
&lt;p&gt;On my machine, the &lt;code&gt;reactive&lt;/code&gt; application spins up in 0.106 seconds. The &lt;code&gt;jpa&lt;/code&gt; application starts up in 0.181. Fast startup and - the best part - at runtime, these applications will take &lt;em&gt;tens&lt;/em&gt; of megabytes, not &lt;em&gt;hundreds&lt;/em&gt; (or &lt;em&gt;thousands&lt;/em&gt;) as a typical JVM-based application might. &lt;/p&gt;&lt;h2&gt;&lt;a href="#the-next-steps" class="anchor" name="the-next-steps"&gt;&lt;/a&gt;The Next Steps&lt;/h2&gt;
&lt;p&gt;I can&amp;rsquo;t wait until the Spring Graal 0.8.0 release which will, among other things, baseline on some of the many improvements in Spring Framework 5.3, and possibly include a facility to convert &lt;code&gt;@Configuration&lt;/code&gt;-centric Java configurations into Spring&amp;rsquo;s &amp;ldquo;functional configuration,&amp;rdquo; which requires no proxies or reflection and which is more resource-efficient. I looked at functional configuration in another Spring Tips installment &lt;a href="https://www.youtube.com/watch?v=Q_P28p7XsbQ&amp;t=1s"&gt;more than three years ago&lt;/a&gt;. &lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - June 16th, 2020</title>
    <link rel="alternate" href="https://spring.io/blog/2020/06/16/this-week-in-spring-june-16th-2020" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2020-06-16:4108</id>
    <updated>2020-06-16T23:35:25Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! Welcome to another jam-packed weekly roundup of &lt;em&gt;This Week in Spring&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve got a few upcoming speaking engagements you might be interested in. &lt;a href="https://twitter.com/pieterhumphrey/status/1272331813445185536?s=12"&gt;I&amp;rsquo;ll be speaking (virtually) at the San Francisco JUG on June 24th at 6:30 PM&lt;/a&gt;. Join me! &lt;/p&gt;
&lt;p&gt;Can&amp;rsquo;t make it to the (virtual) SF JUG appearance? &lt;a href="https://twitter.com/odrotbohm/status/1272532914492846086?s=12"&gt;On June 30th, VMware Tanzu (where the Spring team lives) will be hosting one of my workshops, also on Reactive Spring. I&amp;rsquo;m going to cover &lt;em&gt;tons&lt;/em&gt; of stuff: R2DBC, Reactor, Spring WebFlux, Spring WebFn, reactive Spring Data for SQL and NoSQL, RSocket, reactive security, reactive service orchestration, and composition patterns, and more&lt;/a&gt;. This is going to be at an ideal time for EU timezones, so please &lt;a href="https://connect.tanzu.vmware.com/EMEA_FE_WS_Q221_Reactive_Spring_Virtual_Meetup_DE.html"&gt;register now&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/intellijidea/status/1272545509736017920?s=12"&gt;I&amp;rsquo;ll be presenting about &lt;em&gt;Bootiful Testing&lt;/em&gt; for the upcoming Jetbrains Technology Day for Java&lt;/a&gt; on July 10th, 2020 at 10 am-11 am CEST.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll also be doing an &lt;a href="https://spring.io/blog/2020/06/12/upcoming-webinar-bootiful-observability-with-tanzu-wavefront-by-josh-long-and-sushant-dewan"&gt;upcoming webinar on Wavefront-powered observability&lt;/a&gt; with Tanzu Wavefront team member Sushant Dewan on June 24th at 10:00 AM PST. You don&amp;rsquo;t want to miss this!&lt;/p&gt;
&lt;p&gt;Now then, there&amp;rsquo;s a &lt;em&gt;ton&lt;/em&gt; of interesting stuff to review, so let&amp;rsquo;s get to it!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/06/12/spring-boot-2-3-1-available-now"&gt;Spring Boot 2.3.1 available now&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/06/11/a-bootiful-podcast-kubernetes-guru-paul-czarkowski"&gt;A Bootiful Podcast: Kubernetes guru Paul Czarkowski&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/06/11/spring-cloud-data-flow-2-6-0-m1-released"&gt;Spring Cloud Data Flow 2.6.0-M1 Released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/06/11/spring-batch-4-2-4-available-now"&gt;Spring Batch 4.2.4 available now!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/06/11/spring-boot-2-2-8-available-now"&gt;Spring Boot 2.2.8 available now&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/06/11/spring-boot-2-1-15-available-now"&gt;Spring Boot 2.1.15 available now&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/06/10/spring-cloud-app-broker-1-1-1-released"&gt;Spring Cloud App Broker 1.1.1 released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/06/10/spring-data-neumann-sr1-moore-sr8-and-lovelace-sr18-available-now"&gt;Spring Data Neumann SR1, Moore SR8, and Lovelace SR18 available now&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/06/10/the-path-towards-spring-boot-native-applications"&gt;The path towards Spring Boot native applications&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/springcloud/status/1273021816114642950"&gt;Do not miss this upcoming Spring Cloud for Kubernetes workshop with Ryan Baxter and Dr. Dave Syer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;This year, SpringOne is coming to &lt;a href="https://t.co/xX8RBAmxwb"&gt;you?no matter where you are&lt;/a&gt;. Join us the week of September 1 for an all-new virtual experience featuring the content and speakers you love at a special cost: NO COST.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/RabbitMQ/status/1272874367068909569"&gt;RabbitMQ 3.8.5&lt;/a&gt; is out with a bunch of bug fixes and complete Erlang 23 compatibility.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/sdeleuze/status/1272609551016230920?s=12"&gt;Spring GraalVM Native 0.7.1 is now available and is built against&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;These are oldie-but-goodies, but well worth a read if you haven&amp;rsquo;t. First up, Sergei Egorov&amp;rsquo;s &lt;a href="https://bsideup.github.io/posts/daily_reactive/context_loss_detection/"&gt;&lt;em&gt;Daily Reactive&lt;/em&gt;: Context loss detection in Project Reactor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Then, this amazing post on &lt;a href="https://bsideup.github.io/posts/spring_boot_in_container/"&gt;end-to-end testing your Spring Boot 2.3.0 apps with Testcontainers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;And then finally this post on &lt;a href="https://bsideup.github.io/posts/local_development_with_testcontainers/"&gt;&lt;em&gt;Local development with Testcontainers&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Here&amp;rsquo;s an interesting video from Spring team member Greg Turnquist where you can watch him code a feature &lt;a href="https://www.youtube.com/watch?v=B3m-sS5HXLY&amp;app=desktop"&gt;(Part 1)&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/david_syer/status/1272478501128601600?s=12"&gt;The good Dr. Dave Syer has a handy little script you can use if you want to migrate your Git repositories from using &lt;code&gt;master&lt;/code&gt; to some other name, like &lt;code&gt;main&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/errcraft/status/1270405828596494337?s=12"&gt;Netbeans 12 is out&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://blog.trifork.com/2020/05/26/i-used-springs-resttemplate-to-fetch-some-json-and-you-wont-believe-what-happened-next/"&gt;I used Spring¡¯s RestTemplate to fetch some JSON, and you won¡¯t believe what happened next! - Trifork Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.cloudfoundry.org/events/summit/"&gt;The Cloud Foundry Summit&lt;/a&gt; is just around the corner. Join us virtually on Wednesday, June 24 and Thursday, June 25 to see how Cloud Foundry is changing the world&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://inside.java/2020/06/14/sharat-on-25th-celebrations/"&gt;Sharat Chander on the Java Community and the Ongoing 25th Anniversary Celebrations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://j.mp/3fdSa0M"&gt;JDK 15 has been forked from the mainline and is now in Ramp down Phase One&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The next segment of the SpringOne Tour kicks off June 24-25! Register to tour the landscape of new #Kubernetes-centric tooling, &lt;a href="https://t.co/pCE7yHYXkb"&gt;including Tekton, Kustomize, and ArgoCD&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://medium.com/@lombos.monika/distributed-tracing-latency-analysis-for-microservices-4ae3b82f3537"&gt;Distributed Tracing &amp;amp; Latency Analysis for Microservices&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Microsoft&amp;rsquo;s Julien Dubois and I did a presentation, &lt;a href="https://www.infoq.com/presentations/azure-spring-cloud/"&gt;&lt;em&gt;Bootiful Azure Spring Cloud&lt;/em&gt;&lt;/a&gt;, which is now available online.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/confluentinc/examples/tree/latest/clients/cloud/java-springboot"&gt;Use Spring Boot to write an Apache Kafka client application to Confluent Cloud&lt;/a&gt;. With the promo code C50INTEG, you can easily get started with an additional $50 of free Confluent Cloud usage.&lt;/li&gt;
  &lt;li&gt;Spring Cloud co-founder &lt;a href="https://www.youtube.com/watch?v=ljfarj4cje4&amp;feature=share"&gt;Spencer Gibb talks RSocketIO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Boot for Apache Geode &amp; VMware GemFire 1.1.8.RELEASE and 1.2.8.RELEASE available!</title>
    <link rel="alternate" href="https://spring.io/blog/2020/06/16/spring-boot-for-apache-geode-vmware-gemfire-1-1-8-release-and-1-2-8-release-available" />
    <category term="releases" label="Releases" />
    <author>
      <name>John Blum</name>
    </author>
    <id>tag:spring.io,2020-06-16:4107</id>
    <updated>2020-06-16T23:01:56Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;On behalf of the Spring, Apache Geode and VMware GemFire communities, it is my pleasure to announce the release of &lt;em&gt;Spring Boot for  Apache Geode &amp;amp; VMware GemFire&lt;/em&gt; (SBDG) &lt;code&gt;1.1.8.RELEASE&lt;/code&gt; and &lt;code&gt;1.2.8.RELEASE&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;SBDG &lt;code&gt;1.1.8.RELEASE&lt;/code&gt; is based on Spring Boot &lt;code&gt;2.1.15.RELEASE&lt;/code&gt; and SBDG &lt;code&gt;1.2.8.RELEASE&lt;/code&gt; is based on Spring Boot &lt;code&gt;2.2.8.RELEASE&lt;/code&gt;.  Bits for both releases are &lt;a href="https://repo1.maven.org/maven2/org/springframework/geode/spring-geode-starter/"&gt;available&lt;/a&gt; in Maven Central.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;As a friendly reminder, please refer to the &lt;a href="https://github.com/spring-projects/spring-boot-data-geode/wiki/Spring-Boot-for-Apache-Geode-and-Pivotal-GemFire-Version-Compatibility-Matrix#version-compatibility-matrix"&gt;Version Compatibility Matrix&lt;/a&gt; to see how SBDG aligns with Spring, Apache Geode and VMware GemFire versions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;SBDG &lt;code&gt;1.1.x&lt;/code&gt; is fixed on Spring Data Lovelace, which is in support until October 2020.  However, given SBDG &lt;code&gt;1.1.x&lt;/code&gt; is based on Spring Data Lovelace, which is based on Apache Geode 1.6.0 and VMware GemFire 9.5.4, both of which have reached their EOL, the SBDG &lt;code&gt;1.1.x&lt;/code&gt; release line will effectively only pick up dependency updates until October when SD Lovelace reaches EOL.  No new development is happening SBDG &lt;code&gt;1.1.x&lt;/code&gt;.  You are therefore encouraged to upgrade to SBDG &lt;code&gt;1.2.8.RELEASE&lt;/code&gt; or &lt;code&gt;1.3.0.RELEASE&lt;/code&gt; as soon as possible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;You can start a new Spring Boot &lt;code&gt;2.2.8.RELEASE&lt;/code&gt; project using Apache Geode at &lt;a href="https://start.spring.io/#!platformVersion=2.2.8.RELEASE&amp;amp;dependencies=geode"&gt;start.spring.io&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;See the &lt;a href="https://github.com/spring-projects/spring-boot-data-geode/blob/1.2.8.RELEASE/spring-geode/src/main/resources/changelog.txt#L7-L29"&gt;changelog&lt;/a&gt; for more details.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="feedback"&gt;&lt;a class="anchor" href="#feedback"&gt;&lt;/a&gt;Feedback&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Feedback is welcomed and appreciated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="https://github.com/spring-projects/spring-boot-data-geode/issues"&gt;Issues&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot-data-geode/pulls"&gt;PR&lt;/a&gt; | &lt;a href="https://stackoverflow.com/questions/tagged/spring-boot"&gt;StackOverflow&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Boot for Apache Geode &amp; VMware GemFire 1.3.0.RELEASE Available!</title>
    <link rel="alternate" href="https://spring.io/blog/2020/06/15/spring-boot-for-apache-geode-vmware-gemfire-1-3-0-release-available" />
    <category term="releases" label="Releases" />
    <author>
      <name>John Blum</name>
    </author>
    <id>tag:spring.io,2020-06-15:4105</id>
    <updated>2020-06-15T17:17:38Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;On behalf of the Spring, Apache Geode and VMware GemFire communities, it is my pleasure to announce the release of &lt;em&gt;Spring Boot for Apache Geode and VMware GemFire&lt;/em&gt; (SBDG) &lt;code&gt;1.3.0.RELEASE&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;This release builds on Spring Boot &lt;code&gt;2.3.0.RELEASE&lt;/code&gt; along with the latest Spring Framework (5.2.6), Spring Data (Neumann-GA/2.3.0) and Spring Session (Dragonfruit-GA/2.3.0) bits.  In addition, SBDG &lt;code&gt;1.3.0.RELEASE&lt;/code&gt; pulls in &lt;em&gt;Spring Test for Apache Geode &amp;amp; VMware GemFire&lt;/em&gt; (STDG) &lt;code&gt;0.0.16.RELEASE&lt;/code&gt; giving users more fine-grained control for resource and mock object cleanup.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;You can &lt;a href="https://start.spring.io/#!platformVersion=2.3.0.RELEASE&amp;amp;dependencies=geode"&gt;start&lt;/a&gt; a new Spring Boot project using Apache Geode from &lt;a href="https://start.spring.io"&gt;start.spring.io&lt;/a&gt; using &lt;em&gt;Spring Initializer&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="whats-new"&gt;&lt;a class="anchor" href="#whats-new"&gt;&lt;/a&gt;What&amp;#8217;s New&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The 1.3 GA focused on giving developers the means to load data into the cache during development.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;This puts Spring Boot for Apache Geode on par with Spring Boot&amp;#8217;s support for SQL database initialization. However, SBDG does not stop there!  Additionally, SBDG provides the capability to export data on application shutdown.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Both import and export capabilities are highly useful during development to test, debug and validate the functionality of your Spring Boot applications.  It is also useful for moving data between environments, such as QA back to DEV, for further testing when issues arise.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Learn more about &lt;a href="https://docs.spring.io/spring-boot-data-geode-build/1.3.x/reference/html5/#geode-data-working"&gt;Cache Data Import/Export&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SBDG also includes several useful extensions to Apache Geode&amp;#8217;s API, which have now been formally &lt;a href="https://docs.spring.io/spring-boot-data-geode-build/1.3.x/reference/html5/#geode-api-extensions"&gt;documented&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Additionally, SBDG now includes &lt;a href="https://docs.spring.io/spring-boot-data-geode-build/1.3.x/reference/html5/#geode-docker"&gt;documentation&lt;/a&gt; for running and using Apache Geode in a Docker Container.  This compliments Spring Boot&amp;#8217;s support for containerization as of the 2.3 release line.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;While these are the main highlights from the 1.3 release, you are welcome to review the &lt;a href="https://github.com/spring-projects/spring-boot-data-geode/blob/1.3.0.RELEASE/spring-geode/src/main/resources/changelog.txt#L7-L37"&gt;changelog&lt;/a&gt; for full release details.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="whats-next"&gt;&lt;a class="anchor" href="#whats-next"&gt;&lt;/a&gt;What&amp;#8217;s Next&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Look for a &lt;code&gt;1.3.1.RELEASE&lt;/code&gt; shortly, tentatively scheduled for Weds, 6/24, as we make further refinements to the Cache Data Import/Export feature, such as the ability to specify resource locations on import and export.  This is useful in a managed, cloud environment (e.g. PCF) where a filesystem is not always readily available.  While JSON files can be included in your app JAR for imports, exporting data is a different story.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;While it is not specific to SBDG, the STDG project will include additional refinements to GemFire/Geode resource cleanup between test cases and test classes, enabled with a new annotation, &lt;code&gt;@EnableGemFireGarbageCollector&lt;/code&gt;. This feature will trigger a new STDG release that will be picked up in 1.3.1.  More details to follow.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="conclusion"&gt;&lt;a class="anchor" href="#conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Feedback on this release is welcomed and appreciated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="https://github.com/spring-projects/spring-boot-data-geode/issues"&gt;Issues&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot-data-geode/pulls"&gt;PR&lt;/a&gt; | &lt;a href="https://stackoverflow.com/questions/tagged/spring-data-gemfire"&gt;StackOverflow&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Upcoming Webinar: Bootiful Observability with Tanzu Wavefront by Josh Long and Sushant Dewan</title>
    <link rel="alternate" href="https://spring.io/blog/2020/06/12/upcoming-webinar-bootiful-observability-with-tanzu-wavefront-by-josh-long-and-sushant-dewan" />
    <category term="news" label="News and Events" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2020-06-12:4104</id>
    <updated>2020-06-12T12:25:55Z</updated>
    <content type="html">&lt;p&gt;Need better insight into your Spring Boot Applications? Join Spring Developer Advocate &lt;a href="http://twitter.com/starbuxman"&gt;Josh Long&lt;/a&gt; and Sushant Dewan in a live webinar conversation on June 24th at 10:00 AM PST.&lt;/p&gt;
&lt;p&gt;Get Tanzu Observability tips on how to understand the impact of your code on your application with application maps, metrics, distributed traces, histograms, and span logs analytics!&lt;/p&gt;
&lt;p&gt;Register now &lt;a href="https://tanzu.vmware.com/content/webinars/jun-24-tanzu-observability-tips-for-understanding-your-spring-boot-applications"&gt;for this free, virtual event&lt;/a&gt; you won&amp;rsquo;t want to miss. &lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Boot 2.3.1 available now</title>
    <link rel="alternate" href="https://spring.io/blog/2020/06/12/spring-boot-2-3-1-available-now" />
    <category term="releases" label="Releases" />
    <author>
      <name>Phil Webb</name>
    </author>
    <id>tag:spring.io,2020-06-12:4103</id>
    <updated>2020-06-12T06:35:17Z</updated>
    <content type="html">&lt;p&gt;On behalf of the team and everyone that has contributed, I&amp;rsquo;m happy to announce that Spring Boot 2.3.1 has been released and is now available from &lt;a href="https://repo.spring.io/release"&gt;repo.spring.io&lt;/a&gt; and Maven Central.&lt;/p&gt;
&lt;p&gt;This release includes &lt;a href="https://github.com/spring-projects/spring-boot/releases/tag/v2.3.1.RELEASE"&gt;127 bug fixes, enhancements, documentation improvements, and dependency upgrades&lt;/a&gt;. Thanks to all those who have contributed with issue reports and pull requests.&lt;/p&gt;&lt;h3&gt;&lt;a href="#how-can-you-help" class="anchor" name="how-can-you-help"&gt;&lt;/a&gt;How can you help?&lt;/h3&gt;
&lt;p&gt;If you&amp;rsquo;re interested in helping out, check out the &lt;a href="https://github.com/spring-projects/spring-boot/labels/status%3A%20ideal-for-contribution"&gt;&amp;ldquo;ideal for contribution&amp;rdquo; tag&lt;/a&gt; in the issue repository. If you have general questions, please ask on &lt;a href="http://stackoverflow.com"&gt;stackoverflow.com&lt;/a&gt; using the &lt;a href="http://stackoverflow.com/tags/spring-boot"&gt;&lt;code&gt;spring-boot&lt;/code&gt; tag&lt;/a&gt; or chat with the community on &lt;a href="https://gitter.im/spring-projects/spring-boot"&gt;Gitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://spring.io/projects/spring-boot/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot/issues"&gt;Issues&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-boot/docs/2.3.1.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; | &lt;a href="http://stackoverflow.com/questions/tagged/spring-boot"&gt;Stack Overflow&lt;/a&gt; | &lt;a href="https://gitter.im/spring-projects/spring-boot"&gt;Gitter&lt;/a&gt;&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>A Bootiful Podcast: Kubernetes guru Paul Czarkowski</title>
    <link rel="alternate" href="https://spring.io/blog/2020/06/11/a-bootiful-podcast-kubernetes-guru-paul-czarkowski" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2020-06-11:4102</id>
    <updated>2020-06-11T21:35:59Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! Welcome to another installment of a Bootiful Podcast. In this episode &lt;a href="http://twitter.com/starbuxman"&gt;Josh Long (@starbuxman)&lt;/a&gt; talks to Kubernetes guru and colleague &lt;a href="http://twitter.com/pczarkowski"&gt;Paul Czarkowski (@pczarkowski)&lt;/a&gt; about Austin, TX BBQ, Kubernetes and so much more. &lt;/p&gt;
&lt;iframe title="Kubernetes guru Paul Czarkowski" src="https://www.podbean.com/media/player/rmgrf-df8945-pb?from=share&amp;skin=1&amp;share=1&amp;fonts=Helvetica&amp;download=1&amp;version=1&amp;vjs=1&amp;skin=1" height="315" width="100%" style="border: none;" scrolling="no" data-name="pb-iframe-player"&gt;&lt;/iframe&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Cloud Data Flow 2.6.0-M1 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2020/06/11/spring-cloud-data-flow-2-6-0-m1-released" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Ilayaperumal Gopinathan</name>
    </author>
    <id>tag:spring.io,2020-06-11:4101</id>
    <updated>2020-06-11T17:40:00Z</updated>
    <content type="html">&lt;p&gt;Spring Cloud Data Flow team is pleased to announce the first milestone release of 2.6.0.&lt;/p&gt;
&lt;p&gt;This 2.6.0-M1 adds some bug fixes and the following features:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
  &lt;p&gt;&lt;strong&gt;Composed Task Runner as SCDF native module&lt;/strong&gt;&lt;br/&gt; Composed Task Runner is now an integral part of SCDF itself and gets registered implicitly while the users who have the custom composed task runner can still override the native one. This enables us to integrate the composed tasks management within the context of Spring Cloud Data Flow. This change also allowed us to provide some additional user experiences when managing composed tasks. .&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;&lt;strong&gt;Improvements in task applications management&lt;/strong&gt;&lt;br/&gt;This milestone added some improvements at the backend such as the ability to uniquely identify the task elements inside the composed task, adding task manifest as part of the last ran task definition, ability to cleanup task related resources as part of task definition cleanup along with the SCDF dashboard changes.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;&lt;strong&gt;Liveness/Readiness probes for SCDF/Skipper deployments&lt;/strong&gt;&lt;br/&gt;SCDF/Skipper server Kubernetes deployment configuration files are updated with the liveness/readiness probes which can be customized based on the deployment setup.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;&lt;strong&gt;Bundling SCDF/Skipper DB schema files&lt;/strong&gt;&lt;br/&gt;The DDL scripts for all the supported databases are now bundled and available in the classpath. For the database administrators who want to setup the database without the flyway activated schema management, this bundle would come in handy.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the upcoming release, we look forward to add wavefront monitoring for stream/task application metrics and task scheduling on multiple platforms etc.,&lt;/p&gt;&lt;h2&gt;&lt;a href="#stay-in-touch-hellip" class="anchor" name="stay-in-touch-hellip"&gt;&lt;/a&gt;Stay in touch&amp;hellip;&lt;/h2&gt;
&lt;p&gt;As always, we welcome feedback and contributions, so please reach out to us on &lt;a href="https://stackoverflow.com/questions/tagged/spring-cloud-dataflow"&gt;Stack Overflow&lt;/a&gt; or &lt;a href="https://github.com/spring-cloud/spring-cloud-dataflow/issues"&gt;GitHub&lt;/a&gt; or via &lt;a href="https://gitter.im/spring-cloud/spring-cloud-dataflow"&gt;Gitter&lt;/a&gt;.&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Batch 4.2.4 available now!</title>
    <link rel="alternate" href="https://spring.io/blog/2020/06/11/spring-batch-4-2-4-available-now" />
    <category term="releases" label="Releases" />
    <author>
      <name>Mahmoud Ben Hassine</name>
    </author>
    <id>tag:spring.io,2020-06-11:4097</id>
    <updated>2020-06-11T15:58:00Z</updated>
    <content type="html">&lt;p&gt;I am pleased to announce that Spring Batch 4.2.4 has been released with a number of bug fixes and performance improvements. Please find the complete list of changes in the &lt;a href="https://github.com/spring-projects/spring-batch/releases/tag/4.2.4.RELEASE"&gt;release notes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Please note that due to a glitch in the release process, we had to bump the patch version from 4.2.3 to 4.2.4. Please upgrade to version 4.2.4 at your earliest convenience as this is the primary active branch for the moment.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://spring.io/projects/spring-batch"&gt;Spring Batch Home&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-batch"&gt;Source on GitHub&lt;/a&gt; | &lt;a href="https://docs.spring.io/spring-batch/docs/4.2.x/reference/html/index.html"&gt;Reference Documentation&lt;/a&gt;&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Boot 2.2.8 available now</title>
    <link rel="alternate" href="https://spring.io/blog/2020/06/11/spring-boot-2-2-8-available-now" />
    <category term="releases" label="Releases" />
    <author>
      <name>St?phane Nicoll</name>
    </author>
    <id>tag:spring.io,2020-06-11:4100</id>
    <updated>2020-06-11T14:56:10Z</updated>
    <content type="html">&lt;p&gt;On behalf of the team and everyone who has contributed, I&amp;rsquo;m happy to announce that Spring Boot 2.2.8 has been released and is now available from &lt;a href="https://repo.spring.io/release"&gt;repo.spring.io&lt;/a&gt; and Maven Central.&lt;/p&gt;
&lt;p&gt;This release includes &lt;a href="https://github.com/spring-projects/spring-boot/releases/tag/v2.2.8.RELEASE"&gt;54 bug fixes, enhancements, documentation improvements, and dependency upgrades&lt;/a&gt;. Thanks to all those who have contributed with issue reports and pull requests.&lt;/p&gt;&lt;h3&gt;&lt;a href="#how-can-you-help" class="anchor" name="how-can-you-help"&gt;&lt;/a&gt;How can you help?&lt;/h3&gt;
&lt;p&gt;If you&amp;rsquo;re interested in helping out, check out the &lt;a href="https://github.com/spring-projects/spring-boot/labels/status%3A%20ideal-for-contribution"&gt;&amp;ldquo;ideal for contribution&amp;rdquo; tag&lt;/a&gt; in the issue repository. If you have general questions, please ask on &lt;a href="http://stackoverflow.com"&gt;stackoverflow.com&lt;/a&gt; using the &lt;a href="http://stackoverflow.com/tags/spring-boot"&gt;&lt;code&gt;spring-boot&lt;/code&gt; tag&lt;/a&gt; or chat with the community on &lt;a href="https://gitter.im/spring-projects/spring-boot"&gt;Gitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://spring.io/projects/spring-boot/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot/issues"&gt;Issues&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-boot/docs/2.2.8.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; | &lt;a href="http://stackoverflow.com/questions/tagged/spring-boot"&gt;Stack Overflow&lt;/a&gt; | &lt;a href="https://gitter.im/spring-projects/spring-boot"&gt;Gitter&lt;/a&gt;&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Boot 2.1.15 available now</title>
    <link rel="alternate" href="https://spring.io/blog/2020/06/11/spring-boot-2-1-15-available-now" />
    <category term="releases" label="Releases" />
    <author>
      <name>St?phane Nicoll</name>
    </author>
    <id>tag:spring.io,2020-06-11:4098</id>
    <updated>2020-06-11T11:09:08Z</updated>
    <content type="html">&lt;p&gt;On behalf of the team and everyone who has contributed, I&amp;rsquo;m happy to announce that Spring Boot 2.1.15 has been released and is now available from &lt;a href="https://repo.spring.io/release"&gt;repo.spring.io&lt;/a&gt; and Maven Central.&lt;/p&gt;
&lt;p&gt;This release includes &lt;a href="https://github.com/spring-projects/spring-boot/releases/tag/v2.1.15.RELEASE"&gt;25 bug fixes, enhancements, documentation improvements, and dependency upgrades&lt;/a&gt;. Thanks to all those who have contributed with issue reports and pull requests.&lt;/p&gt;&lt;h3&gt;&lt;a href="#how-can-you-help" class="anchor" name="how-can-you-help"&gt;&lt;/a&gt;How can you help?&lt;/h3&gt;
&lt;p&gt;If you&amp;rsquo;re interested in helping out, check out the &lt;a href="https://github.com/spring-projects/spring-boot/labels/status%3A%20ideal-for-contribution"&gt;&amp;ldquo;ideal for contribution&amp;rdquo; tag&lt;/a&gt; in the issue repository. If you have general questions, please ask on &lt;a href="http://stackoverflow.com"&gt;stackoverflow.com&lt;/a&gt; using the &lt;a href="http://stackoverflow.com/tags/spring-boot"&gt;&lt;code&gt;spring-boot&lt;/code&gt; tag&lt;/a&gt; or chat with the community on &lt;a href="https://gitter.im/spring-projects/spring-boot"&gt;Gitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://spring.io/projects/spring-boot/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot/issues"&gt;Issues&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-boot/docs/2.1.15.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; | &lt;a href="http://stackoverflow.com/questions/tagged/spring-boot"&gt;Stack Overflow&lt;/a&gt; | &lt;a href="https://gitter.im/spring-projects/spring-boot"&gt;Gitter&lt;/a&gt;&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Cloud App Broker 1.1.1 released</title>
    <link rel="alternate" href="https://spring.io/blog/2020/06/10/spring-cloud-app-broker-1-1-1-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Gareth Clay</name>
    </author>
    <id>tag:spring.io,2020-06-10:4096</id>
    <updated>2020-06-10T14:07:21Z</updated>
    <content type="html">&lt;p&gt;We are pleased to announce the release of Spring Cloud App Broker 1.1.1. Thanks to the community for your feedback and contributions! This release includes the following fixes and improvements:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Upgrade to Spring Cloud Open Service Broker 3.1.1.RELEASE&lt;/li&gt;
  &lt;li&gt;Upgrade to Spring Boot 2.2.7.RELEASE&lt;/li&gt;
  &lt;li&gt;Upgrade to CF Java Client 4.7.0.RELEASE&lt;/li&gt;
  &lt;li&gt;Upgrade to Spring CredHub 2.1.1.RELEASE&lt;/li&gt;
  &lt;li&gt;Permissions stored in CredHub are now cleaned up on unbind&lt;/li&gt;
  &lt;li&gt;Backing app environment is updated on upgrade&lt;/li&gt;
  &lt;li&gt;Add service instance logging endpoints to support the &lt;a href="https://github.com/pivotal-cf/service-instance-logs-cli-plugin"&gt;service instance logs CF CLI plugin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Fixed an issue where configured backing services were not being deleted&lt;/li&gt;
  &lt;li&gt;Fixed an issue with deletion of permissions from CredHub&lt;/li&gt;
  &lt;li&gt;Add a new logging starter&lt;/li&gt;
  &lt;li&gt;Logging updates to ensure potentially sensitive configuration data is only logged in debug mode&lt;/li&gt;
  &lt;li&gt;Extend the API to allow service instance management operations to be performed without the requirement for the &lt;code&gt;cloud_controller.admin&lt;/code&gt; authority&lt;/li&gt;
  &lt;li&gt;Add documentation on how to create a custom Target&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Gradle:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;implementation(&amp;quot;org.springframework.cloud:spring-cloud-starter-app-broker-cloudfoundry:1.1.1.RELEASE&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Maven:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;&amp;lt;dependency&amp;gt;&#xD;
  &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
  &amp;lt;artifactId&amp;gt;spring-cloud-starter-app-broker-cloudfoundry&amp;lt;/artifactId&amp;gt;&#xD;
  &amp;lt;version&amp;gt;1.1.1.RELEASE&amp;lt;/version&amp;gt;&#xD;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Optionally, if you would like to enable the logging endpoints to support the &lt;a href="https://github.com/pivotal-cf/service-instance-logs-cli-plugin"&gt;service instance logs CF CLI plugin&lt;/a&gt;, additionally add the new logging starter dependency:&lt;/p&gt;
&lt;p&gt;Gradle:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;implementation(&amp;quot;org.springframework.cloud:spring-cloud-starter-app-broker-logging:1.1.1.RELEASE&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Maven:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;&amp;lt;dependency&amp;gt;&#xD;
  &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
  &amp;lt;artifactId&amp;gt;spring-cloud-starter-app-broker-logging&amp;lt;/artifactId&amp;gt;&#xD;
  &amp;lt;version&amp;gt;1.1.1.RELEASE&amp;lt;/version&amp;gt;&#xD;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href="https://spring.io/projects/spring-cloud-app-broker"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-cloud/spring-cloud-app-broker"&gt;GitHub&lt;/a&gt; | &lt;a href="https://docs.spring.io/spring-cloud-app-broker/docs/1.1.1.RELEASE/reference/"&gt;Reference Doc&lt;/a&gt; | &lt;a href="https://docs.spring.io/spring-cloud-app-broker/docs/1.1.1.RELEASE/api/"&gt;API Doc&lt;/a&gt;&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
</feed>
