<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Spring</title>
  <link rel="alternate" href="https://spring.io/blog" />
  <link rel="self" href="https://spring.io/blog.atom" />
  <id>http://spring.io/blog.atom</id>
  <icon>https://spring.io/favicon.ico</icon>
  <updated>2019-11-05T05:28:00Z</updated>
  <entry>
    <title>Spring Data Moore SR1 and Lovelace SR12 released</title>
    <link rel="alternate" href="https://spring.io/blog/2019/11/05/spring-data-moore-sr1-and-lovelace-sr12-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Jens Schauder</name>
    </author>
    <id>tag:spring.io,2019-11-04:3859</id>
    <updated>2019-11-05T05:28:00Z</updated>
    <content type="html">&lt;p&gt;On behalf of the team, I¡¯m pleased to announce Spring Data releases Moore SR1, and Lovelace SR12. All releases pick up the most recent Spring Framework releases and will be picked up by Spring Boot 2.2.1, and 2.1.10 respectively.&lt;/p&gt;&lt;h2&gt;&lt;a href="#moore-sr1" class="anchor" name="moore-sr1"&gt;&lt;/a&gt;Moore SR1&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Data Commons 2.2.1 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-commons/2.2.1.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.2.1.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.2.1.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.2.1.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JDBC 1.1.1 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-jdbc/1.1.1.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/1.1.1.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/1.1.1.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/1.1.1.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JPA 2.2.1 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-jpa/2.2.1.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.2.1.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.2.1.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.2.1.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data KeyValue 2.2.1 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-keyvalue/2.2.1.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.2.1.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.2.1.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.2.1.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Gemfire 2.2.1 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-gemfire/2.2.1.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/gemfire/docs/2.2.1.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/gemfire/docs/2.2.1.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/gemfire/docs/2.2.1.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Neo4j 5.2.1 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-neo4j/5.2.1.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/5.2.1.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/5.2.1.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/5.2.1.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data MongoDB 2.2.1 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-mongodb/2.2.1.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/2.2.1.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/2.2.1.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/2.2.1.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Cassandra 2.2.1 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-cassandra/2.2.1.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/2.2.1.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/2.2.1.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/2.2.1.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Solr 4.1.1 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-solr/4.1.1.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/4.1.1.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/4.1.1.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/4.1.1.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Geode 2.2.1 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-geode/2.2.1.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.2.1.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.2.1.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.2.1.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data LDAP 2.2.1 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-ldap/2.2.1.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.2.1.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.2.1.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.2.1.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Envers 2.2.1 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-envers/2.2.1.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.2.1.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.2.1.RELEASE/reference/html"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data REST 3.2.1 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-rest-webmvc/3.2.1.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.2.1.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.2.1.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.2.1.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Redis 2.2.1 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-redis/2.2.1.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.2.1.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.2.1.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.2.1.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Elasticsearch 3.2.1 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-elasticsearch/3.2.1.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/3.2.1.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/3.2.1.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/3.2.1.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Couchbase 3.2.1 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-couchbase/3.2.1.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/3.2.1.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/3.2.1.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/3.2.1.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;&lt;a href="#lovelace-sr12" class="anchor" name="lovelace-sr12"&gt;&lt;/a&gt;Lovelace SR12&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Data Commons 2.1.12 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-commons/2.1.12.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.1.12.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.1.12.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.1.12.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JDBC 1.0.12 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-jdbc/1.0.12.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/1.0.12.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/1.0.12.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/1.0.12.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JPA 2.1.12 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-jpa/2.1.12.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.1.12.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.1.12.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.1.12.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data KeyValue 2.1.12 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-keyvalue/2.1.12.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.1.12.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.1.12.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.1.12.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Gemfire 2.1.12 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-gemfire/2.1.12.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/gemfire/docs/2.1.12.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/gemfire/docs/2.1.12.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/gemfire/docs/2.1.12.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Neo4j 5.1.12 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-neo4j/5.1.12.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/5.1.12.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/5.1.12.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/5.1.12.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data MongoDB 2.1.12 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-mongodb/2.1.12.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/2.1.12.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/2.1.12.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/2.1.12.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Cassandra 2.1.12 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-cassandra/2.1.12.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/2.1.12.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/2.1.12.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/2.1.12.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Solr 4.0.12 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-solr/4.0.12.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/4.0.12.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/4.0.12.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/4.0.12.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Geode 2.1.12 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-geode/2.1.12.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.1.12.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.1.12.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.1.12.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data LDAP 2.1.12 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-ldap/2.1.12.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.1.12.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.1.12.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.1.12.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Envers 2.1.12 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-envers/2.1.12.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.1.12.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.1.12.RELEASE/reference/html"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data REST 3.1.12 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-rest-webmvc/3.1.12.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.1.12.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.1.12.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.1.12.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Redis 2.1.12 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-redis/2.1.12.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.1.12.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.1.12.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.1.12.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Elasticsearch 3.1.12 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-elasticsearch/3.1.12.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/3.1.12.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/3.1.12.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/3.1.12.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Couchbase 3.1.12 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-couchbase/3.1.12.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/3.1.12.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/3.1.12.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/3.1.12.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Security 5.2.1 and 5.1.7 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2019/11/04/spring-security-5-2-1-and-5-1-7-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Josh Cummings</name>
    </author>
    <id>tag:spring.io,2019-11-04:3860</id>
    <updated>2019-11-04T20:55:00Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;On behalf of the community, I&amp;#8217;m pleased to announce the release of Spring Security 5.2.1 (&lt;a href="https://github.com/spring-projects/spring-security/releases/tag/5.2.1.RELEASE"&gt;release notes&lt;/a&gt;) and 5.1.7 (&lt;a href="https://github.com/spring-projects/spring-security/releases/tag/5.1.7.RELEASE"&gt;release notes&lt;/a&gt;). These releases deliver bug fixes along with some minor improvements. Users are encouraged to update to the latest patch release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="http://projects.spring.io/spring-security/"&gt;Project Site&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/"&gt;Reference&lt;/a&gt; | &lt;a href="http://stackoverflow.com/questions/tagged/spring-security"&gt;Help&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Azure Spring Cloud Is Now In Public Preview</title>
    <link rel="alternate" href="https://spring.io/blog/2019/11/04/azure-spring-cloud-is-now-in-public-preview" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2019-11-04:3861</id>
    <updated>2019-11-04T20:25:40Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! Today we&amp;rsquo;re excited to announce that Azure Spring Cloud, the runtime for Spring Boot-based applications and Spring Cloud-based microservices jointly developed by Microsoft and Pivotal, is now in public beta. Anybody can try it out now! &lt;/p&gt;
&lt;p&gt;As customers have moved their workloads to the cloud, we¡¯ve seen a growth in the use of cloud-native architectures, particularly microservices. Microservice-based architectures help improve scalability and velocity, but implementing them can pose challenges. For many Java developers, Spring Boot and Spring Cloud have helped address these challenges, providing a robust platform with well-established patterns for developing and operating microservice applications. &lt;/p&gt;
&lt;p&gt;The trouble is that creating and maintaining Spring Cloud infrastructure - like a service registry, distributed tracing, and distributed configuration - requires administrative work that few organizations are prepared to take on. Spring Cloud gives you the machinery, but it&amp;rsquo;s up to you to figure out how you want things secured, scaled, load-balanced, etc. Azure Spring Cloud is a managed environment built on top of Microsoft Azure with pre-configured, opinionated, ready-to-deploy infrastructure services, and runtime for Spring-based applications. &lt;/p&gt;&lt;h2&gt;&lt;a href="#a-spring-centric-platform" class="anchor" name="a-spring-centric-platform"&gt;&lt;/a&gt;A Spring-centric Platform&lt;/h2&gt;
&lt;p&gt;Suppose you had a typical Spring Cloud-based microservice that depends on configuration in the Spring Cloud Config Server and participates in service registration and discovery using the Spring Cloud Eureka &lt;code&gt;DiscoveryClient&lt;/code&gt; abstraction implementation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;src/main/java/demo/DemoApplication.java&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;&lt;br/&gt;package demo; &#xD;
&#xD;
import org.springframework.beans.factory.annotation.Value;&#xD;
import org.springframework.web.bind.annotation.GetMapping;&#xD;
import org.springframework.web.bind.annotation.RestController;&#xD;
import org.springframework.boot.SpringApplication;&#xD;
import org.springframework.boot.autoconfigure.SpringBootApplication;&#xD;
&#xD;
@SpringBootApplication&#xD;
public class DemoApplication {&#xD;
&#xD;
	public static void main(String[] args) {&#xD;
		SpringApplication.run(DemoApplication.class, args);&#xD;
	}&#xD;
}&#xD;
&#xD;
@RestController&#xD;
class GreetingsRestController {&#xD;
&#xD;
    private final String message;&#xD;
&#xD;
    GreetingsRestController(@Value(&amp;quot;${application.message}&amp;quot;) String msg) {&#xD;
        this.message = msg;&#xD;
    }&#xD;
&#xD;
    @GetMapping(&amp;quot;/hello&amp;quot;)&#xD;
    public String hello() {&#xD;
        return message;&#xD;
    }&#xD;
}&#xD;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This application is, of course, to be accompanied by a property file containing the name of the application as it appears in the service registry:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;src/main/resources/application.properties&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;spring.application.name = account-service
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This demonstration is a trivial application. Still, to get it to production, you&amp;rsquo;d need to set up a Spring Cloud Config Server (complete with security and a Git repository), a Spring Cloud Eureka Server service registry (including horizontal scale-out), and a deployment for the application itself. &lt;/p&gt;
&lt;p&gt;Azure Spring Cloud changes everything. &lt;/p&gt;&lt;h2&gt;&lt;a href="#to-production-hellip-and-beyond" class="anchor" name="to-production-hellip-and-beyond"&gt;&lt;/a&gt;To Production&amp;hellip; And Beyond!&lt;/h2&gt;
&lt;p&gt;To set up the environment, you&amp;rsquo;ll need to set up an Azure Spring Cloud environment.&lt;/p&gt;
&lt;img src="https://pbs.twimg.com/media/EIjfAwUWsAAar-f?format=jpg&amp;name=4096x4096"/&gt;
&lt;p&gt;You can then configure a Spring Cloud Config Server, and its authentication, with ease. &lt;/p&gt;
&lt;img src="https://pbs.twimg.com/media/EIjfAwOWsAEPUeM?format=jpg&amp;name=4096x4096"/&gt;
&lt;p&gt;There is auto-configuration required specifically when deploying our service into production in Azure Spring Cloud. Enable it in your build with a Maven profile, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;	&amp;lt;profiles&amp;gt;&#xD;
		&amp;lt;profile&amp;gt;&#xD;
			&amp;lt;id&amp;gt;cloud&amp;lt;/id&amp;gt;&#xD;
			&amp;lt;repositories&amp;gt;&#xD;
				&amp;lt;repository&amp;gt;&#xD;
					&amp;lt;id&amp;gt;nexus-snapshots&amp;lt;/id&amp;gt;&#xD;
					&amp;lt;url&amp;gt;https://oss.sonatype.org/content/repositories/snapshots/&amp;lt;/url&amp;gt;&#xD;
					&amp;lt;snapshots&amp;gt;&#xD;
						&amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;&#xD;
					&amp;lt;/snapshots&amp;gt;&#xD;
				&amp;lt;/repository&amp;gt;&#xD;
			&amp;lt;/repositories&amp;gt;&#xD;
			&amp;lt;dependencies&amp;gt;&#xD;
				&amp;lt;dependency&amp;gt;&#xD;
					&amp;lt;groupId&amp;gt;com.microsoft.azure&amp;lt;/groupId&amp;gt;&#xD;
					&amp;lt;artifactId&amp;gt;spring-cloud-starter-azure-spring-cloud-client&amp;lt;/artifactId&amp;gt;&#xD;
					&amp;lt;version&amp;gt;2.1.0-SNAPSHOT&amp;lt;/version&amp;gt;&#xD;
				&amp;lt;/dependency&amp;gt;&#xD;
			&amp;lt;/dependencies&amp;gt;&#xD;
		&amp;lt;/profile&amp;gt;&#xD;
	&amp;lt;/profiles&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Build the application using Maven, activating the Maven &lt;code&gt;cloud&lt;/code&gt; profile:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;mvn -Pcloud clean package 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can now deploy the application using the Azure CLI, &lt;code&gt;az&lt;/code&gt;: &lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;az spring-cloud app create -n demo-app # create the logical application &#xD;
az spring-cloud app deploy -n demo-app --jar-path target/demo-0.0.1-SNAPSHOT.jar # deploy the Boot .jar
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you&amp;rsquo;ve deployed the application, you can see that it&amp;rsquo;s discoverable through the managed service registry on Azure Spring Cloud, such as these applications in various states:&lt;/p&gt;
&lt;img src="https://pbs.twimg.com/media/EIjfAwSXUAIieQv?format=jpg&amp;name=4096x4096"/&gt;&lt;h2&gt;&lt;a href="#what-rsquo-s-next" class="anchor" name="what-rsquo-s-next"&gt;&lt;/a&gt;What&amp;rsquo;s Next&lt;/h2&gt;
&lt;p&gt;What does this mean for you? Well, it&amp;rsquo;s just the beginning! Microsoft Azure is a vibrant platform offering competitive prices, more regions than any other IaaS provider in the world, and a production-minded environment for Spring-based applications. We&amp;rsquo;ve introduced some of the features in Azure Spring Cloud in this post. However, you can still exploit the richness of the larger Azure platform from your Azure Spring Cloud-based applications, and you can leverage the Spring Cloud Azure open-source project to make binding to Azure-managed services a snap. The services are what is most enticing to me. For your next steps, you might explore the tight integration with Spring Security and Active Directory, or the reactive Spring Data support for Azure CosmosDB, or the reactive R2DBC integration for Microsoft SQL Server, fully managed on Microsoft Azure. &lt;/p&gt;
&lt;p&gt;There are some great resources for you to pursue. You can walk through a much more &lt;a href="https://github.com/microsoft/azure-spring-cloud-training"&gt;exhaustive training here&lt;/a&gt;, and you can see some samples on how to &lt;a href="https://github.com/Azure-Samples/azure-spring-cloud"&gt;deploy and scale-up applications here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;And, of course, if you&amp;rsquo;d like to learn more about Azure Spring Cloud, then you should not miss this talk that Microsoft&amp;rsquo;s &lt;a href="https://twitter.com/juliendubois"&gt;Julien Dubois&lt;/a&gt; and &lt;a href="http://twitter.com/Starbuxman"&gt;I&lt;/a&gt; presented at the recent SpringOne Platform 2019 show! &lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/WAuGojnf2lA" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;See you in production! &lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Cloud Stream - Composed Functions or EIP</title>
    <link rel="alternate" href="https://spring.io/blog/2019/11/04/spring-cloud-stream-composed-functions-or-eip" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Oleg Zhurakousky</name>
    </author>
    <id>tag:spring.io,2019-11-01:3857</id>
    <updated>2019-11-04T16:20:12Z</updated>
    <content type="html">&lt;p&gt;In preparation for the upcoming releases of Spring Cloud Stream (SCSt) 3.0.0 - Horsham and Spring Cloud Function (SCF) 3.0.0, we¡¯ve been publishing a series of posts discussing and showcasing new features and enhancements.&lt;br/&gt;We provided &lt;a href="https://spring.io/blog/2019/10/14/spring-cloud-stream-demystified-and-simplified"&gt;motivation and justification for moving away from the annotation-based programming model to the functional model&lt;/a&gt;, and then we provided more details on the &lt;a href="https://spring.io/blog/2019/10/17/spring-cloud-stream-functional-and-reactive"&gt;functional approach, as well as reactive functions&lt;/a&gt;.&lt;br/&gt;In &lt;a href="https://spring.io/blog/2019/10/25/spring-cloud-stream-and-spring-integration"&gt;another post&lt;/a&gt;, which is relevant to what we&amp;rsquo;re going to be discussing here, Artem demonstrated the benefits of combining functional approaches with the &lt;a href="https://spring.io/projects/spring-integration"&gt;Spring Integration&lt;/a&gt; project. We also talked about &lt;a href="https://spring.io/blog/2019/10/31/spring-cloud-stream-event-routing"&gt;event routing&lt;/a&gt; in our last post.&lt;/p&gt;
&lt;p&gt;In this post, we discuss function composition and &lt;a href="https://www.enterpriseintegrationpatterns.com/"&gt;Enterprise Integration Patterns&lt;/a&gt; (EIP), their commonalities, their differences, and how one can complement the other in the context of SCSt.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&amp;ldquo;There is no such a thing as a complex problem, since every complex problem is nothing more than an array of simple problems.&amp;rdquo;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;h3&gt;&lt;a href="#function-composition" class="anchor" name="function-composition"&gt;&lt;/a&gt;Function Composition&lt;/h3&gt;
&lt;p&gt;Function composition is a &lt;a href="https://github.com/spring-cloud/spring-cloud-function/blob/master/docs/src/main/asciidoc/spring-cloud-function.adoc#function-composition"&gt;feature of SCF&lt;/a&gt; that lets you compose several functions together in a declarative way.&lt;br/&gt;The following example shows how to do so:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;--spring.cloud.function.definition=uppercase|reverse
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, we effectively provided a definition of a single function that is itself a composition of a function named &lt;code&gt;uppercase&lt;/code&gt; and a function named &lt;code&gt;reverse&lt;/code&gt;. You can also argue that we&amp;rsquo;ve &lt;em&gt;orchestrated&lt;/em&gt; a simple pipeline consisting of running the &lt;code&gt;uppercase&lt;/code&gt; function and then sending its output to the &lt;code&gt;reverse&lt;/code&gt; function. The term &lt;em&gt;orchestration&lt;/em&gt; is important here, and we cover it in more detail later in the post.&lt;/p&gt;&lt;h3&gt;&lt;a href="#enterprise-integration-patterns-eip" class="anchor" name="enterprise-integration-patterns-eip"&gt;&lt;/a&gt;Enterprise Integration Patterns (EIP)&lt;/h3&gt;
&lt;p&gt;Enterprise Integration Patterns is a set of patterns that let you describe a business case as a collection of clearly defined and well understood patterns. Some examples are &lt;em&gt;filter&lt;/em&gt;, &lt;em&gt;transformer&lt;/em&gt;, &lt;em&gt;router&lt;/em&gt;, and so on.&lt;br/&gt;For more details on EIP, see &lt;a href="https://www.enterpriseintegrationpatterns.com"&gt;this link&lt;/a&gt;. Spring provides a reference implementation of EIP thru &lt;a href="https://spring.io/projects/spring-integration"&gt;Spring Integration&lt;/a&gt; framework.&lt;br/&gt;For example, by using the same two function example as before, we can construct a pipeline that uses SI&amp;rsquo;s Java DSL, as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;IntegrationFlow.fromChannel(inputChannel)&#xD;
        .transform(uppercase)&#xD;
        .transform(reverse);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more on SI&amp;rsquo;s Java DSL, see the &lt;a href="https://docs.spring.io/spring-integration/docs/5.2.0.RELEASE/reference/html/dsl.html#java-dsl"&gt;Java DSL documentation&lt;/a&gt; as well as this &lt;a href="https://spring.io/blog/2014/11/25/spring-integration-java-dsl-line-by-line-tutorial"&gt;quick tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The core point here is that we&amp;rsquo;ve just demonstrated two ways of addressing the same problem thru orchestrating a pipeline. Both can be looked at as orchestrators of complex functionality:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Orchestration by composition&lt;/em&gt;: You get a single function.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Orchestration by delegation&lt;/em&gt;: You get some kind of a flow.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Why is this important?&lt;br/&gt;As stated earlier, &lt;em&gt;there is no such a thing as a complex problem, since every complex problem is nothing more than an array of simple problems&lt;/em&gt;. So complexity is a composition. However, even complexity can be looked at as something straight forward or something complex. Let¡¯s look at few use cases to set the context:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;a) Consider a case where you need to compute something &amp;hellip; and save it to the DB.&lt;/li&gt;
  &lt;li&gt;b) Consider another case where you need to compute something, but, if some attribute is missing or not ready, you need to send it back for more information and then compute again (if enough information has been provided) and then save it to a DB.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the spirit of breaking complexity into simplicity, the first case can be broken down into two services in sequence: &lt;em&gt;compute -&amp;gt; save&lt;/em&gt; (similar to our previous &lt;em&gt;uppercase -&amp;gt; reverse&lt;/em&gt; example). The second case, while similar, contains a decision point that can then trigger a loop-back that contains some type of additional service call (and so on). In other words, it is not as straightforward as simple &lt;em&gt;compute -&amp;gt; save&lt;/em&gt;.&lt;/p&gt;&lt;h4&gt;&lt;a href="#spring-integration-or-spring-cloud-function-composition" class="anchor" name="spring-integration-or-spring-cloud-function-composition"&gt;&lt;/a&gt;Spring Integration or Spring Cloud Function Composition?&lt;/h4&gt;
&lt;p&gt;To start, let¡¯s quickly state that EIP and Spring Integration as its implementation can easily handle both use cases. They provide:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Patterns to sequentially hand off the result of one process to another&lt;/li&gt;
  &lt;li&gt;The ability to loop back&lt;/li&gt;
  &lt;li&gt;Route or filter based on some condition&lt;/li&gt;
  &lt;li&gt;Many more options&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On the other hand, SCF, with its function composition feature, can easily handle the first use case and rightfully so. After all, &lt;code&gt;compute -&amp;gt; save&lt;/code&gt; is a collection of functionalities aligned in sequence - &lt;code&gt;computeFunction.andThen(saveFunction).andThen(..)&lt;/code&gt; or using SCF notation &lt;code&gt;computeFunction | saveFunction&lt;/code&gt;.&lt;br/&gt;Also, with SCF composition, it is significantly simpler and more performant, given the differences in the internal implementation between SCF and SI. However, the second use case (which is not fully aligned in a sequence of steps) would be difficult if not impossible to implement with function composition. That is where using a framework such as SI would be the preferred option. &lt;/p&gt;
&lt;p&gt;The good thing is that, when broken down, the complexity could still be realized as functions that are recognized as first class citizens by SCF and SI, as described in &lt;a href="https://spring.io/blog/2019/10/25/spring-cloud-stream-and-spring-integration"&gt;this post&lt;/a&gt; by Artem Bilan. This means that you can defer the decision about your orchestration approach until later to chose SI or SCF or combination of both.&lt;/p&gt;&lt;h4&gt;&lt;a href="#summary" class="anchor" name="summary"&gt;&lt;/a&gt;Summary&lt;/h4&gt;
&lt;p&gt;SCF Composition is suited better for orchestrating functionalities that are aligned in sequence, and SI is the better choice for everything else that fits into the category of EIP.&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Framework 5.2.1 and 5.1.11 available now</title>
    <link rel="alternate" href="https://spring.io/blog/2019/11/04/spring-framework-5-2-1-and-5-1-11-available-now" />
    <category term="releases" label="Releases" />
    <author>
      <name>St?phane Nicoll</name>
    </author>
    <id>tag:spring.io,2019-11-02:3858</id>
    <updated>2019-11-04T12:53:11Z</updated>
    <content type="html">&lt;p&gt;On behalf of the team and everyone who has contributed, I am pleased to announce that Spring Framework 5.2.1 and 5.1.11 are available now.&lt;/p&gt;
&lt;p&gt;The first maintenance release of the 5.2 line includes &lt;a href="https://github.com/spring-projects/spring-framework/releases/tag/v5.2.1.RELEASE"&gt;over 35 fixes and improvements&lt;/a&gt;. Spring Framework 5.1.11 &lt;a href="https://github.com/spring-projects/spring-framework/releases/tag/v5.1.11.RELEASE"&gt;includes 7 selected fixes and improvements&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As usual, we&amp;rsquo;ll follow up shortly with corresponding Spring Boot releases (2.2.1 and 2.1.10).&lt;/p&gt;
&lt;p&gt;&lt;a href="https://projects.spring.io/spring-framework/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-framework"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-framework/issues"&gt;Issues&lt;/a&gt; | &lt;a href="https://docs.spring.io/spring-framework/docs/5.2.1.RELEASE/spring-framework-reference"&gt;Documentation&lt;/a&gt;&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>A Bootiful Podcast: Hibernate guru Vlad Mihalcea</title>
    <link rel="alternate" href="https://spring.io/blog/2019/10/31/a-bootiful-podcast-hibernate-guru-vlad-mihalcea" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2019-10-31:3855</id>
    <updated>2019-10-31T22:22:14Z</updated>
    <content type="html">&lt;iframe width="100%" height="300" scrolling="no" frameborder="no" allow="autoplay" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/706122148&amp;color=%23ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&amp;visual=true"&gt;&lt;/iframe&gt;
&lt;p&gt;Hi Spring fans! in today&amp;rsquo;s episode &lt;a href="http://twitter.com/starbuxman"&gt;Josh Long (@starbuxman)&lt;/a&gt; talks to &lt;a href="http://twitter.com/vlad_mihalcea"&gt;Vlad Mihalcea (@vlad_mihalcea)&lt;/a&gt; about Hibernate, databases, optimizations, and more. &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://twitter.com/vlad_mihalcea"&gt;Vlad on Twitter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://vladmihalcea.com/"&gt;Vlad&amp;rsquo;s blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Cloud Stream - Event Routing</title>
    <link rel="alternate" href="https://spring.io/blog/2019/10/31/spring-cloud-stream-event-routing" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Oleg Zhurakousky</name>
    </author>
    <id>tag:spring.io,2019-10-31:3854</id>
    <updated>2019-10-31T14:33:00Z</updated>
    <content type="html">&lt;p&gt;Welcome to another post in a series of posts showcasing the new features of &lt;a href="https://spring.io/projects/spring-cloud-stream"&gt;Spring Cloud Stream&lt;/a&gt; (SCSt).&lt;br/&gt;In previous posts (available &lt;a href="https://spring.io/blog/2019/10/14/spring-cloud-stream-demystified-and-simplified"&gt;here&lt;/a&gt;, &lt;a href="https://spring.io/blog/2019/10/17/spring-cloud-stream-functional-and-reactive"&gt;here&lt;/a&gt; and &lt;a href="https://spring.io/blog/2019/10/25/spring-cloud-stream-and-spring-integration"&gt;here&lt;/a&gt;), we tried to provide justification for our shift to a functional programming model in Spring Cloud Stream (SCSt). It is less code and less configuration, and your code remains completely decoupled from the internals of SCSt.&lt;/p&gt;
&lt;p&gt;Today, we&amp;rsquo;ll talk about routing with functions.&lt;br/&gt;Routing, in the context of SCSt, is the ability to either &lt;em&gt;a) route events to a particular event subscriber&lt;/em&gt; or &lt;em&gt;b) route an event produced by an event subscriber to a particular destination&lt;/em&gt;. To help more with the context, let&amp;rsquo;s quickly look at how things work in the annotation-based programming model. In this post, we&amp;rsquo;ll refer to it as route &amp;lsquo;TO&amp;rsquo; and route &amp;lsquo;FROM&amp;rsquo;.&lt;/p&gt;
&lt;p&gt;For routing &lt;strong&gt;&lt;em&gt;TO&lt;/em&gt;&lt;/strong&gt; an event subscriber, we used the &lt;code&gt;condition&lt;/code&gt; attribute of the &lt;code&gt;StreamListener&lt;/code&gt; annotation, as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;@StreamListener(target = Sink.INPUT, condition = &amp;quot;headers[&amp;#39;type&amp;#39;]==&amp;#39;order&amp;#39;&amp;quot;)&#xD;
public void receiveOrders(Order order) {...}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-stream/2.1.3.RELEASE/single/spring-cloud-stream.html#_using_streamlistener_for_content_based_routing"&gt;Here&lt;/a&gt; are more details on this approach.&lt;/p&gt;
&lt;p&gt;And, for routing &lt;strong&gt;&lt;em&gt;FROM&lt;/em&gt;&lt;/strong&gt; an event subscriber, we used &lt;a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-stream/2.1.3.RELEASE/single/spring-cloud-stream.html#dynamicdestination"&gt;Dynamically Bound Destinations&lt;/a&gt; - the approach that allows framework to bind to a destination based on some instruction provided within the individual event.&lt;/p&gt;&lt;h2&gt;&lt;a href="#event-routing-with-functions" class="anchor" name="event-routing-with-functions"&gt;&lt;/a&gt;Event Routing with Functions&lt;/h2&gt;
&lt;p&gt;With the functional approach, we can do all of the above in a more clean and concise way with a few additional features.&lt;/p&gt;&lt;h4&gt;&lt;a href="#route-to" class="anchor" name="route-to"&gt;&lt;/a&gt;Route TO:&lt;/h4&gt;
&lt;p&gt;Routing &amp;lsquo;TO&amp;rsquo; functions can be achieved by relying on the routing function feature available in &lt;a href="https://spring.io/projects/spring-cloud-function"&gt;Spring Cloud Function&lt;/a&gt; (SCF).&lt;br/&gt;You can enable routing explicitly by setting the &lt;code&gt;spring.cloud.stream.function.routing.enabled&lt;/code&gt; property or implicitly by setting the &lt;code&gt;spring.cloud.function.routing-expression&lt;/code&gt; property and providing routing instruction with Spring Expression Language (SpEL). The routing instruction should result in the definition of the function to which to route, &amp;lsquo;TO&amp;rsquo;.&lt;br/&gt;For the purposes of binding, the name of the routing destination is &lt;code&gt;functionRouter-in-0&lt;/code&gt; (see &lt;code&gt;RoutingFunction.FUNCTION_NAME&lt;/code&gt; and the binding naming convention described &lt;a href="https://spring.io/blog/2019/10/17/spring-cloud-stream-functional-and-reactive"&gt;here&lt;/a&gt;). &lt;/p&gt;
&lt;p&gt;When a message is sent to this destination, the routing function tries to determine which actual function needs to process such an event. It first tries to access the &lt;code&gt;spring.cloud.function.routing-expression&lt;/code&gt; message header and, if provided, determine the name of the actual function to invoke. This is the most dynamic approach. The second most dynamic approach is to provide a &lt;code&gt;spring.cloud.function.definition&lt;/code&gt; header, which should contain the definition of the function to which to route &amp;lsquo;TO&amp;rsquo;. Both approaches require explicit enablement of routing function by setting the &lt;code&gt;spring.cloud.stream.function.routing.enabled&lt;/code&gt; property.&lt;/p&gt;
&lt;p&gt;As for additional features that were not available in previous versions, the &lt;code&gt;spring.cloud.function.routing-expression&lt;/code&gt; can also be used as application property. For example, consider the case when the expression is the same regardless of the incoming event, as in the annotation-based example shown earlier in this post (for example, &lt;code&gt;spring.cloud.function.routing-expression=headers[&amp;#39;type&amp;#39;]==&amp;#39;order&amp;#39;&lt;/code&gt;). For this approach, you need not explicitly enable a routing function, given that &lt;code&gt;spring.cloud.function.routing-expression&lt;/code&gt; as an application property has the same effect. &lt;/p&gt;
&lt;p&gt;Albeit trivial, the following is a complete example of one of the approaches described above:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;@SpringBootApplication&#xD;
public class RoutingStreamApplication {&#xD;
&#xD;
  public static void main(String[] args) {&#xD;
      SpringApplication.run(RoutingStreamApplication.class,&#xD;
	  &amp;quot;--spring.cloud.function.routing-expression=&amp;quot;&#xD;
	  + &amp;quot;T(java.lang.System).nanoTime() % 2 == 0 ? &amp;#39;even&amp;#39; : &amp;#39;odd&amp;#39;&amp;quot;);&#xD;
  }&#xD;
  @Bean&#xD;
  public Consumer&amp;lt;Integer&amp;gt; even() {&#xD;
    return value -&amp;gt; System.out.println(&amp;quot;EVEN: &amp;quot; + value);&#xD;
  }&#xD;
&#xD;
  @Bean&#xD;
  public Consumer&amp;lt;Integer&amp;gt; odd() {&#xD;
    return value -&amp;gt; System.out.println(&amp;quot;ODD: &amp;quot; + value);&#xD;
  }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By sending a message to the &lt;code&gt;functionRouter-in-0&lt;/code&gt; destination that is exposed by the binder (that is, rabbit or kafka), such a message will be routed to the appropriate (&amp;lsquo;even&amp;rsquo; or &amp;lsquo;odd&amp;rsquo;) &lt;code&gt;Consumer&lt;/code&gt; bean, based on the value of &lt;code&gt;nanoTime()&lt;/code&gt; at the time of message processing. &lt;/p&gt;&lt;h4&gt;&lt;a href="#route-from" class="anchor" name="route-from"&gt;&lt;/a&gt;Route FROM:&lt;/h4&gt;
&lt;p&gt;As before, routing &amp;lsquo;FROM&amp;rsquo; relies on the Dynamically Bound Destinations feature of SCSt. However, as with routing &amp;lsquo;TO&amp;rsquo;, there are a number of additional features. &lt;/p&gt;
&lt;p&gt;The following example shows the basics:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;@Autowired&#xD;
private BinderAwareChannelResolver resolver;&#xD;
&#xD;
public Consumer&amp;lt;String&amp;gt; send(Message message) {   &#xD;
     MessageChannel destination = resolver&#xD;
        .resolveDestination(message.getHeaders().get(&amp;quot;type&amp;quot;))&#xD;
     Message outgoingMessage = . . . // your code&#xD;
     destination.send(outgoingMessage);&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All you need is a reference to &lt;code&gt;BinderAwareChannelResolver&lt;/code&gt; (autowired in the proceeding example). Then you can use some logic to determine the destination name (in our case, we use the value of the &amp;lsquo;type&amp;rsquo; header). Once the destination name is determined, you can obtain a reference to it by using the &lt;code&gt;BinderAwareChannelResolver.resolveDestination(..)&lt;/code&gt; operation and sending a message to it. That is really all it takes.&lt;/p&gt;
&lt;p&gt;The downside of the above approach is that some framework-specific abstractions leak into your code. Look at the fact that you need to be aware of &lt;code&gt;BinderAwareChannelResolver&lt;/code&gt; and &lt;code&gt;MessageChannel&lt;/code&gt;, amongst other things. In fact, most of the code in the preceding example is boilerplate. &lt;/p&gt;
&lt;p&gt;A more dynamic and less leaky approach is to rely on &lt;code&gt;spring.cloud.stream.sendto.destination&lt;/code&gt; property, which effectively does all of the above - but behind the scenes. The following example shows how to use this approach:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;@SpringBootApplication&#xD;
public class RoutingStreamApplication {&#xD;
&#xD;
  @Bean&#xD;
  public Function&amp;lt;Message&amp;lt;String&amp;gt;, Message&amp;lt;String&amp;gt;&amp;gt; process() {&#xD;
    return message -&amp;gt; {&#xD;
      // some logic to process incoming message&#xD;
      Message&amp;lt;String&amp;gt; outgoingMessage = MessageBuilder&#xD;
		.withPayload(&amp;quot;Hello&amp;quot;)&#xD;
		.setHeader(&amp;quot;spring.cloud.stream.sendto.destination&amp;quot;, &amp;quot;even&amp;quot;)&#xD;
		.build();&#xD;
       return outgoingMessage;&#xD;
     };&#xD;
  }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We no longer have to inject &lt;code&gt;BinderAwareChannelResolver&lt;/code&gt;, perform resolution of &lt;code&gt;MessageChannel&lt;/code&gt;, and so on. We simply create a new &lt;code&gt;Message&lt;/code&gt; that specifies a header that is used by the framework to dynamically resolve destination.&lt;/p&gt;&lt;h4&gt;&lt;a href="#routing-sources" class="anchor" name="routing-sources"&gt;&lt;/a&gt;Routing Sources&lt;/h4&gt;
&lt;p&gt;Last but not least, let&amp;rsquo;s look at another popular use case of a route &amp;lsquo;FROM&amp;rsquo; where the source of data originates outside the context of SCSt but needs to be routed to the appropriate destination:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;@Controller&#xD;
public class SourceWithDynamicDestination {&#xD;
    @Autowired&#xD;
    private ObjectMapper jsonMapper;&#xD;
&#xD;
    private final EmitterProcessor&amp;lt;?&amp;gt; processor = EmitterProcessor.create();&#xD;
&#xD;
    @RequestMapping(path = &amp;quot;/&amp;quot;, method = POST, consumes = &amp;quot;*/*&amp;quot;)&#xD;
    @ResponseStatus(HttpStatus.ACCEPTED)&#xD;
    public void handleRequest(@RequestBody String body, &#xD;
      @RequestHeader(HttpHeaders.CONTENT_TYPE) Object contentType) &#xD;
      throws Exception {&#xD;
        Map&amp;lt;String, String&amp;gt; payload = jsonMapper.readValue(body, Map.class);&#xD;
        String destination = payload.get(&amp;quot;id&amp;quot;);&#xD;
        Message&amp;lt;?&amp;gt; message =&#xD;
          MessageBuilder.withPayload(payload)&#xD;
           .setHeader(&amp;quot;spring.cloud.stream.sendto.destination&amp;quot;, destination)&#xD;
           .build();&#xD;
        processor.onNext(message);&#xD;
    }&#xD;
&#xD;
    @Bean&#xD;
    public Supplier&amp;lt;Flux&amp;lt;?&amp;gt;&amp;gt; source() {&#xD;
        return () -&amp;gt; processor;&#xD;
    }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we can see the result by running the following &lt;code&gt;curl&lt;/code&gt; command:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;curl -H &amp;quot;Content-Type: application/json&amp;quot; -X POST -d &amp;#39;{&amp;quot;id&amp;quot;:&amp;quot;customerId-1&amp;quot;,&amp;quot;bill-pay&amp;quot;:&amp;quot;100&amp;quot;}&amp;#39; http://localhost:8080
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, we use both a functional approach and a dusting of the reactive paradigm, by virtue of &lt;code&gt;Supplier&amp;lt;Flux&amp;lt;?&amp;gt;&amp;gt;&lt;/code&gt; bean. We have a simple MVC controller, and we want to route requests downstream, based on the value of the &amp;lsquo;id&amp;rsquo; attribute of the content.&lt;br/&gt;While the details of the &lt;code&gt;EmitterProcessor&lt;/code&gt; and its usage here are a subject for another post, what is important is that it demonstrates a fully functional application where HTTP requests are routed dynamically to destinations managed by the target binder.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;NOTE: At the time of this writing, the reference documentation is being actively updated to support the upcoming 3.0.0.RELEASE of SCSt, but you can always use the source of the &lt;a href="https://github.com/spring-cloud/spring-cloud-stream/blob/master/docs/src/main/asciidoc/spring-cloud-stream.adoc#event-routing"&gt;reference documentation&lt;/a&gt; for the most up-to-date information.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Check out &lt;a href="https://github.com/spring-cloud/spring-cloud-stream"&gt;Spring Cloud Stream&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;p&gt;Also, the previous blogs in the series:&lt;br/&gt;- &lt;a href="https://spring.io/blog/2019/10/14/spring-cloud-stream-demystified-and-simplified"&gt;Spring Cloud Stream - demystified and simplified&lt;/a&gt;&lt;br/&gt;&lt;a href="https://spring.io/blog/2019/10/17/spring-cloud-stream-functional-and-reactive"&gt;- Spring Cloud Stream - functional and reactive&lt;/a&gt;&lt;br/&gt;- &lt;a href="https://spring.io/blog/2019/10/25/spring-cloud-stream-and-spring-integration"&gt;Spring Cloud Stream &amp;amp; Spring Integration&lt;/a&gt;&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - October 29th, 2019</title>
    <link rel="alternate" href="https://spring.io/blog/2019/10/29/this-week-in-spring-october-29th-2019" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2019-10-29:3853</id>
    <updated>2019-10-29T12:36:00Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! Can you believe we&amp;rsquo;re already staring down November? I can&amp;rsquo;t! (We&amp;rsquo;re just two months away from the new year!) This week I&amp;rsquo;m in Chicago for meetings, and then - finally - I&amp;rsquo;m off to San Francisco and see the family. Then, it&amp;rsquo;s off to Europe for the Devoxx Ukraine and Devoxx Belgium events. I can&amp;rsquo;t wait to see everyone there! &lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m particularly looking forward to spending Halloween (on the 31st of October) in San Francisco with my kid. The entire family, including the dog, have Halloween costumes. We&amp;rsquo;re ready! (I&amp;rsquo;m going dressed as an application server.)&lt;/p&gt;
&lt;img src = "https://pbs.twimg.com/media/EH9YPRPWsAA7dED?format=jpg&amp;name=medium"/&gt;
&lt;p&gt;Alright, my friends, we&amp;rsquo;ve got tons of things to get to so let&amp;rsquo;s get started!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://dataflow.spring.io/docs/stream-developer-guides/"&gt;Have you seen our Spring Cloud Data Flow microsite?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/10/28/announcing-spring-cloud-stream-horsham-rc1-3-0-0-rc1"&gt;Announcing Spring Cloud Stream Horsham.RC1 (3.0.0.RC1)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/10/25/spring-cloud-hoxton-rc1-released"&gt;Spring Cloud Hoxton.RC1 Released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/10/25/spring-cloud-open-service-broker-3-1-0-m3-released"&gt;Spring Cloud Open Service Broker 3.1.0.M3 Released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/10/25/spring-cloud-stream-and-spring-integration"&gt;Spring Cloud Stream - and Spring Integration.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://content.pivotal.io/practitioners/netflix-built-its-own-application-generator-to-boost-dev-productivity-heres-how-you-can-too"&gt;Netflix Built its Application Generator to Boost Dev Productivity. Here&amp;rsquo;s How You Can, Too.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;In last week&amp;rsquo;s &lt;a href="https://spring.io/blog/2019/10/24/a-bootiful-podcast-apache-tomcat-netty-and-spring-framework-contributor-violeta-georgieva"&gt;&lt;em&gt;A Bootiful Podcast&lt;/em&gt;, I interviewed Apache Tomcat, Netty, and Spring Framework contributor Violeta Georgieva&lt;/a&gt;. She&amp;rsquo;s a legend and I was so happy to have the opportunity to talk to her!&lt;/li&gt;
  &lt;li&gt;Id you liked that interview, you should check out one of Violeta Georgieva&amp;rsquo;s talks, like this one: &lt;a href="https://content.pivotal.io/slides/benefits-of-reactive-programming-with-reactor-and-spring-boot-2-violeta-georgieva"&gt;&lt;em&gt;Benefits of Reactive Programming with Reactor and Spring Boot 2&lt;/em&gt; &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/10/24/spring-tools-4-4-1-released"&gt;Spring Tools 4.4.1 released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/10/24/spring-vault-2-2-0-rc1-and-2-1-4-release-available"&gt;Spring Vault 2.2.0.RC1 and 2.1.4.RELEASE available&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/10/22/the-reactive-revolution-at-springone-platform-2019-part-2-n"&gt;The Reactive Revolution at SpringOne Platform 2019 (part 2/N)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Have you tried out the &lt;a href="https://code.visualstudio.com/docs/java/java-spring-boot"&gt;Spring Boot support in Visual Studio Code&lt;/a&gt;?&lt;/li&gt;
  &lt;li&gt;It&amp;rsquo;s almost Halloween! Is there anything scarier than PHP? We don&amp;rsquo;t know, but we wanted to get in on the fun, so we made my second favorite place on the internet (&lt;a href="http://start.Spring.io"&gt;start.Spring.io&lt;/a&gt;), &lt;em&gt;after production&lt;/em&gt;, a little more&amp;hellip; &lt;em&gt;spooky&lt;/em&gt;&amp;hellip; in time for the holiday: &lt;a href="https://twitter.com/rseroter/status/1188806484618088448"&gt;Boooo(t)!&lt;/a&gt;. Great job to &lt;a href="https://twitter.com/oodamien"&gt;Damien Vitrac&lt;/a&gt; and the Spring Initializr design team!&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/jfrog/status/1187673065674571776"&gt;Spring co-founder Juergen Hoeller and I were interviewed at the Joker conference in St. Petersburg, Russia &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/cero_t/status/1187997274598625281?s=12"&gt;I love that there are so many Spring Cloud books in Taiwan&lt;/a&gt;! I only wish I could read them&amp;hellip; one day!&lt;/li&gt;
  &lt;li&gt;You can build your application generator, like the Spring Initializr. See how &lt;a href="https://content.pivotal.io/practitioners/netflix-built-its-own-application-generator-to-boost-dev-productivity-heres-how-you-can-too"&gt;in this epic guide by Ben Wilcock&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/springcentral/status/1187648362956427264"&gt;Hurray! We just released Spring Tools 4.4.1, introducing the re-designed mechanism to show live information from your running Spring application&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/rgielen/status/1187361615215316994?s=12"&gt;Introducing FxWeaver, a small library to help weave JavaFX FXML views with Spring support. It comes with a Spring Boot, JavaFX, FXML, and FxWeaver example&lt;/a&gt;. I may need to update my &lt;em&gt;Spring Tips&lt;/em&gt; video on &lt;a href="https://www.youtube.com/watch?v=lPy9mc_O_gU"&gt;using Spring Boot and JavaFX!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=sGX2ax97ZKA&amp;feature=youtu.be"&gt;This is an interesting Spring Boot + Freemarker tutorial&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Check out this great video by Ryan Baxter and Alexandre Roman on &lt;a href="https://www.youtube.com/watch?v=YTPUNesUIbI&amp;list=PLAdzTan_eSPRlQ8t4TU5c-AB4SHV939M6&amp;index=35&amp;t=0s"&gt;using Spring and Kubernetes together &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/springcloud/status/1186736912364724227"&gt;There&amp;rsquo;s nice new support for visualizing metrics with Spring Cloud Circuit Breaker and Resilience4J &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Announcing Spring Cloud Stream Horsham.RC1 (3.0.0.RC1)</title>
    <link rel="alternate" href="https://spring.io/blog/2019/10/28/announcing-spring-cloud-stream-horsham-rc1-3-0-0-rc1" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Oleg Zhurakousky</name>
    </author>
    <id>tag:spring.io,2019-10-28:3852</id>
    <updated>2019-10-28T16:52:00Z</updated>
    <content type="html">&lt;p&gt;We are pleased to announce the first Release Candidate of the Spring Cloud Stream Horsham.RC1 (3.0.0.RC1). &lt;/p&gt;
&lt;p&gt;Spring Cloud Stream Horsham.RC1 (3.0.0.RC1) modules are available for use in the &lt;a href="https://repo.spring.io/libs-milestone-local/org/springframework/cloud/"&gt;Spring Milestone&lt;/a&gt; repository. &lt;/p&gt;&lt;h3&gt;&lt;a href="#quick-highlights" class="anchor" name="quick-highlights"&gt;&lt;/a&gt;Quick highlights:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Boot 2.2.x&lt;/li&gt;
  &lt;li&gt;Spring Cloud Function 3.0.0.RC1&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href="#notable-features-and-enhancements-for-this-milestone" class="anchor" name="notable-features-and-enhancements-for-this-milestone"&gt;&lt;/a&gt;Notable features and enhancements for this milestone:&lt;/h3&gt;&lt;h5&gt;&lt;a href="#emphasis-on-functional-programming-model" class="anchor" name="emphasis-on-functional-programming-model"&gt;&lt;/a&gt;Emphasis on functional programming model&lt;/h5&gt;
&lt;p&gt;As mentioned in the previous release blogs, with this release we are shifting to a simpler functional programming model. &lt;/p&gt;
&lt;p&gt;In the nutshell a simple spring-boot application with at least one function bean is also a spring-cloud-stream application (as shown below).&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@SpringBootApplication&#xD;
public class MyApplicationConfiguration {&#xD;
&#xD;
    @Bean&#xD;
    public Function&amp;lt;String, String&amp;gt; uppercase() {&#xD;
        return value -&amp;gt; value.toUpperCase();&#xD;
    }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For benefits and features as well as additional details please reference these recent blogs &lt;/p&gt;
&lt;p&gt;&lt;a href="https://spring.io/blog/2019/10/14/spring-cloud-stream-demystified-and-simplified"&gt;Spring-Cloud-Stream - demystified &amp;amp; simplified&lt;/a&gt;&lt;br/&gt;&lt;a href="https://spring.io/blog/2019/10/17/spring-cloud-stream-functional-and-reactive"&gt;Spring-Cloud-Stream - functional &amp;amp; reactive&lt;/a&gt;&lt;br/&gt;&lt;a href="https://spring.io/blog/2019/10/25/spring-cloud-stream-and-spring-integration"&gt;Spring-Cloud-Stream &amp;amp; Spring-Integration&lt;/a&gt;&lt;br/&gt;&lt;a href="https://spring.io/blog/2019/08/19/announcing-spring-cloud-stream-horsham-m3-3-0-0-m3"&gt;Spring Cloud Stream M3 release announcement&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You should also checkout the updated &lt;a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-stream/3.0.0.RC1/reference/html/"&gt;user guide&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;NOTE: User guide is still being updated so for up to date details you can also reference it&amp;rsquo;s &lt;a href="https://github.com/spring-cloud/spring-cloud-stream/blob/master/docs/src/main/asciidoc/spring-cloud-stream.adoc"&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;h5&gt;&lt;a href="#functional-support-in-kafka-streams" class="anchor" name="functional-support-in-kafka-streams"&gt;&lt;/a&gt;Functional support in Kafka Streams&lt;/h5&gt;
&lt;p&gt;Kafka Streams binder now supports a first class function based programming model using which you can now write your Kafka Streams applications based on java.util.function support. This further reduces the boilerplate code that the applications need to write and allow the developers to focus on the business logic at hand. For further details, please visit &lt;a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-stream-binder-kafka/3.0.0.RC1/reference/html/spring-cloud-stream-binder-kafka.html#_programming_model"&gt;Functional Style&lt;/a&gt; section for more details. We are planning to have another dedicated write up going over all the new features.&lt;/p&gt;
&lt;p&gt;As always, we welcome feedback and contributions, so please reach out to us on &lt;a href="https://stackoverflow.com/questions/tagged/spring-cloud-stream"&gt;Stackoverflow&lt;/a&gt; or &lt;a href="https://github.com/spring-cloud/spring-cloud-stream/"&gt;GitHub&lt;/a&gt; and or &lt;a href="https://gitter.im/spring-cloud/spring-cloud-stream"&gt;Gitter&lt;/a&gt;&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Cloud Hoxton.RC1 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2019/10/25/spring-cloud-hoxton-rc1-released" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Ryan Baxter</name>
    </author>
    <id>tag:spring.io,2019-10-24:3850</id>
    <updated>2019-10-25T19:35:22Z</updated>
    <content type="html">&lt;p&gt;On behalf of the community, I am pleased to announce that the Release Candidate 1 (RC1) of the &lt;a href="https://cloud.spring.io"&gt;Spring Cloud Hoxton&lt;/a&gt; Release Train is available today. The release can be found in &lt;a href="https://repo.spring.io/milestone/"&gt;Spring Milestone&lt;/a&gt; repository. You can check out the Hoxton &lt;a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Hoxton-Release-Notes"&gt;release notes for more information&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a href="#notable-changes-in-the-hoxton-release-train" class="anchor" name="notable-changes-in-the-hoxton-release-train"&gt;&lt;/a&gt;Notable Changes in the Hoxton Release Train&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Cloud Hoxton.RC1 is built upon Spring Boot 2.2.0.RELEASE, please use this release when using Spring Cloud Hoxton.RC1.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href="#spring-cloud-vault" class="anchor" name="spring-cloud-vault"&gt;&lt;/a&gt;Spring Cloud Vault&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Support for PCF authentication.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-vault/milestone/33?closed=1"&gt;Bug Fixes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href="#spring-cloud-circuitbreaker" class="anchor" name="spring-cloud-circuitbreaker"&gt;&lt;/a&gt;Spring Cloud Circuitbreaker&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Added auto-configuration to collect circuit breaker metrics when using Resilience4J (&lt;a href="https://github.com/spring-cloud/spring-cloud-circuitbreaker/issues/47"&gt;#47&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Upgrade to Resilience4J 1.1.0&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href="#spring-cloud-gateway" class="anchor" name="spring-cloud-gateway"&gt;&lt;/a&gt;Spring Cloud Gateway&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;RSocket modules were moved to their own &lt;a href="https://github.com/spring-cloud-incubator/spring-cloud-rsocket"&gt;project&lt;/a&gt; in the Spring Cloud Incubator organization&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href="#spring-cloud-sleuth" class="anchor" name="spring-cloud-sleuth"&gt;&lt;/a&gt;Spring Cloud Sleuth&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;[Use Micrometer metrics instead of in memory one enhancement (&lt;a href="https://github.com/spring-cloud/spring-cloud-sleuth/issues/1477"&gt;https://github.com/spring-cloud/spring-cloud-sleuth/issues/1477&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-sleuth/issues?q=is%3Aclosed+milestone%3A2.2.0.RC1"&gt;Bug Fixes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href="#spring-cloud-config" class="anchor" name="spring-cloud-config"&gt;&lt;/a&gt;Spring Cloud Config&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-config/milestone/71?closed=1"&gt;Bug Fixes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href="#spring-cloud-gcp" class="anchor" name="spring-cloud-gcp"&gt;&lt;/a&gt;Spring Cloud Gcp&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-gcp/issues?q=is%3Aclosed+milestone%3A1.1.0.RC1"&gt;Bug Fixes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href="#spring-cloud-contract" class="anchor" name="spring-cloud-contract"&gt;&lt;/a&gt;Spring Cloud Contract&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Bumped WireMock to 2.25.1&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-contract/issues/1250"&gt;Add json-schema YAML contract definition to the documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-contract/issues?q=is%3Aclosed+milestone%3A2.2.0.RC1"&gt;Bug Fixes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href="#spring-cloud-commons" class="anchor" name="spring-cloud-commons"&gt;&lt;/a&gt;Spring Cloud Commons&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-commons/milestone/66?closed=1"&gt;Bug Fixes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href="#spring-cloud-task" class="anchor" name="spring-cloud-task"&gt;&lt;/a&gt;Spring Cloud Task&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Now has support for Micrometer task metrics for two Meters (Timer and LongTaskTimer) that produce the following time-series:
    &lt;ul&gt;
      &lt;li&gt;spring.cloud.task - shows task duration (updated only after the task has completed).&lt;/li&gt;
      &lt;li&gt;spring.cloud.task.active - provides run time information about the non-completed tasks.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Now honors &lt;code&gt;spring.batch.job.enabled=false&lt;/code&gt; even when fail-on-job-failure is set to true.&lt;/li&gt;
  &lt;li&gt;Tasks launched using partitioning will now have external-execution-id populated.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-task/milestone/38?closed=1"&gt;Bug Fixes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following modules were updated as part of Hoxton.RC1:&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Module &lt;/th&gt;
      &lt;th&gt;Version &lt;/th&gt;
      &lt;th&gt;Issues&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Vault &lt;/td&gt;
      &lt;td&gt;2.2.0.RC1 &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-vault/milestone/33?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Circuitbreaker &lt;/td&gt;
      &lt;td&gt;1.0.0.RC1 &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-circuitbreaker/milestone/2?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Gateway &lt;/td&gt;
      &lt;td&gt;2.2.0.RC1 &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-gateway/milestone/30?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Cli &lt;/td&gt;
      &lt;td&gt;2.2.0.RC1 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Zookeeper &lt;/td&gt;
      &lt;td&gt;2.2.0.RC1 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Aws &lt;/td&gt;
      &lt;td&gt;2.2.0.RC1 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Sleuth &lt;/td&gt;
      &lt;td&gt;2.2.0.RC1 &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-sleuth/milestone/68?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Starter &lt;/td&gt;
      &lt;td&gt;Hoxton.RC1 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Build &lt;/td&gt;
      &lt;td&gt;2.2.0.RC1 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Config &lt;/td&gt;
      &lt;td&gt;2.2.0.RC1 &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-config/milestone/71?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Starter Parent &lt;/td&gt;
      &lt;td&gt;Hoxton.RC1 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Gcp &lt;/td&gt;
      &lt;td&gt;1.2.0.RC1 &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-gcp/issues?q=is%3Aclosed+milestone%3A1.1.0.RC1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Contract &lt;/td&gt;
      &lt;td&gt;2.2.0.RC1 &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-contract/milestone/57?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Dependencies Parent &lt;/td&gt;
      &lt;td&gt;2.2.0.RC1 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Bus &lt;/td&gt;
      &lt;td&gt;2.2.0.RC1 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Consul &lt;/td&gt;
      &lt;td&gt;2.2.0.RC1 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Stream &lt;/td&gt;
      &lt;td&gt;Horsham.RC1 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Kubernetes &lt;/td&gt;
      &lt;td&gt;1.1.0.RC1 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Commons &lt;/td&gt;
      &lt;td&gt;2.2.0.RC1 &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-commons/milestone/66?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Openfeign &lt;/td&gt;
      &lt;td&gt;2.2.0.RC1 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Task &lt;/td&gt;
      &lt;td&gt;2.2.0.RC1 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Dependencies &lt;/td&gt;
      &lt;td&gt;Hoxton.RC1 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Release &lt;/td&gt;
      &lt;td&gt;Hoxton.RC1 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Netflix &lt;/td&gt;
      &lt;td&gt;2.2.0.RC1 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud &lt;/td&gt;
      &lt;td&gt;Hoxton.RC1 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Cloudfoundry &lt;/td&gt;
      &lt;td&gt;2.2.0.RC1 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Function &lt;/td&gt;
      &lt;td&gt;3.0.0.RC1 &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-function/milestone/24?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Security &lt;/td&gt;
      &lt;td&gt;2.2.0.RC1 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;As always, we welcome feedback on &lt;a href="https://github.com/spring-cloud/"&gt;GitHub&lt;/a&gt;, on &lt;a href="https://gitter.im/spring-cloud/spring-cloud"&gt;Gitter&lt;/a&gt;, on &lt;a href="https://stackoverflow.com/questions/tagged/spring-cloud"&gt;Stack Overflow&lt;/a&gt;, or on &lt;a href="https://twitter.com/SpringCloud"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To get started with Maven with a BOM (dependency management only):&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;&lt;br/&gt;    &amp;lt;repositories&amp;gt;&#xD;
        &amp;lt;repository&amp;gt;&#xD;
            &amp;lt;id&amp;gt;spring-milestones&amp;lt;/id&amp;gt;&#xD;
            &amp;lt;name&amp;gt;Spring Milestones&amp;lt;/name&amp;gt;&#xD;
            &amp;lt;url&amp;gt;https://repo.spring.io/milestone&amp;lt;/url&amp;gt;&#xD;
            &amp;lt;snapshots&amp;gt;&#xD;
                &amp;lt;enabled&amp;gt;false&amp;lt;/enabled&amp;gt;&#xD;
            &amp;lt;/snapshots&amp;gt;&#xD;
        &amp;lt;/repository&amp;gt;&#xD;
    &amp;lt;/repositories&amp;gt;&#xD;
&amp;lt;dependencyManagement&amp;gt;&#xD;
    &amp;lt;dependencies&amp;gt;&#xD;
        &amp;lt;dependency&amp;gt;&#xD;
            &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
            &amp;lt;artifactId&amp;gt;spring-cloud-dependencies&amp;lt;/artifactId&amp;gt;&#xD;
            &amp;lt;version&amp;gt;Hoxton.RC1&amp;lt;/version&amp;gt;&#xD;
            &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;&#xD;
            &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;&#xD;
        &amp;lt;/dependency&amp;gt;&#xD;
    &amp;lt;/dependencies&amp;gt;&#xD;
&amp;lt;/dependencyManagement&amp;gt;&#xD;
&amp;lt;dependencies&amp;gt;&#xD;
    &amp;lt;dependency&amp;gt;&#xD;
        &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
        &amp;lt;artifactId&amp;gt;spring-cloud-starter-config&amp;lt;/artifactId&amp;gt;&#xD;
    &amp;lt;/dependency&amp;gt;&#xD;
    &amp;lt;dependency&amp;gt;&#xD;
        &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
        &amp;lt;artifactId&amp;gt;spring-cloud-starter-netflix-eureka-client&amp;lt;/artifactId&amp;gt;&#xD;
    &amp;lt;/dependency&amp;gt;&#xD;
    ...&#xD;
&amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or with Gradle:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;buildscript {&#xD;
dependencies {&#xD;
classpath &amp;quot;io.spring.gradle:dependency-management-plugin:1.0.2.RELEASE&amp;quot;&#xD;
}&#xD;
}&#xD;
&#xD;
repositories {&#xD;
maven {&#xD;
url &amp;#39;https://repo.spring.io/milestone&amp;#39;&#xD;
}&#xD;
}&#xD;
&#xD;
apply plugin: &amp;quot;io.spring.dependency-management&amp;quot;&#xD;
&#xD;
dependencyManagement {&#xD;
imports {&#xD;
mavenBom &amp;#39;org.springframework.cloud:spring-cloud-dependencies:Hoxton.RC1&amp;#39;&#xD;
}&#xD;
}&#xD;
&#xD;
dependencies {&#xD;
compile &amp;#39;org.springframework.cloud:spring-cloud-starter-config&amp;#39;&#xD;
compile &amp;#39;org.springframework.cloud:spring-cloud-starter-netflix-eureka-client&amp;#39;&#xD;
...&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Cloud Open Service Broker 3.1.0.M3 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2019/10/25/spring-cloud-open-service-broker-3-1-0-m3-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Roy Clarkson</name>
    </author>
    <id>tag:spring.io,2019-10-25:3851</id>
    <updated>2019-10-25T17:09:01Z</updated>
    <content type="html">&lt;p&gt;We are pleased to announce the 3.1.0.M3 release of Spring Cloud Open Service Broker. Support for &lt;a href="https://www.openservicebrokerapi.org/blog/2019/06/21/announcing-open-service-broker-api-v2-15"&gt;Open Service Broker API v2.15&lt;/a&gt; is now feature complete. Thanks to the community for your feedback and contributions! This release includes the following &lt;a href="https://github.com/spring-cloud/spring-cloud-open-service-broker/issues?q=is%3Aclosed+milestone%3A3.1.0.M3"&gt;fixes and enhancements&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Upgrade to Spring Boot 2.2.0.RELEASE&lt;/li&gt;
  &lt;li&gt;Support updating a Service Instance context&lt;/li&gt;
  &lt;li&gt;Add list of &lt;code&gt;endpoints&lt;/code&gt; to create and get Service Binding response bodies&lt;/li&gt;
  &lt;li&gt;Support &lt;code&gt;X-Broker-API-Request-Identity&lt;/code&gt; request identity header&lt;/li&gt;
  &lt;li&gt;Restrict &lt;code&gt;Operation&lt;/code&gt; strings to 10,000 characters in the response body&lt;/li&gt;
  &lt;li&gt;Fix an issue where &lt;code&gt;ServiceInstanceBindingDoesNotExistException&lt;/code&gt; was incorrectly extended from &lt;code&gt;RuntimeException&lt;/code&gt;, instead of &lt;code&gt;ServiceBrokerException&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Include the following Spring Boot starter:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;&amp;lt;dependency&amp;gt;&#xD;
  &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
  &amp;lt;artifactId&amp;gt;spring-cloud-starter-open-service-broker&amp;lt;/artifactId&amp;gt;&#xD;
  &amp;lt;version&amp;gt;3.1.0.M3&amp;lt;/version&amp;gt;&#xD;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Use the Spring Milestone Repository:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;&amp;lt;repository&amp;gt;&#xD;
  &amp;lt;id&amp;gt;spring-milestones&amp;lt;/id&amp;gt;&#xD;
  &amp;lt;url&amp;gt;https://repo.spring.io/milestone&amp;lt;/url&amp;gt;&#xD;
&amp;lt;/repository&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Spring Cloud Open Service Broker is a framework for building Spring Boot applications that implement the Open Service Broker API. The &lt;a href="https://www.openservicebrokerapi.org"&gt;Open Service Broker API&lt;/a&gt; project allows developers to deliver services to applications running within cloud native platforms such as Cloud Foundry, Kubernetes, and OpenShift.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://spring.io/projects/spring-cloud-open-service-broker"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-cloud/spring-cloud-open-service-broker"&gt;GitHub&lt;/a&gt; | &lt;a href="https://docs.spring.io/spring-cloud-open-service-broker/docs/3.1.0.M3/reference/html5"&gt;Reference Doc&lt;/a&gt; | &lt;a href="https://docs.spring.io/spring-cloud-open-service-broker/docs/3.1.0.M3/apidocs/"&gt;API Doc&lt;/a&gt; &lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Cloud Stream - and Spring Integration.</title>
    <link rel="alternate" href="https://spring.io/blog/2019/10/25/spring-cloud-stream-and-spring-integration" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Artem Bilan</name>
    </author>
    <id>tag:spring.io,2019-10-24:3849</id>
    <updated>2019-10-25T15:26:00Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;If you listened to &lt;a href="https://spring.io/team/olegz"&gt;Oleg Zhurakousky&lt;/a&gt;'s talk at Spring One Platform 2019 about &lt;a href="https://springoneplatform.io/2019/sessions/event-driven-with-spring"&gt;Spring Cloud Stream &amp;amp; Functions&lt;/a&gt; or read his recent blog posts about &lt;a href="https://spring.io/blog/2019/10/14/spring-cloud-stream-demystified-and-simplified"&gt;Simplified Spring Cloud Stream&lt;/a&gt; and &lt;a href="https://spring.io/blog/2019/10/17/spring-cloud-stream-functional-and-reactive"&gt;Functional Spring Cloud Stream&lt;/a&gt;, you may want to say:
"Wait! What happened with Spring Integration support? What do I now do with my &lt;code&gt;@ServiceActivator&lt;/code&gt; or &lt;code&gt;IntegrationFlow&lt;/code&gt;? I used to deal with the &lt;code&gt;Sink.input()&lt;/code&gt; as a channel to consume binder destination with some Spring Integration logic!"
As Oleg mentions in his blog post, it is still possible with existing &lt;code&gt;@EnableBinding&lt;/code&gt; and so on, but we are moving away from that model, so how can we still benefit from all the features of Spring Integration in the world of &lt;em&gt;functional&lt;/em&gt; Spring Cloud Stream?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;In this blog post, I expand on the functional features of Spring Cloud Stream in the context of Spring Integration and its importance in the modern function-based streams!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="spring-integration-as-a-function"&gt;&lt;a class="anchor" href="#spring-integration-as-a-function"&gt;&lt;/a&gt;Spring Integration as a Function?!&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Yes, we can indeed make a simple &lt;code&gt;Function&lt;/code&gt; bridge, which would call a &lt;code&gt;MessageChannel.send()&lt;/code&gt;, but we can also do it with Messaging Gateway abstraction in Spring Integration, as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code&gt;@MessagingGateway(defaultRequestChannel = "myIntegrationServiceChannel")
public interface MessageFunction
                  extends Function&amp;lt;Message&amp;lt;InputData&amp;gt;, Message&amp;lt;OutputData&amp;gt;&amp;gt; { }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Given that the resulting bean is an extension to &lt;code&gt;java.util.function.Function&lt;/code&gt;, it is a fully valid Spring Cloud Function and Spring Cloud Stream binding candidate.
Its generic input/output argument types are used by Spring Cloud Stream to perform a proper payload conversion before and after.
Also, headers are carried from the binder to the downstream integration flow and back.
This is good, but we still need to be aware of channels and provide a few SI-specific annotations  to connect such a gateway with our flow (boilerplate).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;With Java DSL for Spring Integration, we can go further and take away more boilerplate code while gaining the benefit of using functional Spring Cloud Stream.
What we need is the same &lt;code&gt;gateway&lt;/code&gt; approach but in DSL style.
The &lt;code&gt;uppercase&lt;/code&gt; sample in Oleg&amp;#8217;s blog post would be as follows with Spring Integration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code&gt;@SpringBootApplication
public class SampleApplication  {

    @Bean
    public IntegrationFlow uppercaseFlow() {
        return IntegrationFlows.from(Function.class,
                             gateway -&amp;gt; gateway.beanName("uppercase"))
                   .&amp;lt;String, String&amp;gt;transform(String::toUpperCase)
                   .get();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;An uppercase conversion use-case is silly enough to implement with Spring Integration, but imagine that we need to do some hard logic like &lt;code&gt;split&lt;/code&gt;, &lt;code&gt;scatter-gather&lt;/code&gt; with parallel calls to external services, and then &lt;code&gt;aggregate&lt;/code&gt;, do some auditing, and, only in the end, return a result from our function to an output destination.
All of that and more can be implemented with Spring Integration, its EIP support, Java DSL abstraction and, of course, the aforementioned function wrapper.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The &lt;code&gt;java.util.function.Consumer&lt;/code&gt; and &lt;code&gt;java.util.function.Supplier&lt;/code&gt; interfaces can be used in a similar way with appropriate logic in the gateway proxy around them according to their contract.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;You can see more information about function support in the Spring Integration &lt;a href="https://docs.spring.io/spring-integration/docs/current/reference/html/messaging-endpoints.html#functions-support"&gt;Reference Manual&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="what-about-reactive-streams"&gt;&lt;a class="anchor" href="#what-about-reactive-streams"&gt;&lt;/a&gt;What about Reactive Streams?&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Everything we have showed before was about &lt;strong&gt;imperative&lt;/strong&gt; functions, which are triggered per event.
The &lt;strong&gt;reactive&lt;/strong&gt; functions are triggered only once by passing an entire stream of events as a &lt;code&gt;Flux&lt;/code&gt; into a function. The Reactive Streams support in Spring Integration helps you to write reactive Spring Integration flows, which can be exposed as functions within Spring Cloud Stream.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The following sample shows how to build a reactive function wrapper around a reactive Spring Integration call:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code&gt;public interface FluxFunction extends Function&amp;lt;Flux&amp;lt;String&amp;gt;, Flux&amp;lt;String&amp;gt;&amp;gt; { }

@Bean
public IntegrationFlow rsocketUpperCaseRequestFlow(
                           ClientRSocketConnector clientRSocketConnector) {
    return IntegrationFlows.from(FluxFunction.class,
                        gateway -&amp;gt; gateway.beanName("uppercase"))
            .handle(RSockets.outboundGateway("/uppercase")
                    .command(RSocketOutboundGateway.Command.requestStreamOrChannel)
                    .expectedResponseType(String.class)
                    .clientRSocketConnector(clientRSocketConnector))
            .get();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;While it is still that silly to implement &lt;code&gt;uppercase&lt;/code&gt; over RSocket, the goal of this sample is to give you an idea of how more complex use cases can be addressed with Spring Integration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Here, we get a &lt;code&gt;Flux&lt;/code&gt; passed into a function and propagate it into an RSocket requester for a &lt;code&gt;request channel&lt;/code&gt; interaction model.
A result &lt;code&gt;Flux&lt;/code&gt; is passed back to the function return through a &lt;code&gt;replyChannel&lt;/code&gt; header internally in Spring Integration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Another reactive sample might be like transferring data from a &lt;strong&gt;push&lt;/strong&gt; model to a &lt;strong&gt;pull&lt;/strong&gt; model.
In other words represent a stream of event as a &lt;code&gt;Supplier&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code&gt;@Bean
public Publisher&amp;lt;Message&amp;lt;byte[]&amp;gt;&amp;gt; httpSupplierFlow() {
    return IntegrationFlows.from(WebFlux.inboundChannelAdapter("/requests"))
            .toReactivePublisher();
}

@Bean
public Supplier&amp;lt;Flux&amp;lt;Message&amp;lt;byte[]&amp;gt;&amp;gt;&amp;gt; httpSupplier(
                    Publisher&amp;lt;Message&amp;lt;byte[]&amp;gt;&amp;gt; httpRequestPublisher) {
    return () -&amp;gt; Flux.from(httpRequestPublisher);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;This way, incoming HTTP requests land in a source &lt;code&gt;Flux&lt;/code&gt; for pulling downstream by the output binder destination, honoring back-pressure and other Reactive Streams requirements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;For more information about Reactive Streams support in Spring Integration, see the  &lt;a href="https://docs.spring.io/spring-integration/docs/current/reference/html/reactive-streams.html#reactive-streams"&gt;Reference Manual&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="summary"&gt;&lt;a class="anchor" href="#summary"&gt;&lt;/a&gt;Summary&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Spring Integration is still a vital part of Spring Cloud Stream microservices development. Its functional support allows complex use cases that fall into the category of Enterprise Integration Patterns to be exposed as Java functions, providing for a consistent execution model within Spring Cloud Stream.
In fact, by using this foundation, &lt;a href="https://github.com/spring-cloud/spring-cloud-stream-app-starters"&gt;Spring Cloud Stream App Starters&lt;/a&gt; will eventually be replaced with function implementations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Please feel free to provide any feedback!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;P.S. For those who are impatient about Kotlin, I would like to share a recently started &lt;a href="https://github.com/spring-projects/spring-integration-extensions/tree/master/spring-integration-kotlin-dsl"&gt;Spring Integration Kotlin DSL&lt;/a&gt; project.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>A Bootiful Podcast: Apache Tomcat, Netty and Spring Framework contributor Violeta Georgieva</title>
    <link rel="alternate" href="https://spring.io/blog/2019/10/24/a-bootiful-podcast-apache-tomcat-netty-and-spring-framework-contributor-violeta-georgieva" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2019-10-24:3848</id>
    <updated>2019-10-24T19:57:00Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! In this installment, Josh Long (&lt;a href="http://twitter.com/starbuxman"&gt;@starbuxman&lt;/a&gt;) talks to Apache Tomcat, Netty and Spring Framework engineer Violeta Georgieva (&lt;a href="http://twitter.com/violeta_g_g"&gt;@violeta_g_g&lt;/a&gt;).&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Violeta on &lt;a href="http://twitter.com/violeta_g_g"&gt;Twitter (@violeta_g_g)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;See her keynote &lt;a href="https://springoneplatform.io/2017/speakers/violeta-georgieva"&gt;with Spencer Gibb at SpringOne Platform 2019&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I love this talk, &lt;a href="https://content.pivotal.io/slides/benefits-of-reactive-programming-with-reactor-and-spring-boot-2-violeta-georgieva"&gt;Benefits of Reactive Programming with Reactor and Spring Boot 2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://projectReactor.io"&gt;Project Reactor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe width="100%" height="300" scrolling="no" frameborder="no" allow="autoplay" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/701224858&amp;color=%23ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&amp;visual=true"&gt;&lt;/iframe&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Tools 4.4.1 released</title>
    <link rel="alternate" href="https://spring.io/blog/2019/10/24/spring-tools-4-4-1-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Martin Lippert</name>
    </author>
    <id>tag:spring.io,2019-10-24:3847</id>
    <updated>2019-10-24T14:39:21Z</updated>
    <content type="html">&lt;p&gt;Dear Spring Community,&lt;/p&gt;
&lt;p&gt;I am happy to announce the 4.4.1 release of the Spring Tools 4 for Eclipse, Visual Studio Code, and Theia.&lt;/p&gt;
&lt;p&gt;Highlights from this release include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;(Spring Boot)&lt;/em&gt; introducing the all-new mechanism to connect and disconnect to/from running Spring applications to show live data - take a look at the &lt;a href="https://github.com/spring-projects/sts4/wiki/Live-Application-Information#managing-live-data-connections-to-local-processes"&gt;wiki&lt;/a&gt; for details&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Spring Boot)&lt;/em&gt;, &lt;em&gt;(Eclipse)&lt;/em&gt; enhancement: Goto Symbol now also works from XML bean files&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Spring Boot)&lt;/em&gt;, &lt;em&gt;(Eclipse)&lt;/em&gt; fixed: Completion in &lt;code&gt;application.properties&lt;/code&gt; sometimes leaves some &amp;lsquo;garbage&amp;rsquo; text&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Spring Boot)&lt;/em&gt;: improve performance of xml symbol scanning&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Spring Boot)&lt;/em&gt;: updated lsp4xml to 0.9.1 to address (&lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-18212"&gt;CVE-2019-18212&lt;/a&gt;) + (&lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-18213"&gt;CVE-2019-18213&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Spring Boot)&lt;/em&gt;: improve performance of xml symbol scanning&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(Concourse)&lt;/em&gt; enhancement: added support for &lt;code&gt;registry-image&lt;/code&gt; resource type (&lt;a href="https://github.com/spring-projects/sts4/issues/380"&gt;#380&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To download the distribution for Eclipse and find links to the marketplace entries for Visual Studio Code and Theia, please go visit:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Tools 4: &lt;a href="https://spring.io/tools/"&gt;https://spring.io/tools/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Detailed changes can be found here: &lt;a href="https://github.com/spring-projects/sts4/wiki/Changelog#2019-10-24-441-release"&gt;https://github.com/spring-projects/sts4/wiki/Changelog#2019-10-24-441-release&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Spring Tools 4.4.2 is scheduled to be released in late November 2019.&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Vault 2.2.0.RC1 and 2.1.4.RELEASE available</title>
    <link rel="alternate" href="https://spring.io/blog/2019/10/24/spring-vault-2-2-0-rc1-and-2-1-4-release-available" />
    <category term="releases" label="Releases" />
    <author>
      <name>Mark Paluch</name>
    </author>
    <id>tag:spring.io,2019-10-24:3846</id>
    <updated>2019-10-24T12:16:16Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;On behalf of the community, I&amp;#8217;d like to announce the availability of Spring Vault releases &lt;code&gt;2.2.0.RC1&lt;/code&gt; and &lt;code&gt;2.1.4.RELEASE&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Both releases ship with mostly bugfixes and dependency upgrades.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;For a complete list of changes see the &lt;a href="http://docs.spring.io/spring-vault/docs/2.2.0.RC1/changelog.txt"&gt;2.2.0.RC1 changelog&lt;/a&gt; respective &lt;a href="http://docs.spring.io/spring-vault/docs/2.1.4.RELEASE/changelog.txt"&gt;2.1.4.RELEASE changelog&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="http://projects.spring.io/spring-vault/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-vault"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-vault/issues"&gt;Issues&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-vault/docs/2.2.0.RC1/reference/html/"&gt;Documentation for 2.2.0.RC1&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-vault/docs/2.1.4.RELEASE/reference/html/"&gt;Documentation for 2.1.4.RELEASE&lt;/a&gt; | &lt;a href="http://stackoverflow.com/questions/tagged/spring-vault"&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>The Reactive Revolution at SpringOne Platform 2019 (part 2/N)</title>
    <link rel="alternate" href="https://spring.io/blog/2019/10/22/the-reactive-revolution-at-springone-platform-2019-part-2-n" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2019-10-22:3845</id>
    <updated>2019-10-22T17:47:00Z</updated>
    <content type="html">&lt;p&gt;Last year right in the middle of SpringOne Platform 2018, I posted the &lt;a href="https://spring.io/blog/2018/09/27/the-reactive-revolution-at-springone-platform-2018-part-1-n"&gt;first post in this series, _ The Reactive Revolution at SpringOne Platform 2018 (part 1/N)_&lt;/a&gt;, which looked at some of the big features we&amp;rsquo;d just dropped at SpringOne Platform 2018. I wanted to follow up and revisit that blog and the concepts I&amp;rsquo;d introduced last year, and show just how far we&amp;rsquo;ve come in the intervening year. TL;DR: things are &lt;em&gt;much&lt;/em&gt; easier! &lt;/p&gt;&lt;h2&gt;&lt;a href="#r2dbc" class="anchor" name="r2dbc"&gt;&lt;/a&gt;R2DBC&lt;/h2&gt;
&lt;p&gt;Last year, we announced our work on trying to support a standard for reactive SQL data access with a new project called &lt;a href="http://r2dbc.io"&gt;R2DBC&lt;/a&gt;. Traditional approaches to SQL data access on the JVM, like JDBC, are blocking APIs. They monopolize threads to do their work and negate the scalability benefits of a reactive platform like Spring. We wanted to improve that situation for developers so we built R2DBC. R2DBC has now been out in the public for more than a year and was developed internally for about as long internally before that. We&amp;rsquo;ve just reached the 0.0.8 release. We&amp;rsquo;re nearing a GA release. I&amp;rsquo;m not sure when, but I reckon we&amp;rsquo;ll have a majority of the features most developers need in a possibly GA, but-not-yet-1.0, release. Things like stored procedures might be released later.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ve made a ton of progress since last year. There are now a good many different implementations (some available and some under active development) from various vendors supporting R2DBC-based data access, including PostgresSQL, MySQL, Google Cloud Spanner, H2, Microsoft SQL Server, and more. &lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s also &lt;em&gt;way&lt;/em&gt; easier to get started. Simply visit my secon favorite place on the internet, &lt;em&gt;after production&lt;/em&gt;, &lt;a href="http://start.Spring.io/"&gt;the Spring Initializr&lt;/a&gt;, and choose &lt;code&gt;R2DBC&lt;/code&gt; and choose &lt;code&gt;PostgresSQL&lt;/code&gt;. Click &lt;code&gt;Generate&lt;/code&gt;. The resulting archive will be almost ready-to-run. You&amp;rsquo;ll need to specify connection information, but as with all Spring Boot autoconfiguration, such details are best handled outside of the Java code. You could handle it in the environment, &lt;code&gt;-D&lt;/code&gt; arguments, and in the property files. Here&amp;rsquo;s what that looks like for me, in &lt;code&gt;src/main/resources/application.properties&lt;/code&gt;. &lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;spring.r2dbc.url=r2dbc:postgres://localhost/orders&#xD;
spring.r2dbc.username=orders&#xD;
spring.r2dbc.password=orders
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here is a more-than-equivalent to last year&amp;rsquo;s Java code:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;package com.example.r2dbc;&#xD;
&#xD;
import lombok.AllArgsConstructor;&#xD;
import lombok.Data;&#xD;
import lombok.NoArgsConstructor;&#xD;
import org.springframework.boot.SpringApplication;&#xD;
import org.springframework.boot.autoconfigure.SpringBootApplication;&#xD;
import org.springframework.data.repository.reactive.ReactiveCrudRepository;&#xD;
&#xD;
@SpringBootApplication&#xD;
public class R2dbcApplication {&#xD;
&#xD;
	public static void main(String[] args) {&#xD;
		SpringApplication.run(R2dbcApplication.class, args);&#xD;
	}&#xD;
}&#xD;
&#xD;
interface CustomerRepository extends ReactiveCrudRepository&amp;lt;Customer, Long&amp;gt; {&#xD;
}&#xD;
&#xD;
@Data&#xD;
@AllArgsConstructor&#xD;
@NoArgsConstructor&#xD;
class Customer {&#xD;
&#xD;
	private Long id;&#xD;
&#xD;
	private String email;&#xD;
&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pretty cool, eh? The APIs are natively reactive and mean you can take advantage of the facilities provided for retries and composition afforded to you by those APIs. We can take it a step further. There&amp;rsquo;s now support for reactive transaction management thanks to the new &lt;code&gt;ReactiveTransactionManager&lt;/code&gt; abstraction introduced in Spring Framework 5.2. There are already implementations of this interface, akin to the &lt;code&gt;PlatformTransactionManager&lt;/code&gt; in Spring Framework, for Spring Data Neo4j RX (the new, reactie-first implementation), Spring Data MongoDB, and of course R2DBC. Here&amp;rsquo;s a reactive, transactional service based on our R2DBC code. &lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;&lt;br/&gt;@Service&#xD;
@RequiredArgsConstructor&#xD;
class CustomerService {&#xD;
&#xD;
	private final TransactionalOperator transactionalOperator;&#xD;
&#xD;
	@Transactional&#xD;
	Flux&amp;lt;Customer&amp;gt; saveAllWithTransactionalAnnotation(String... emails) {&#xD;
		return this.validCustomersFromEmails(emails);&#xD;
	}&#xD;
&#xD;
	Flux&amp;lt;Customer&amp;gt; saveAllWithTransactionalOperator(String... emails) {&#xD;
		return this.transactionalOperator.transactional(&#xD;
			this.validCustomersFromEmails(emails));&#xD;
	}&#xD;
&#xD;
	private Flux&amp;lt;Customer&amp;gt; validCustomersFromEmails(String... emails) {&#xD;
		return Flux.fromArray(emails)&#xD;
			.map(email -&amp;gt; new Customer(null, email))&#xD;
			.doOnNext(c -&amp;gt; Assert.isTrue(c.getEmail().contains(&amp;quot;@&amp;quot;), &amp;quot;the email must contain a &amp;#39;@&amp;#39;&amp;quot;));&#xD;
	}&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You&amp;rsquo;ll need to explicitly configure transactions. Here&amp;rsquo;s how:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;@Configuration&#xD;
@EnableTransactionManagement&#xD;
class TransactionConfiguration {&#xD;
&#xD;
	@Bean&#xD;
	ReactiveTransactionManager reactiveTransactionManager(ConnectionFactory cf) {&#xD;
		return new R2dbcTransactionManager(cf);&#xD;
	}&#xD;
&#xD;
	@Bean&#xD;
	TransactionalOperator transactionalOperator(ReactiveTransactionManager txm) {&#xD;
		return TransactionalOperator.create(txm);&#xD;
	}&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the comments for the article, someobdy asked about whether anybody is talking to Jakarta EE about all of this. I mentioned the (now defunct) ADBA project. R2DBC is now the best bet for getting reactive SQL-data access working. I hope you&amp;rsquo;ll give it a shot, kick the tires, and feedback! &lt;/p&gt;&lt;h2&gt;&lt;a href="#rsocket-the-reactive-wire-protocol" class="anchor" name="rsocket-the-reactive-wire-protocol"&gt;&lt;/a&gt;RSocket: the reactive wire protocol&lt;/h2&gt;
&lt;p&gt;Last year, we also debuted our support for RSocket, a protocol developed by - among others - folks from Netflix (who have since moved to Facebook) and Netifi. RSocket is a wire protocol that surfaces the tenants of reactive processing as part of the protocol itself. Facebook have developed different RSocket clients supporting, for example, C++ and Java. The Java RSocket client builds upon &lt;a href="http://ProjectReactor.io"&gt;the Reactor project&lt;/a&gt;! RSocket is a binary protocol, though, so in theory you could build clients in other languages, as well.&lt;/p&gt;
&lt;p&gt;RSocket is a general purpose data conveyance protocol. It&amp;rsquo;s payload agnostic. It doesn&amp;rsquo;t care what you send across the wire. It&amp;rsquo;s also built for operations! It&amp;rsquo;s even got a dedicate message frame in the protocol to convey information like service health and uptime. It supports a number of message exchange patterns or styles including, but not limited to, request-response, fire-and-forget, publish-subscribe and streaming. The sky¡¯s the limit! This post couldn¡¯t hope to thoroughly introduce all of the options, so let¡¯s look at a simple streaming example that has two components, a producer and a consumer. In order to get this to work, I went to the Spring Initializr, selected &lt;code&gt;Lombok&lt;/code&gt; and &lt;code&gt;RSocket&lt;/code&gt;. I did this twice, one for a producer and another for a consumer. Let&amp;rsquo;s look at that.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll need to provide sme configuration, as before, in &lt;code&gt;src/main/resources/application.properties&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;spring.rsocket.server.port=7777
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&amp;rsquo;ll start an RSocket service. Here&amp;rsquo;s the actual code.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;package com.example.rsocketservice;&#xD;
&#xD;
import lombok.AllArgsConstructor;&#xD;
import lombok.Data;&#xD;
import lombok.NoArgsConstructor;&#xD;
import org.springframework.boot.SpringApplication;&#xD;
import org.springframework.boot.autoconfigure.SpringBootApplication;&#xD;
import org.springframework.messaging.handler.annotation.MessageMapping;&#xD;
import org.springframework.stereotype.Controller;&#xD;
import reactor.core.publisher.Flux;&#xD;
&#xD;
import java.time.Duration;&#xD;
&#xD;
@SpringBootApplication&#xD;
public class RsocketServiceApplication {&#xD;
&#xD;
	public static void main(String[] args) {&#xD;
		SpringApplication.run(RsocketServiceApplication.class, args);&#xD;
	}&#xD;
}&#xD;
&#xD;
@Controller&#xD;
class GreetingsController {&#xD;
&#xD;
	@MessageMapping(&amp;quot;intervals&amp;quot;)&#xD;
	Flux&amp;lt;GreetingResponse&amp;gt; interval(GreetingRequest request) {&#xD;
		return Flux&#xD;
			.interval(Duration.ofMillis(1000))&#xD;
			.map(interval -&amp;gt; new GreetingResponse(&amp;quot;Hello (#&amp;quot; + interval + &amp;quot;) &amp;quot; + request.getName() + &amp;quot;!&amp;quot;));&#xD;
	}&#xD;
}&#xD;
&#xD;
@Data&#xD;
@AllArgsConstructor&#xD;
@NoArgsConstructor&#xD;
class GreetingRequest {&#xD;
	private String name;&#xD;
}&#xD;
&#xD;
@Data&#xD;
@AllArgsConstructor&#xD;
@NoArgsConstructor&#xD;
class GreetingResponse {&#xD;
	private String message;&#xD;
}&#xD;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Much better than the code from last year! It&amp;rsquo;s functionally equivalent, but it does one more interesting things, like marshal an object instead of a mere &lt;code&gt;String&lt;/code&gt;. Remember, RSocket connections are multiplexed, stateful, long-lived connections. You can open a connection and reuse it to handle multiple requests. They might disconnect, and it&amp;rsquo;s up to you to put in retry logic there. This has a profound effect on speed; you wouldn&amp;rsquo;t believe how much time is spent connecting and disconnecting in typical HTTP! &lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s look at the client, something to consume the Greetings service. Go to the Spring Initializer, start a new project, choosing the same dependencies as before and varying only the project name.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;package com.example.rsocketclient;&#xD;
&#xD;
import lombok.*;&#xD;
import lombok.extern.log4j.Log4j2;&#xD;
import org.springframework.boot.SpringApplication;&#xD;
import org.springframework.boot.autoconfigure.SpringBootApplication;&#xD;
import org.springframework.boot.context.event.ApplicationReadyEvent;&#xD;
import org.springframework.context.annotation.Bean;&#xD;
import org.springframework.context.event.EventListener;&#xD;
import org.springframework.messaging.rsocket.RSocketRequester;&#xD;
import org.springframework.stereotype.Component;&#xD;
&#xD;
@SpringBootApplication&#xD;
@RequiredArgsConstructor&#xD;
public class RsocketClientApplication {&#xD;
&#xD;
	@SneakyThrows&#xD;
	public static void main(String[] args) {&#xD;
		SpringApplication.run(RsocketClientApplication.class, args);&#xD;
		System.in.read();&#xD;
	}&#xD;
&#xD;
	@Bean&#xD;
	RSocketRequester rSocketRequester(RSocketRequester.Builder builder) {&#xD;
		return builder.connectTcp(&amp;quot;localhost&amp;quot;, 7777).block();&#xD;
	}&#xD;
}&#xD;
&#xD;
@Log4j2&#xD;
@Component&#xD;
@RequiredArgsConstructor&#xD;
class Client {&#xD;
&#xD;
	private final RSocketRequester rSocketRequester;&#xD;
&#xD;
	@EventListener(ApplicationReadyEvent.class)&#xD;
	public void ready() {&#xD;
		this.rSocketRequester&#xD;
			.route(&amp;quot;intervals&amp;quot;)&#xD;
			.data(new GreetingRequest(&amp;quot;World&amp;quot;))&#xD;
			.retrieveFlux(GreetingResponse.class)&#xD;
			.subscribe(im -&amp;gt; log.info(&amp;quot;consuming &amp;quot; + im.getMessage() + &amp;quot;.&amp;quot;));&#xD;
	}&#xD;
}&#xD;
&#xD;
@Data&#xD;
@AllArgsConstructor&#xD;
@NoArgsConstructor&#xD;
class GreetingRequest {&#xD;
	private String name;&#xD;
}&#xD;
&#xD;
@Data&#xD;
@AllArgsConstructor&#xD;
@NoArgsConstructor&#xD;
class GreetingResponse {&#xD;
	private String message;&#xD;
}&#xD;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Not bad, eh? We could take this a step further and secure it with the new support in Spring Security for RSocket, and we could front our services using Spring Cloud Gateway&amp;rsquo;s new RSocket support, as well.&lt;/p&gt;
&lt;p&gt;I can&amp;rsquo;t wait to update this series with whatever the latest and greatest is in one year! &lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - October 22nd, 2019</title>
    <link rel="alternate" href="https://spring.io/blog/2019/10/22/this-week-in-spring-october-22nd-2019" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2019-10-22:3843</id>
    <updated>2019-10-22T08:06:20Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! What a week! I&amp;rsquo;ve just returned from Prague, the Czech Republic, where I was for the epic Geecon Prague 2019 event. (Thanks for voting my talk on Reactive Spring the #1 talk, Prague!). Now I&amp;rsquo;m in Nantes, France, the DevFest Nantes show. I&amp;rsquo;d never been to Prague and I&amp;rsquo;ve never been to Nantes. So how&amp;rsquo;s that for cool first-time appearances in one week? I&amp;rsquo;ll be speaking about testing here. Tonight I fly to Paris, Fr, for customer meetings. Then I fly on Thursday to St. Petersburg, Russia, for the Joker conference, where I&amp;rsquo;ll be presenting on testing and I&amp;rsquo;ll be co-presenting with Spring co-founder, my friend, and hero, the one, the only, the amazing and inimitable, a veritable font of kindness and wisdom, Juergen Hoeller! Then, on the 27th, I fly to Chicago. It&amp;rsquo;s shaping up to be quite the week! &lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve really enjoyed my time in Prague and now Nantes. Yesterday, I recorded 3 podcasts with folks from Microsoft and Pivotal, among others, so look forward to them in my podcast, &lt;a href="https://soundcloud.com/a-bootiful-podcast"&gt;&lt;em&gt;A Bootiful Podcast&lt;/em&gt;&lt;/a&gt;. I also got to tour Nantes a little bit with my friend and Reactor / Spring teammate &lt;a href="http://twitter.com/SimonBasle"&gt;Simon Basl?&lt;/a&gt;. &lt;em&gt;Merci&lt;/em&gt;, Simon! &lt;/p&gt;
&lt;p&gt;I thought I was going to wake up and get this week&amp;rsquo;s &lt;em&gt;This Week in Spring&lt;/em&gt; roundup done and dusted before breakfast but it has turned out to be a &lt;em&gt;whopper&lt;/em&gt; of a roundup! I hope you made a pot of coffee, this one&amp;rsquo;s going to be a doozie! &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It&amp;rsquo;s here! It&amp;rsquo;s finally here! &lt;a href="https://spring.io/blog/2019/10/16/spring-boot-2-2-0"&gt;Spring Boot 2.2.0&lt;/a&gt;! There&amp;rsquo;s so much good stuff I can&amp;rsquo;t even! Check the blog, get &lt;a href="http://start.Spring.io"&gt;the bits&lt;/a&gt;, and &lt;a href="http://run.pivotal.io"&gt;get to production&lt;/a&gt;!&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/10/22/spring-boot-for-apache-geode-pivotal-gemfire-1-2-0-release-available"&gt;Spring Boot for Apache Geode &amp;amp; Pivotal GemFire 1.2.0.RELEASE Available&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/10/18/spring-session-for-apache-geode-pivotal-gemfire-2-2-0-release-available"&gt;Spring Session for Apache Geode &amp;amp; Pivotal GemFire 2.2.0.RELEASE Available&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;In last weeks&amp;rsquo; &lt;em&gt;A Bootiful Podcast&lt;/em&gt;, I interviewed &lt;a href="https://spring.io/blog/2019/10/18/a-bootiful-podcast-bytebuddy-founder-rafael-winterhalter"&gt;Bytebuddy founder Rafael Winterhalter&lt;/a&gt;. Check it out!&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/10/17/spring-security-oauth-2-3-7-2-2-6-2-1-6-2-0-19-released"&gt;Spring Security OAuth 2.3.7, 2.2.6, 2.1.6, 2.0.19 Released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/10/17/spring-cloud-stream-functional-and-reactive"&gt;Spring Cloud Stream - functional and reactive&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2019/10/15/simple-event-driven-microservices-with-spring-cloud-stream"&gt;Simple Event Driven Microservices with Spring Cloud Stream&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring founder and Atomist CEO Rod Johnson (&lt;a href="http://twitter.com/springRod"&gt;@SpringRod&lt;/a&gt;) blogs about the journey of Spring in this blog, &lt;a href="https://blog.atomist.com/eighteen-years-of-spring/"&gt;&lt;em&gt;Eighteen Years of Spring&lt;/em&gt;&lt;/a&gt;. This was a followup to his &lt;a href="https://www.youtube.com/watch?v=ukx9ykof03q&amp;feature=share"&gt;epic talk at SpringOne Platform 2019&lt;/a&gt; talk of the same name.&lt;/li&gt;
  &lt;li&gt;The Spring Cloud Gateway RSocket module &lt;a href="https://github.com/spring-cloud/spring-cloud-gateway/issues/1366"&gt;have been moved to &lt;code&gt;spring-cloud-incubator&lt;/code&gt; pending the completion of the &lt;code&gt;rsocket-java&lt;/code&gt; support for routing and forwarding&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;A third party &lt;a href="https://github.com/mirromutth/r2dbc-mysql"&gt;MySQL R2DBC implementation, supporting v.0.8.0 of the SPI, is available&lt;/a&gt;. Thanks, Mirro Mutth!&lt;/li&gt;
  &lt;li&gt;A nice talk by Axon founder Allard Builjze, &lt;a href="https://www.youtube.com/watch?v=ivad3mdwvx4&amp;feature=share"&gt;&lt;em&gt;Event driven microservices with Axon and Spring Boot&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Somebody recently asked me I planned on doing a talk about Hexagonal Architecture with Spring Boot. I had no plans. Someone else responded with this &lt;a href="https://youtu.be/cPH5AiqLQTo"&gt;great talk from Spring I/O by Tom Hombergs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Wow! There&amp;rsquo;s a new feature in IntelliJ IDEA, &lt;a href="https://twitter.com/bsideup/status/1185252220587126784"&gt;&amp;ldquo;Support for Reactor Debug mode,&amp;rdquo; and it is &lt;em&gt;awesome&lt;/em&gt;!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;There&amp;rsquo;s a great piece by Tim van Baarsen answering the question, &lt;a href="https://medium.com/@TimvanBaarsen/whats-new-in-spring-boot-2-2-dab550f664bb"&gt;What¡¯s new in Spring Boot 2.2?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLAdzTan_eSPRlQ8t4TU5c-AB4SHV939M6"&gt;SpringOne Platform 2019 was amazing and the videos are up!&lt;/a&gt; I&amp;rsquo;ll be introducing some of them here.&lt;/li&gt;
  &lt;li&gt;Check out Christopher Strobl&amp;rsquo;s talk &lt;a href="https://twitter.com/SpringData/status/1185160145065725952"&gt;on &amp;ldquo;What&amp;rsquo;s New in Spring Data Moore&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Did you know that the fat-jar plugin that Spring Boot ships to envelope your Java application&amp;rsquo;s &lt;code&gt;.jar&lt;/code&gt;s inside another &lt;code&gt;.jar&lt;/code&gt; was originally called, wait for it, &lt;a href="https://github.com/philwebb/binks"&gt;Binks&lt;/a&gt;?&lt;/li&gt;
  &lt;li&gt;I like this post in The Register, &lt;a href="https://www.theregister.co.uk/AMP/2019/09/18/cloud_foundry/?__twitter_impression=true"&gt;&lt;em&gt;Created to mimic Heroku, Cloud Foundry explained by its chief technology officer&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Event-Driven Java Applications with Redis 5.0 Streams, &lt;a href="https://www.youtube.com/watch?v=Gmwh-tUr_1E&amp;feature=youtu.be"&gt;another great SpringOne Platform 2019 talk, this one by Mark Paluch&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/SpringData/status/1184765032195907584"&gt;Spring Data team member Jens Schauder&amp;rsquo;s SpringOne Platform 2019 talk on Spring Data JPA is now up&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=qFT93y2n_3M&amp;list=PLAdzTan_eSPRlQ8t4TU5c-AB4SHV939M6&amp;index=37&amp;t=0s"&gt;Josh Long at SpringOne Platform 2019 - YouTube&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The Spring Initializr, the library that powers &lt;a href="http://start.spring.io"&gt;start.Spring.io&lt;/a&gt;, just had its &lt;a href="https://twitter.com/springcentral/status/1184754537665630208"&gt;first release hitting Maven Central&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://javarevisited.blogspot.com/2019/10/the-java-developer-roadmap.html?m=1"&gt;The 2019 Java Developer RoadMap&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=0rnMIueRKNU"&gt;The DO¡¯s and DON¡¯T¡¯s of Reactive Programming - what a treasure!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=NHVxrLb3jFI&amp;t=1560s"&gt;Building Resilient applications with Resilience4J&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=r2vs20QLVw8&amp;t=65s"&gt;Feature flipping for Java, a very cool talk!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I loved this talk on &lt;a href="https://www.youtube.com/watch?v=xQEJFUPeQ_8"&gt;R2DBC&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=j2OEtSO2gvM&amp;t=286s"&gt;The state of Kotlin In Spring&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=khzC-VwpFVM&amp;t=39s"&gt;The new power source for PayPals JVM Framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://iwringer.wordpress.com/2015/08/03/patterns-for-streaming-realtime-analytics/"&gt;13 Stream Processing Patterns for building Streaming and Realtime Applications | My views of the World and Systems&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Richard Seroter has a great post on &lt;a href="https://seroter.wordpress.com/2019/10/16/fronting-web-sites-a-classic-net-app-and-a-serverless-function-with-spring-cloud-gateway/"&gt;fronting web sites, a classic .NET app, and a serverless function with Spring Cloud Gateway&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=EMFcNBfRqWs"&gt;Did you see Spencer Gibb&amp;rsquo;s SpringOne Platform 2019 keynote? Here it is!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The New Stack has a great interview with Pivotal VP Cornelia Davis &lt;a href="https://www.pscp.tv/w/1vAxRqzZqMZJl?t=7m9s"&gt;on Implementing CI/CD and what it means for Java-based programs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I liked this &lt;a href="https://diegolirio.wordpress.com/2019/10/22/spring-cloud-contract-pt-1/"&gt;introduction to Spring Cloud Contact&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;A fantastic Spanish-language talk on &lt;a href="https://www.youtube.com/watch?v=sIiPVX_s0FI"&gt;Spring Cloud Contract by Spring community friend Edd? Mel?ndez&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=pfbycn_eqhg&amp;feature=share"&gt;Spring Cloud Gateway and RSocket&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/springcentral/status/1184451038364999681"&gt;Oded Shopen has a fantastic talk called Microservices are for humans, not machines&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Check out this amazing talk by &lt;a href="https://www.youtube.com/watch?v=PfbycN_eqhg&amp;t=2236s"&gt;Spencer Gibb and Cora Iberkleid introducing Spring Cloud Gateway and RSocket&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Love this episode of the Heavybit podcast, &lt;a href="https://www.heavybit.com/library/podcasts/o11ycast/ep-13-cloud-wrangling-with-natalie-bennett-of-pivotal"&gt;Ep. #13, Cloud Wrangling with Natalie Bennett of Pivotal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;A nice post from TechCrunch, &lt;a href="https://techcrunch.com/2019/10/15/with-alibaba-pivotal-and-lightbend-on-board-reactive-flexes-its-roi-muscle-in-microservices-world/amp/?__twitter_impression=true"&gt;With Alibaba, Pivotal and Lightbend on board, Reactive flexes its ROI muscle in the microservices world &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Adrian Cole, Tommy Ludwig and Narayanan Arunachalam &lt;a href="https://twitter.com/springcentral/status/1184269324233650177"&gt;talk about distributed tracing in the wild&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Check out what&amp;rsquo;s new in the &lt;a href="https://twitter.com/springcentral/status/1184269322576957445"&gt;Spring Cloud products for the Pivotal Platform&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/springcentral/status/1184239169507336194"&gt;Check out this amazing talk by Olga Maciaszek-Sharma on how to live in a post Spring Cloud world&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;A great &lt;em&gt;The New Stack&lt;/em&gt; article from the Pivotal SpringOne Platform Keynote: &lt;a href="https://thenewstack.io/pivotal-springone-platform-keynote-overview-is-kubernetes-boring-yet/?_lrsc=d21a5b2f-fbd3-4d34-94d6-c40f5e5a9b03"&gt;Is Kubernetes Boring Yet? - The New Stack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Boot for Apache Geode &amp; Pivotal GemFire 1.2.0.RELEASE Available</title>
    <link rel="alternate" href="https://spring.io/blog/2019/10/22/spring-boot-for-apache-geode-pivotal-gemfire-1-2-0-release-available" />
    <category term="releases" label="Releases" />
    <author>
      <name>John Blum</name>
    </author>
    <id>tag:spring.io,2019-10-19:3842</id>
    <updated>2019-10-22T02:16:00Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;On behalf of the &lt;a href="https://spring.io/"&gt;Spring&lt;/a&gt;, &lt;a href="https://geode.apache.org/"&gt;Apache Geode&lt;/a&gt;, &lt;a href="https://pivotal.io/pivotal-gemfire"&gt;Pivotal GemFire&lt;/a&gt; and &lt;a href="https://pivotal.io/pivotal-cloud-cache"&gt;Pivotal Cloud Cache&lt;/a&gt; (PCC) communities, it is my pleasure to announce the release of &lt;em&gt;Spring Boot for Apache Geode &amp;amp; Pivotal GemFire&lt;/em&gt; (SBDG) &lt;code&gt;1.2.0.RELEASE&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;SBDG 1.2.0.RELEASE is based on the Spring Boot 2.2.0.RELEASE and can be acquired from &lt;a href="https://search.maven.org/search?q=org.springframework.geode"&gt;Maven Central&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Just declare &lt;code&gt;org.springframework.geode:spring-geode-starter&lt;/code&gt; to use Apache Geode or &lt;code&gt;org.springframework.geode:spring-gemfire-starter&lt;/code&gt; to use either Pivotal GemFire or PCC in your Maven or Gradle build files and you are ready to start building highly scalable Spring Boot applications using these technologies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Alternatively, you can &lt;a href="https://start.spring.io/#!platformVersion=2.2.0.RELEASE&amp;amp;groupId=example.app&amp;amp;artifactId=crm&amp;amp;dependencies=geode"&gt;start&lt;/a&gt; with &lt;em&gt;Spring Initializer&lt;/em&gt; at &lt;a href="https://start.spring.io"&gt;start.spring.io&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;See the &lt;a href="https://docs.spring.io/spring-boot-data-geode-build/1.2.x/reference/html5/guides/getting-started.html"&gt;"&lt;em&gt;Getting Started&lt;/em&gt;"&lt;/a&gt; Guide to help you get up and running quickly, easily and reliably.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="whats-new"&gt;&lt;a class="anchor" href="#whats-new"&gt;&lt;/a&gt;The Journey to 1.2 and the Cloud&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;An imperative part to SBDG&amp;#8217;s story from the very beginning has been to help users prepare for their journey to the cloud by transforming apps into modern, fully integrated, "&lt;em&gt;Cloud-Ready&lt;/em&gt;" services, even before being &lt;a href="https://12factor.net/"&gt;&lt;em&gt;Cloud-Native&lt;/em&gt;&lt;/a&gt;, which is much more than just a technical problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;To partly arrive at this lofty destination, you need a framework backed by technology that enables you to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="olist arabic"&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;
&lt;p&gt;Move from &lt;em&gt;Open Source Software&lt;/em&gt; (e.g. &lt;a href="https://geode.apache.org/"&gt;Apache Geode&lt;/a&gt;) to &lt;em&gt;Commercial Software&lt;/em&gt; (e.g. &lt;a href="https://pivotal.io/pivotal-gemfire"&gt;Pivotal GemFire&lt;/a&gt; or &lt;a href="https://pivotal.io/pivotal-cloud-cache"&gt;Pivotal Cloud Cache (PCC)&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Move from a &lt;em&gt;Non-Managed Platform&lt;/em&gt; (Standalone, Externally Managed Services) to a &lt;em&gt;Managed Platform&lt;/em&gt; (e.g. &lt;a href="https://pivotal.io/platform"&gt;Pivotal Platform&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And do so with &lt;em&gt;&lt;strong&gt;little&lt;/strong&gt;&lt;/em&gt; to &lt;em&gt;&lt;strong&gt;no code or configuration&lt;/strong&gt;&lt;/em&gt; changes.  It should just work!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Being able to move in the opposite direction is also crucial, especially during the discovery and development phase of your project, because it enables you to iterate quicker.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;This process must happen in a natural and non-invasive manner that allows you to pick and choose what capabilities you need, when you need it.  Capabilities, such as caching, distributed compute and event stream processing, to name but a few, must be quick and easy to apply, and they must work reliably and be consistent regardless of the context in which the application is run.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;This is not only true for new applications, but existing ones as well, that is, if you want to remain competitive and quite frankly, relevant.  I really like the messaging behind this story from &lt;strong&gt;Oded Shopen&lt;/strong&gt; concerning &lt;a href="https://medium.com/@odedia/microservices-are-for-humans-not-machines-721a6a56344f"&gt;Microservices&lt;/a&gt;.  If you get a chance, also check out his &lt;a href="https://springoneplatform.io/2019/sessions/microservices-are-for-humans-not-machines"&gt;talk&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;If one thing has become overwhelming apparent in the new cloud era, and more generally, in the never ending cycle that is technology, it is that we have now reached a new height in complexity.  Too many layers: OS, Virtualization, Containers, App Servers, and underpinning all this, vendors selling you their *aaSes (IaaS, PaaS, SaaS).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;If anything, less is more and being able to do more with less.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;SBDG is uniquely positioned to do that in part because Apache Geode was somewhat ahead of it&amp;#8217;s time, designed from the ground up with a shared-nothing, scale-out architecture, which is so crucial to running smoothly in the cloud.  Consistency is also preserved.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Then, Spring, and in particular, Spring Boot, is a technology well positioned to handle any use case, especially use cases suited for Microservices.  The complexity problem stated above is what makes a framework in general, and Spring Boot in particular, so important, more than most will probably appreciate.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;As a result, SBDG becomes subtly yet obvsiously compelling.  It seamlessly blends these two powerful technologies together to handle modern as well as existing workloads without having to use every technology known to boot.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;It isn&amp;#8217;t only about the things you would normally think of, such as data access, but also things you don&amp;#8217;t (initially) think about, such as Data Serialization or Security (both Auth and TLS), that SBDG auto-configures for you in a context-aware manner.  For example, see &lt;a href="https://github.com/spring-projects/spring-boot-data-geode/issues/61"&gt;Issue #61&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Some of the other main themes that came out of the 1.2 series leading up to final GA were:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://docs.spring.io/spring-boot-data-geode-build/1.2.x/reference/html5/#cloudfoundry-cloudcache-security-auth-runtime-user-configuration"&gt;Assigning specific users&lt;/a&gt;, with non-arbitrary roles and permissions, to run your Spring Boot applications in PCF when using PCC.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Being able to &lt;a href="https://docs.spring.io/spring-boot-data-geode-build/1.2.x/reference/html5/#cloudfoundry-cloudcache-serviceinstance-targeting"&gt;target a specific PCC service&lt;/a&gt; when your Spring Boot applications are possibly bound to multiple instances, or maybe even &lt;a href="https://docs.spring.io/spring-boot-data-geode-build/1.2.x/reference/html5/#cloudfoundry-cloudcache-multiinstance-using"&gt;use multiple instances&lt;/a&gt; if necessary.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support for &lt;a href="https://docs.spring.io/spring-boot-data-geode-build/1.2.x/reference/html5/#cloudfoundry-geode"&gt;Hybrid Cloud Deployments&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support for multiple Caching Patterns: &lt;a href="https://docs.spring.io/spring-boot-data-geode-build/1.2.x/reference/html5/guides/caching-look-aside.html"&gt;Look-Aside&lt;/a&gt;, &lt;a href="https://docs.spring.io/spring-boot-data-geode-build/1.2.x/reference/html5/guides/caching-inline.html"&gt;Inline&lt;/a&gt; and &lt;a href="https://docs.spring.io/spring-boot-data-geode-build/1.2.x/reference/html5/guides/caching-near.html"&gt;Near Caching&lt;/a&gt; along with dedicated support for the most common form of caching, &lt;a href="https://docs.spring.io/spring-boot-data-geode-build/1.2.x/reference/html5/guides/caching-http-session.html"&gt;HTTP Session Caching&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;See the &lt;a href="https://github.com/spring-projects/spring-boot-data-geode/blob/1.2.0.RELEASE/spring-geode/src/main/resources/changelog.txt#L7-L25"&gt;changelog&lt;/a&gt; for specifics on the 1.2.0.RELEASE.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="whats-next"&gt;&lt;a class="anchor" href="#whats-next"&gt;&lt;/a&gt;What&amp;#8217;s Next&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Now that SBDG&amp;#8217;s story is coming to fruition and is in alignment with Spring Boot&amp;#8217;s release cadence, we want to expand on the existing features and make certain Cloud Data Access patterns even easier to accomplish.  Some of the Cloud Data Access patterns beyond just Caching include:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Distributed Compute&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Event Stream Processing &amp;amp; Messaging&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Query + Search&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;System of Record&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Look for more Guides and Examples on how to employ these patterns in your Cloud-Native, Spring Boot applications, and how SBDG with the power of Apache Geode makes short work of these patterns in practice.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="feedback"&gt;&lt;a class="anchor" href="#feedback"&gt;&lt;/a&gt;Feedback&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Feedback is always welcomed and much appreciated.  Please test out the new bits, let us know what you think.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="https://github.com/spring-projects/spring-boot-data-geode/issues"&gt;Issues&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot-data-geode/pulls"&gt;PR&lt;/a&gt; | &lt;a href="https://stackoverflow.com/questions/tagged/spring-boot"&gt;StackOverflow&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Session for Apache Geode &amp; Pivotal GemFire 2.2.0.RELEASE Available</title>
    <link rel="alternate" href="https://spring.io/blog/2019/10/18/spring-session-for-apache-geode-pivotal-gemfire-2-2-0-release-available" />
    <category term="releases" label="Releases" />
    <author>
      <name>John Blum</name>
    </author>
    <id>tag:spring.io,2019-10-18:3841</id>
    <updated>2019-10-18T23:42:41Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;On behalf of the Spring, Apache Geode &amp;amp; Pivotal GemFire communities, it is my pleasure to announce the release of &lt;em&gt;Spring Session for Apache Geode and Pivotal GemFire&lt;/em&gt; (SSDG) &lt;code&gt;2.2.0.RELEASE&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;SSDG 2.2.0.RELEASE primarily aligns with Spring Framework 5.2.0.RELEASE, Spring Data Moore-RELEASE/2.2.0.RELEASE, Spring Session Corn-RELEASE/2.2.0.RELEASE, Apache Geode 1.9.1 and Pivotal GemFire 9.8.4.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;You can acquire the bits in &lt;a href="https://search.maven.org/artifact/org.springframework.session/spring-session-data-geode/2.2.0.RELEASE/jar"&gt;Maven Central&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Additionally, SSDG 2.2.0.RELEASE can be acquired from Spring Boot 2.2.0.RELEASE.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="feedback"&gt;&lt;a class="anchor" href="#feedback"&gt;&lt;/a&gt;Feedback&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;As always, any feedback is welcomed and appreciated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="https://github.com/spring-projects/spring-session-data-geode/issues"&gt;Issues&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-session-data-geode/pulls"&gt;PR&lt;/a&gt; | &lt;a href="https://stackoverflow.com/questions/tagged/spring-session"&gt;StackOverflow&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>A Bootiful Podcast: Bytebuddy founder Rafael Winterhalter</title>
    <link rel="alternate" href="https://spring.io/blog/2019/10/18/a-bootiful-podcast-bytebuddy-founder-rafael-winterhalter" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2019-10-18:3840</id>
    <updated>2019-10-18T08:39:51Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! Welcome to another installment of a Bootiful Podcast! In this week&amp;rsquo;s installment Josh Long (&lt;a href="http://twitter.com/starbuxman"&gt;@starbuxman&lt;/a&gt;) talks to Rafael Winterhalter (&lt;a href="http://twitter.com/rafaelcodes"&gt;@rafaelcodes&lt;/a&gt;) about Bytebuddy; Mockito; the JVM; bytecode; Oslo, Norway; and so much more.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://bytebuddy.net/"&gt;ByteBuddy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://site.mockito.org"&gt;Mockito&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://JavaZone.no"&gt;JavaZone&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe width="100%" height="300" scrolling="no" frameborder="no" allow="autoplay" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/698141305&amp;color=%23ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&amp;visual=true"&gt;&lt;/iframe&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
</feed>
