<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Spring</title>
  <link rel="alternate" href="https://spring.io/blog" />
  <link rel="self" href="https://spring.io/blog.atom" />
  <id>http://spring.io/blog.atom</id>
  <icon>https://spring.io/favicon.ico</icon>
  <updated>2020-03-11T08:24:12Z</updated>
  <entry>
    <title>Spring Cloud Data Flow 2.4.2 GA Released</title>
    <link rel="alternate" href="https://spring.io/blog/2020/03/11/spring-cloud-data-flow-2-4-2-ga-released" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Ilayaperumal Gopinathan</name>
    </author>
    <id>tag:spring.io,2020-03-11:3992</id>
    <updated>2020-03-11T08:24:12Z</updated>
    <content type="html">&lt;p&gt;Spring Cloud Data Flow team is pleased to announce the &lt;strong&gt;GA&lt;/strong&gt; release of &lt;strong&gt;2.4.2&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In this release, along with some bug fixes, we primarily focused on the server/client-side performance improvements on the stream management.&lt;/p&gt;
&lt;p&gt;The REST layer in Spring Cloud Data Flow server is refactored to accommodate better &lt;code&gt;pagination&lt;/code&gt; and &lt;code&gt;performance&lt;/code&gt; when retrieving the runtime application statuses of streams. In addition to that, the SCDF dashboard pages are re-worked based on these changes. The &lt;code&gt;Runtime Applications&lt;/code&gt; page in the Dashboard has a new layout where the runtime applications are grouped by their streams. The &lt;code&gt;Streams&lt;/code&gt; page is also refactored to efficiently retrieve the stream status, application metrics, etc., &lt;/p&gt;
&lt;p&gt;Reactive interface methods are added into Spring Cloud Deployer. The Cloud Foundry Deployer¡¯s status methods implement these reactive methods for better performance.&lt;/p&gt;&lt;h2&gt;&lt;a href="#stay-in-touch-hellip" class="anchor" name="stay-in-touch-hellip"&gt;&lt;/a&gt;Stay in touch&amp;hellip;&lt;/h2&gt;
&lt;p&gt;As always, we welcome feedback and contributions, so please reach out to us on &lt;a href="https://stackoverflow.com/questions/tagged/spring-cloud-dataflow"&gt;Stackoverflow&lt;/a&gt; or &lt;a href="https://github.com/spring-cloud/spring-cloud-dataflow/issues"&gt;GitHub&lt;/a&gt; or via &lt;a href="https://gitter.im/spring-cloud/spring-cloud-dataflow"&gt;Gitter&lt;/a&gt;.&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Tips: Java 14 (or: Can Your Java Do This?)</title>
    <link rel="alternate" href="https://spring.io/blog/2020/03/11/spring-tips-java-14-or-can-your-java-do-this" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2020-03-11:3991</id>
    <updated>2020-03-11T07:04:44Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! In this installment, we look at some of the new features in Java 14 and their use in a Spring application.&lt;/p&gt;
&lt;p&gt;Speaker: &lt;a href="http://twitter.com/starbuxman"&gt;Josh Long (@starbuxman)&lt;/a&gt;&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/mr-7kGy8Yao" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - March 10th, 2020</title>
    <link rel="alternate" href="https://spring.io/blog/2020/03/10/this-week-in-spring-march-10th-2020" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2020-03-10:3990</id>
    <updated>2020-03-10T20:17:12Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! Welcome to another rip-roaring installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! My family and I are basically self-quarantined for the meanwhile, trying to avoid the terrifying COVID-19 pandemic that&amp;rsquo;s ravaging communities around the world. This pandemic is bad because it&amp;rsquo;s leaving countless thousands of sick or dead. It also means that it&amp;rsquo;s harder for me to get on planes to meet people. &lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m disappointed I won&amp;rsquo;t be able to - and haven&amp;rsquo;t been able to - make these shows. But, there&amp;rsquo;s always something to be learned and this week is no different. It was a busy week in Spring indeed! Let&amp;rsquo;s get to it! &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/03/09/spring-boot-for-apache-geode-pivotal-gemfire-1-1-6-release-1-2-5-release-available"&gt;Spring Boot for Apache Geode &amp;amp; Pivotal GemFire 1.1.6.RELEASE &amp;amp; 1.2.5.RELEASE available!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/03/09/spring-session-for-apache-geode-pivotal-gemfire-2-1-9-release-2-2-3-release-and-2-3-0-rc1-available"&gt;Spring Session for Apache Geode &amp;amp; Pivotal GemFire 2.1.9.RELEASE, 2.2.3.RELEASE and 2.3.0.RC1 available!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/03/09/getting-started-with-rsocket-spring-boot-client"&gt;Getting Started With RSocket: Spring Boot Client&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/03/06/a-bootiful-podcast-spring-i-o-organizer-and-spring-trainer-extraordinairre-sergi-almar"&gt;A Bootiful Podcast: Spring I/O organizer and Spring trainer extraordinaire Sergi Almar&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/03/05/spring-cloud-hoxton-service-release-3-sr3-is-available"&gt;Spring Cloud Hoxton Service Release 3 (SR3) is available.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/03/05/spring-security-5-3-goes-ga"&gt;Spring Security 5.3 goes GA&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/03/04/spring-session-dragonfruit-rc1-corn-sr2-and-bean-sr10-released"&gt;Spring Session Dragonfruit-RC1, Corn-SR2 and Bean-SR10 Released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;In this week&amp;rsquo;s installment of &lt;em&gt;Spring Tips&lt;/em&gt;, &lt;a href="https://spring.io/blog/2020/03/04/spring-tips-kotlin-and-spring-security"&gt;I look at Kotlin and Spring Security&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.codementor.io/@sravancynixit/retrieve-user-information-in-spring-security-14arwu8ub0"&gt;Retrieve User Information in Spring Security | Codementor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Have you seen &lt;a href="https://spring.io/guides/gs/cloud-circuit-breaker/"&gt;the new Spring Cloud Circuitbreaker guide&lt;/a&gt;?&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://link.medium.com/yrjybshke4"&gt;Why is spring Mac the best framework for building HTTP APIs?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Tony Vetter has published an excellent guide on using &lt;a href="https://tanzu.vmware.com/content/blog/microservices-essentials-getting-started-with-spring-cloud-gateway"&gt;the Spring Cloud Gateway&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Good news! &lt;a href="https://github.com/mariadb-corporation/mariadb-connector-r2dbc"&gt;There&amp;rsquo;s now a MariaDB R2DBC driver&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/testcontainers/status/1235663760163065856?s=12"&gt;New version of test containers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Check out this great listing of some of the premiere &lt;a href="https://twitter.com/springcentral/status/1235560925270327296"&gt;integrations for Spring users in Microsft Azure&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.wimdeblauwe.com/blog/2020/03/03/uuid-based-value-objects-with-spring-boot-rest-api/"&gt;UUID based Value Objects with Spring Boot REST API - Wim Deblauwe&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.wimdeblauwe.com/blog/2020/02/17/using-tailwind-css-with-spring-boot-and-thymeleaf/"&gt;Using Tailwind CSS with Spring Boot and Thymeleaf - Wim Deblauwe&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Boot for Apache Geode &amp; Pivotal GemFire 1.1.6.RELEASE &amp; 1.2.5.RELEASE available!</title>
    <link rel="alternate" href="https://spring.io/blog/2020/03/09/spring-boot-for-apache-geode-pivotal-gemfire-1-1-6-release-1-2-5-release-available" />
    <category term="releases" label="Releases" />
    <author>
      <name>John Blum</name>
    </author>
    <id>tag:spring.io,2020-03-09:3989</id>
    <updated>2020-03-09T20:16:00Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;On behalf of the Spring, Apache Geode and Pivotal GemFire communities, it is my pleasure to announce the release of &lt;em&gt;Spring Boot for Apache Geode &amp;amp; Pivotal GemFire&lt;/em&gt; (SBDG) &lt;code&gt;1.1.6.RELEASE&lt;/code&gt; and &lt;code&gt;1.2.5.RELEASE&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;SBDG &lt;code&gt;1.1.6.RELEASE&lt;/code&gt; builds on Spring Boot 2.1.13.RELEASE, which is based on Spring Framework 5.1.14.RELEASE, Spring Data Lovelace-SR16, Spring Session Bean-SR9 with SSDG 2.1.9.RELEASE, Apache Geode 1.6.0 and Pivotal GemFire 9.5.4.  &lt;a href="https://search.maven.org/artifact/org.springframework.geode/spring-geode-starter/1.1.6.RELEASE/jar"&gt;Bits&lt;/a&gt; are available in &lt;em&gt;Maven Central&lt;/em&gt;.  See &lt;a href="https://github.com/spring-projects/spring-boot-data-geode/blob/1.1.6.RELEASE/spring-geode/src/main/resources/changelog.txt#L7-L20"&gt;changelog&lt;/a&gt; for more details.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;SBDG &lt;code&gt;1.2.5.RELEASE&lt;/code&gt; builds on Spring Boot 2.2.5.RELEASE, which is based on Spring Framework 5.2.4.RELEASE, Spring Data Moore-SR5, Spring Session Corn-SR1 with SSDG 2.2.3.RELEASE, Apache Geode 1.9.2 and Pivotal GemFire 9.8.6.  &lt;a href="https://search.maven.org/artifact/org.springframework.geode/spring-geode-starter/1.2.5.RELEASE/jar"&gt;Bits&lt;/a&gt; are available in &lt;em&gt;Maven Central&lt;/em&gt;.  See &lt;a href="https://github.com/spring-projects/spring-boot-data-geode/blob/1.2.5.RELEASE/spring-geode/src/main/resources/changelog.txt#L7-L18"&gt;changelog&lt;/a&gt; for more details.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Additionally, you can start building Spring for Apache Geode applications using Spring Boot, and specifically, SBDG &lt;code&gt;1.2.5.RELEASE&lt;/code&gt;, from &lt;a href="https://start.spring.io/#!platformVersion=2.2.5.RELEASE&amp;amp;dependencies=geode"&gt;start.spring.io&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="feedback"&gt;&lt;a class="anchor" href="#feedback"&gt;&lt;/a&gt;Feedback&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;As always, any feedback is welcomed and appreciated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="https://github.com/spring-projects/spring-boot-data-geode/issues"&gt;Issues&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot-data-geode/pulls"&gt;PR&lt;/a&gt; | &lt;a href="https://stackoverflow.com/questions/tagged/spring-boot"&gt;StackOverflow&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Session for Apache Geode &amp; Pivotal GemFire 2.1.9.RELEASE, 2.2.3.RELEASE and 2.3.0.RC1 available!</title>
    <link rel="alternate" href="https://spring.io/blog/2020/03/09/spring-session-for-apache-geode-pivotal-gemfire-2-1-9-release-2-2-3-release-and-2-3-0-rc1-available" />
    <category term="releases" label="Releases" />
    <author>
      <name>John Blum</name>
    </author>
    <id>tag:spring.io,2020-03-09:3988</id>
    <updated>2020-03-09T19:15:00Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;On behalf of the Spring, Apache Geode and Pivotal GemFire communities, it is my pleasure to announce the release of &lt;em&gt;Spring Session for Apache Geode &amp;amp; Pivotal GemFire&lt;/em&gt; (SSDG) &lt;code&gt;2.1.9.RELEASE&lt;/code&gt;, &lt;code&gt;2.2.3.RELEASE&lt;/code&gt; and &lt;code&gt;2.3.0.RC1&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;SSDG &lt;a href="https://search.maven.org/artifact/org.springframework.session/spring-session-data-geode/2.1.9.RELEASE/jar"&gt;&lt;code&gt;2.1.9.RELEASE&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://search.maven.org/artifact/org.springframework.session/spring-session-data-geode/2.2.3.RELEASE/jar"&gt;&lt;code&gt;2.2.3.RELEASE&lt;/code&gt;&lt;/a&gt; are available from &lt;em&gt;Maven Central&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;SSDG &lt;code&gt;2.3.0.RC1&lt;/code&gt; is available from the Spring &lt;a href="https://repo.spring.io/milestone/org/springframework/session/spring-session-data-geode/2.3.0.RC1/"&gt;Milestone&lt;/a&gt; Repository.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;SSDG &lt;code&gt;2.1.9.RELEASE&lt;/code&gt; builds on Spring Framework 5.1.14.RELEASE, Spring Data Lovelace-SR16, Spring Session Bean-SR9, Apache Geode 1.6.0 and Pivotal GemFire 9.5.4.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;SSDG &lt;code&gt;2.2.3.RELEASE&lt;/code&gt; builds on Spring Framework 5.2.4.RELEASE, Spring Data Moore-SR5, Spring Session Corn-SR1, Apache Geode
1.9.2 and Pivotal GemFire 9.8.6.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;SSDG &lt;code&gt;2.3.0.RC1&lt;/code&gt; builds on Spring Framework 5.2.4.RELEASE, Spring Data Neumann-M3, Spring Session Dragonfruit-M2, Apache Geode 1.11.0 and Pivotal GemFire 9.9.1.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;See the &lt;a href="https://github.com/spring-projects/spring-session-data-geode/blob/2.3.0.RC1/spring-session-data-geode/src/main/resources/changelog.txt#L7-L25"&gt;changelog&lt;/a&gt; for more details.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="feedback"&gt;&lt;a class="anchor" href="#feedback"&gt;&lt;/a&gt;Feedback&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;As always, feedback is welcomed and appreciated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="https://github.com/spring-projects/spring-session-data-geode/issues"&gt;Issues&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-session-data-geode/pulls"&gt;PR&lt;/a&gt; | &lt;a href="https://stackoverflow.com/questions/tagged/spring-session"&gt;StackOverflow&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Getting Started With RSocket: Spring Boot Client</title>
    <link rel="alternate" href="https://spring.io/blog/2020/03/09/getting-started-with-rsocket-spring-boot-client" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Ben Wilcock</name>
    </author>
    <id>tag:spring.io,2020-02-28:3979</id>
    <updated>2020-03-09T16:00:00Z</updated>
    <content type="html">&lt;p&gt;&lt;strong&gt;Time: approximately 15 mins.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In the &lt;a href="https://spring.io/blog/2020/03/02/getting-started-with-rsocket-spring-boot-server"&gt;previous article&lt;/a&gt;, you saw how Spring Boot simplifies the task of writing RSocket servers. But what about RSocket clients? In this article, you¡¯ll learn how to write your own RSocket client and then use this new client to send request-response messages to your RSocket-server. Let¡¯s get started!&lt;/p&gt;
&lt;p&gt;This tutorial uses the Linux shell. For details on how to run a Linux shell on Windows, see &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10"&gt;this Microsoft tutorial&lt;/a&gt;.&lt;/p&gt;&lt;h1&gt;&lt;a href="#step-1-create-a-new-spring-boot-project-for-your-client" class="anchor" name="step-1-create-a-new-spring-boot-project-for-your-client"&gt;&lt;/a&gt;Step 1: Create A New Spring Boot Project For Your Client&lt;/h1&gt;
&lt;p&gt;It¡¯s fun to write your own code, so for your RSocket client let¡¯s start from scratch. &lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;If this is too much hassle for you, or you don¡¯t have the time right now, then you can find the code in the rsocket-client folder of the &lt;a href="https://github.com/benwilcock/spring-rsocket-demo"&gt;demo code repository&lt;/a&gt;. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Open your browser and navigate to start.spring.io then use the following settings to create a new Spring Boot project:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Project: &lt;code&gt;Maven&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Language: &lt;code&gt;Java&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Spring Boot: &lt;code&gt;2.2.5&lt;/code&gt; (or whichever is the latest GA version)&lt;/li&gt;
  &lt;li&gt;Group: &lt;code&gt;io.pivotal&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Artifact: &lt;code&gt;rsocket-client&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Dependencies: &lt;code&gt;RSocket&lt;/code&gt;, &lt;code&gt;Lombok&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Click the green &lt;strong&gt;¡°Generate¡±&lt;/strong&gt; button. Download the ZIP file and extract the project into a folder, then open the extracted project in your favorite Java IDE.&lt;/p&gt;&lt;h1&gt;&lt;a href="#step-2-add-spring-shell-to-the-project" class="anchor" name="step-2-add-spring-shell-to-the-project"&gt;&lt;/a&gt;Step 2: Add Spring Shell To The Project&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://docs.spring.io/spring-shell/docs/2.0.0.RELEASE/reference/htmlsingle/"&gt;Spring Shell&lt;/a&gt; helps you write simple terminal programs using Spring Boot. At the time of writing, the Spring Initializr doesn¡¯t offer a Spring Shell option, but you can still use it by adding the dependency to your project manually. &lt;/p&gt;
&lt;p&gt;Open the Maven &lt;code&gt;pom.xml&lt;/code&gt; file in your IDE, and add the following xml into the &lt;code&gt;&amp;lt;dependencies&amp;gt;&lt;/code&gt; section:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint xml"&gt;&amp;lt;dependency&amp;gt;&#xD;
    &amp;lt;groupId&amp;gt;org.springframework.shell&amp;lt;/groupId&amp;gt;&#xD;
    &amp;lt;artifactId&amp;gt;spring-shell-starter&amp;lt;/artifactId&amp;gt;&#xD;
    &amp;lt;version&amp;gt;2.0.0.RELEASE&amp;lt;/version&amp;gt;&#xD;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will enable Spring Shell in your new RSocket client project.&lt;/p&gt;&lt;h1&gt;&lt;a href="#step-3-write-the-code" class="anchor" name="step-3-write-the-code"&gt;&lt;/a&gt;Step 3: Write The Code&lt;/h1&gt;
&lt;p&gt;There are a few short coding tasks required to add Spring Shell and RSocket support to your new RSocket client application. They are as follows:&lt;/p&gt;&lt;h4&gt;&lt;a href="#delete-the-test" class="anchor" name="delete-the-test"&gt;&lt;/a&gt;Delete The Test&lt;/h4&gt;
&lt;p&gt;You can delete the auto-generated &lt;code&gt;RsocketclientApplicationTests&lt;/code&gt; test class. If you don¡¯t, odd things might happen when you run the Spring ¡®integration¡¯ test. For details, see the notes section &lt;a href="https://docs.spring.io/spring-shell/docs/2.0.0.RELEASE/reference/htmlsingle/#_adding_a_dependency_on_spring_shell"&gt;here in the Spring Shell Docs&lt;/a&gt;. &lt;/p&gt;&lt;h4&gt;&lt;a href="#copy-the-message-class-from-the-server-code" class="anchor" name="copy-the-message-class-from-the-server-code"&gt;&lt;/a&gt;Copy The Message Class From The Server Code&lt;/h4&gt;
&lt;p&gt;Copy over the &lt;code&gt;Message.java&lt;/code&gt; data class from the &lt;code&gt;io.pivotal.rsocketserver.data&lt;/code&gt; package. This package is in the &lt;code&gt;rsocket-server&lt;/code&gt; project folder you worked on in the &lt;a href="https://spring.io/blog/2020/03/02/getting-started-with-rsocket-spring-boot-server"&gt;previous article&lt;/a&gt;. You need this class in order to exchange messages with the server.&lt;/p&gt;&lt;h4&gt;&lt;a href="#create-the-rsocketshellclient-class" class="anchor" name="create-the-rsocketshellclient-class"&gt;&lt;/a&gt;Create The RSocketShellClient Class&lt;/h4&gt;
&lt;p&gt;In the &lt;code&gt;io.pivotal.rsocketclient&lt;/code&gt; package, create a new class called &lt;code&gt;RSocketShellClient&lt;/code&gt; and annotate this class with the &lt;code&gt;@Slf4j&lt;/code&gt; and &lt;code&gt;@ShellComponent&lt;/code&gt; annotations. The first annotation tells Lombok to add logging features to this class and the second tells Spring that you are building a Shell-based component.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@Slf4j&#xD;
@ShellComponent&#xD;
public class RSocketShellClient {&#xD;
 // Your code will go here...&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;a href="#set-up-your-rsocketrequester" class="anchor" name="set-up-your-rsocketrequester"&gt;&lt;/a&gt;Set Up Your RSocketRequester&lt;/h4&gt;
&lt;p&gt;The RSocket client needs to know where it can find and communicate with the RSocket server. Spring RSocket support is autoconfigured by Spring Boot, you just have to build a customized &lt;code&gt;RSocketRequester&lt;/code&gt;. You can do this by adding a class constructor and using the &lt;code&gt;RSocketRequester.Builder&lt;/code&gt; as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;// Add a global class variable for the RSocketRequester&#xD;
private final RSocketRequester rsocketRequester;&#xD;
&#xD;
// Use an Autowired constructor to customize the RSocketRequester and store a reference to it in the global variable&#xD;
@Autowired&#xD;
public RSocketShellClient(RSocketRequester.Builder rsocketRequesterBuilder) {&#xD;
    this.rsocketRequester = rsocketRequesterBuilder&#xD;
            .connectTcp(&amp;quot;localhost&amp;quot;, 7000).block();&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The requester¡¯s &lt;code&gt;connectTcp()&lt;/code&gt; method needs to know the IP address and port of your RSocket server, and you need to tell the requester to &lt;code&gt;block()&lt;/code&gt; until a connection is established. After that, you¡¯re ready to communicate with the RSocket server over TCP.&lt;/p&gt;&lt;h4&gt;&lt;a href="#add-a-request-response-shell-method" class="anchor" name="add-a-request-response-shell-method"&gt;&lt;/a&gt;Add A Request-Response Shell Method.&lt;/h4&gt;
&lt;p&gt;Adding shell capabilities in Spring Shell components is fairly straightforward. First of all, add a public &lt;code&gt;requestResponse()&lt;/code&gt; method returning &lt;code&gt;void&lt;/code&gt; to the &lt;code&gt;RSocketShellClient&lt;/code&gt;, and use the &lt;code&gt;@ShellMethod&lt;/code&gt; annotation over the method signature to activate Spring Shell and declare the help text that users will see if they type &lt;code&gt;help&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Inside the method, use the global reference to the &lt;code&gt;RSocketRequester&lt;/code&gt; and set the &lt;code&gt;route()&lt;/code&gt; to &lt;code&gt;&amp;quot;request-response&amp;quot;&lt;/code&gt;, the &lt;code&gt;data()&lt;/code&gt; to be a new &lt;code&gt;Message&lt;/code&gt; instance, and tell the requester to &lt;code&gt;retrieveMono()&lt;/code&gt; of type &lt;code&gt;Message&lt;/code&gt;. Finally, add a simple logging function to the &lt;code&gt;subscribe()&lt;/code&gt; method. The code for this is as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;    @ShellMethod(&amp;quot;Send one request. One response will be printed.&amp;quot;)&#xD;
    public void requestResponse() throws InterruptedException {&#xD;
        log.info(&amp;quot;\nSending one request. Waiting for one response...&amp;quot;);&#xD;
        Message message = this.rsocketRequester&#xD;
                .route(&amp;quot;request-response&amp;quot;)&#xD;
                .data(new Message(CLIENT, REQUEST))&#xD;
                .retrieveMono(Message.class)&#xD;
                .block();&#xD;
        log.info(&amp;quot;\nResponse was: {}&amp;quot;, message);&#xD;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
  &lt;p&gt;RSocket is designed to deal with long-running, asynchronous streams of data. This is most effectively done using the functional programming style that you¡¯re already familiar with from the &lt;a href="https://www.oracle.com/technical-resources/articles/java/ma14-java-se-8-streams.html"&gt;Java 8 Stream API&lt;/a&gt;. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The code above states what you&amp;rsquo;d like to happen when (and only when) there is messaging work to be done. In this case, you&amp;rsquo;ve committed to sending one request message, routed to the server&amp;rsquo;s &lt;code&gt;&amp;quot;request-response&amp;quot;&lt;/code&gt; handler method, and you expect one response message in return. This process is triggered by the call to the &lt;code&gt;block()&lt;/code&gt; method. Without it, nothing will happen. &lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s it for coding. Let&amp;rsquo;s run it!&lt;/p&gt;&lt;h1&gt;&lt;a href="#step-4-build-and-run-the-rsocket-server" class="anchor" name="step-4-build-and-run-the-rsocket-server"&gt;&lt;/a&gt;Step 4: Build And Run The RSocket Server&lt;/h1&gt;
&lt;p&gt;As our server, you&amp;rsquo;re going to use the code from the &lt;a href="https://spring.io/blog/2020/03/02/getting-started-with-rsocket-spring-boot-server"&gt;previous article&lt;/a&gt;. Open a terminal window and move to the &lt;code&gt;rsocket-server&lt;/code&gt; directory and then run the server code using the Maven wrapper like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint bash"&gt;cd rsocket-server&#xD;
./mvnw clean package spring-boot:run -DskipTests=true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The server will start up on &lt;code&gt;localhost&lt;/code&gt; port &lt;code&gt;7000&lt;/code&gt; and wait for your client to connect.&lt;/p&gt;&lt;h1&gt;&lt;a href="#step-5-build-and-run-the-rsocket-client" class="anchor" name="step-5-build-and-run-the-rsocket-client"&gt;&lt;/a&gt;Step 5: Build And Run The RSocket Client&lt;/h1&gt;
&lt;p&gt;To run your RSocket client, open a second terminal window and move to your &lt;code&gt;rsocket-client&lt;/code&gt; directory. From there, build and run the client as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint bash"&gt;cd rsocket-client&#xD;
./mvnw clean package spring-boot:run -DskipTests=true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When the client finishes starting up, you will be presented with a new command line prompt like this: &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;shell:&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can use this prompt to issue commands to your Spring application similar to issuing commands via a regular terminal app. &lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s send a request message to the server and watch for a response. Do this by typing &lt;code&gt;request-response&lt;/code&gt; at the prompt. You will then see the request and response messages being sent and received like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint none"&gt;shell:&amp;gt;request-response&#xD;
Sending one request. Waiting for one response...&#xD;
Response was: Message(origin=Server, interaction=Response, index=0, created=1582558295)&#xD;
shell:&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
  &lt;p&gt;I¡¯ve omitted much of the log detail here for brevity. Your output will be more verbose than shown, but the outcome will be the same. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can now stop your &lt;code&gt;rsocket-client&lt;/code&gt; by typing &lt;code&gt;exit&lt;/code&gt; at the &lt;code&gt;shell:&amp;gt;&lt;/code&gt; prompt. You can stop the &lt;code&gt;rsocket-server&lt;/code&gt; by pressing &lt;code&gt;Ctrl-C&lt;/code&gt; in its terminal window, or by closing it.&lt;/p&gt;&lt;h1&gt;&lt;a href="#how-it-all-works" class="anchor" name="how-it-all-works"&gt;&lt;/a&gt;How It All Works&lt;/h1&gt;
&lt;p&gt;Spring Shell allows you to build and run terminal-like programs using Spring Boot. In the constructor of your shell component, you configured an &lt;code&gt;RSocketRequester&lt;/code&gt; to communicate with your server using TCP on localhost port 7000.&lt;/p&gt;
&lt;p&gt;You then created a &lt;code&gt;requestResponse()&lt;/code&gt; method in your shell component and annotated it so that when you typed &lt;code&gt;request-response&lt;/code&gt; at the shell prompt, Spring Shell invoked this method. &lt;/p&gt;
&lt;p&gt;When the &lt;code&gt;requestResponse()&lt;/code&gt; method was called, the client sent some metadata describing the &lt;code&gt;route&lt;/code&gt; to use, and then it sent the request as a &lt;code&gt;Message&lt;/code&gt; object. The server¡¯s response message was printed on the screen using a simple logging statement.&lt;/p&gt;&lt;h1&gt;&lt;a href="#that-s-it-you-rsquo-re-done" class="anchor" name="that-s-it-you-rsquo-re-done"&gt;&lt;/a&gt;That¡¯s It, You&amp;rsquo;re Done!&lt;/h1&gt;
&lt;p&gt;In this article, you learned how to write a simple RSocket client using Spring Shell. This new client communicates with your RSocketServer over TCP. In the next article, we¡¯ll cover fire-and-forget messages with RSocket and Spring Boot by adding extra functionality to both your client and your server projects.&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>A Bootiful Podcast: Spring I/O organizer and Spring trainer extraordinairre Sergi Almar</title>
    <link rel="alternate" href="https://spring.io/blog/2020/03/06/a-bootiful-podcast-spring-i-o-organizer-and-spring-trainer-extraordinairre-sergi-almar" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2020-03-06:3987</id>
    <updated>2020-03-06T04:41:20Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! In this episode &lt;a href="https://twitter.com/starbuxman"&gt;Josh Long (@starbuxman)&lt;/a&gt; talks with &lt;a href="https://twitter.com/SergiAlmar"&gt;Sergi Almar (@sergiAlmar) &lt;/a&gt; about organizing one of the best JVM community shows in the business, Barcelona&amp;rsquo;s &lt;a href="https://springio.net/"&gt;Spring I/O&lt;/a&gt;, being a trainer, and so much more. &lt;/p&gt;
&lt;iframe title="Spring I/O organizer and Spring trainer extraordinairre Sergi Almar " src="https://www.podbean.com/media/player/jvbuh-d5918d?from=usersite&amp;vjs=1&amp;skin=1&amp;fonts=Helvetica&amp;auto=0&amp;download=1" height="315" width="100%" style="border: none;" scrolling="no" data-name="pb-iframe-player"&gt;&lt;/iframe&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Cloud Hoxton Service Release 3 (SR3) is available.</title>
    <link rel="alternate" href="https://spring.io/blog/2020/03/05/spring-cloud-hoxton-service-release-3-sr3-is-available" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Olga Maciaszek-Sharma</name>
    </author>
    <id>tag:spring.io,2020-03-05:3986</id>
    <updated>2020-03-05T17:47:36Z</updated>
    <content type="html">&lt;p&gt;On behalf of the community, I am pleased to announce that the Service Release 3 (SR3) of the &lt;a href="https://cloud.spring.io"&gt;Spring Cloud Hoxton&lt;/a&gt; Release Train is available today. The release can be found in &lt;a href="https://repo1.maven.org/maven2/org/springframework/cloud/spring-cloud-dependencies/Hoxton.SR3/"&gt;Maven Central&lt;/a&gt;. You can check out the Hoxton &lt;a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Hoxton-Release-Notes"&gt;release notes for more information&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a href="#important-security-advisory" class="anchor" name="important-security-advisory"&gt;&lt;/a&gt;Important Security Advisory&lt;/h2&gt;
&lt;p&gt;Spring Cloud Config contains fixes for &lt;a href="https://pivotal.io/security/cve-2020-5405"&gt;CVE-2020-5405&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a href="#notable-changes-in-the-hoxton-release-train" class="anchor" name="notable-changes-in-the-hoxton-release-train"&gt;&lt;/a&gt;Notable Changes in the Hoxton Release Train&lt;/h2&gt;
&lt;p&gt;This milestone was primarily a bugfix release.&lt;/p&gt;
&lt;p&gt;Please see the Hoxton.SR3 &lt;a href="https://github.com/orgs/spring-cloud/projects/36"&gt;Github Project&lt;/a&gt; for all issues closed.&lt;/p&gt;
&lt;p&gt;This milestone release is built with Spring Boot 2.2.5.RELEASE.&lt;/p&gt;&lt;h3&gt;&lt;a href="#spring-cloud-config" class="anchor" name="spring-cloud-config"&gt;&lt;/a&gt;Spring Cloud Config&lt;/h3&gt;
&lt;p&gt;Possibility to override &lt;code&gt;ConfigTokenProvider&lt;/code&gt; was added. Performance issues with &lt;code&gt;KeyStoreTestEncryptorLocator&lt;/code&gt; were fixed.&lt;/p&gt;&lt;h3&gt;&lt;a href="#spring-cloud-contract" class="anchor" name="spring-cloud-contract"&gt;&lt;/a&gt;Spring Cloud Contract&lt;/h3&gt;
&lt;p&gt;Support added for Spring Cloud LoadBalancer in StubRunner. &lt;/p&gt;&lt;h3&gt;&lt;a href="#spring-cloud-circuitbreaker" class="anchor" name="spring-cloud-circuitbreaker"&gt;&lt;/a&gt;Spring Cloud CircuitBreaker&lt;/h3&gt;
&lt;p&gt;Support added for creating and customizing circuit breakers in advance.&lt;/p&gt;&lt;h3&gt;&lt;a href="#spring-cloud-commons" class="anchor" name="spring-cloud-commons"&gt;&lt;/a&gt;Spring Cloud Commons&lt;/h3&gt;
&lt;p&gt;Support was added for instance health checks in Spring Cloud LoadBalancer. LoadBalancer request context was exposed via the API.&lt;/p&gt;&lt;h3&gt;&lt;a href="#spring-cloud-openfeign" class="anchor" name="spring-cloud-openfeign"&gt;&lt;/a&gt;Spring Cloud OpenFeign&lt;/h3&gt;
&lt;p&gt;OpenFeign was upgraded to 10.7.4. Support was added for &lt;code&gt;@MatrixVariable&lt;/code&gt;.&lt;/p&gt;&lt;h3&gt;&lt;a href="#spring-cloud-sleuth" class="anchor" name="spring-cloud-sleuth"&gt;&lt;/a&gt;Spring Cloud Sleuth&lt;/h3&gt;
&lt;p&gt;Support was added for &lt;code&gt;FeignBlockingLoadBalancerClient&lt;/code&gt;.&lt;/p&gt;&lt;h3&gt;&lt;a href="#spring-cloud-gateway" class="anchor" name="spring-cloud-gateway"&gt;&lt;/a&gt;Spring Cloud Gateway&lt;/h3&gt;
&lt;p&gt;Support was added for rate limits below 1 req/s. Enhancements to &lt;code&gt;RetryFilter&lt;/code&gt; were added. &lt;code&gt;ServiceInstance&lt;/code&gt; metadata was added to &lt;code&gt;RouteDefinition&lt;/code&gt; metadata. Header configuration list was provided for spring-cloud-gateway-mvc.&lt;/p&gt;
&lt;p&gt;The following modules were updated as part of Hoxton.SR3:&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Module &lt;/th&gt;
      &lt;th&gt;Version &lt;/th&gt;
      &lt;th&gt;Issues&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Config &lt;/td&gt;
      &lt;td&gt;2.2.2.RELEASE &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-config/milestone/75?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Cloudfoundry &lt;/td&gt;
      &lt;td&gt;2.2.1.RELEASE &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Vault &lt;/td&gt;
      &lt;td&gt;2.2.2.RELEASE &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-vault/milestone/37?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Aws &lt;/td&gt;
      &lt;td&gt;2.2.1.RELEASE &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Bus &lt;/td&gt;
      &lt;td&gt;2.2.1.RELEASE &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Cli &lt;/td&gt;
      &lt;td&gt;2.2.1.RELEASE &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Gcp &lt;/td&gt;
      &lt;td&gt;1.2.2.RELEASE &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Contract &lt;/td&gt;
      &lt;td&gt;2.2.2.RELEASE &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-contract/milestone/62?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Consul &lt;/td&gt;
      &lt;td&gt;2.2.2.RELEASE &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Starter &lt;/td&gt;
      &lt;td&gt;Hoxton.SR3 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Dependencies &lt;/td&gt;
      &lt;td&gt;Hoxton.SR3 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Starter Parent &lt;/td&gt;
      &lt;td&gt;Hoxton.SR3 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Sleuth &lt;/td&gt;
      &lt;td&gt;2.2.2.RELEASE &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-sleuth/milestone/73?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Commons &lt;/td&gt;
      &lt;td&gt;2.2.2.RELEASE &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-commons/milestone/71?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Openfeign &lt;/td&gt;
      &lt;td&gt;2.2.2.RELEASE &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-openfeign/milestone/22?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Zookeeper &lt;/td&gt;
      &lt;td&gt;2.2.0.RELEASE &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Kubernetes &lt;/td&gt;
      &lt;td&gt;1.1.2.RELEASE &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-kubernetes/milestone/18?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Security &lt;/td&gt;
      &lt;td&gt;2.2.1.RELEASE &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Circuitbreaker &lt;/td&gt;
      &lt;td&gt;1.0.2.RELEASE &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-circuitbreaker/milestone/4?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Stream &lt;/td&gt;
      &lt;td&gt;Horsham.SR3 &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-stream/milestone/71?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Gateway &lt;/td&gt;
      &lt;td&gt;2.2.2.RELEASE &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-gateway/milestone/35?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Netflix &lt;/td&gt;
      &lt;td&gt;2.2.2.RELEASE &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-netflix/milestone/86?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Function &lt;/td&gt;
      &lt;td&gt;3.0.3.RELEASE &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Task &lt;/td&gt;
      &lt;td&gt;2.2.3.RELEASE &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;As always, we welcome feedback on &lt;a href="https://github.com/spring-cloud/"&gt;GitHub&lt;/a&gt;, on &lt;a href="https://gitter.im/spring-cloud/spring-cloud"&gt;Gitter&lt;/a&gt;, on &lt;a href="https://stackoverflow.com/questions/tagged/spring-cloud"&gt;Stack Overflow&lt;/a&gt;, or on &lt;a href="https://twitter.com/SpringCloud"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To get started with Maven with a BOM (dependency management only):&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;&lt;br/&gt;&amp;lt;dependencyManagement&amp;gt;&#xD;
    &amp;lt;dependencies&amp;gt;&#xD;
        &amp;lt;dependency&amp;gt;&#xD;
            &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
            &amp;lt;artifactId&amp;gt;spring-cloud-dependencies&amp;lt;/artifactId&amp;gt;&#xD;
            &amp;lt;version&amp;gt;Hoxton.SR3&amp;lt;/version&amp;gt;&#xD;
            &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;&#xD;
            &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;&#xD;
        &amp;lt;/dependency&amp;gt;&#xD;
    &amp;lt;/dependencies&amp;gt;&#xD;
&amp;lt;/dependencyManagement&amp;gt;&#xD;
&amp;lt;dependencies&amp;gt;&#xD;
    &amp;lt;dependency&amp;gt;&#xD;
        &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
        &amp;lt;artifactId&amp;gt;spring-cloud-starter-config&amp;lt;/artifactId&amp;gt;&#xD;
    &amp;lt;/dependency&amp;gt;&#xD;
    &amp;lt;dependency&amp;gt;&#xD;
        &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
        &amp;lt;artifactId&amp;gt;spring-cloud-starter-netflix-eureka-client&amp;lt;/artifactId&amp;gt;&#xD;
    &amp;lt;/dependency&amp;gt;&#xD;
    ...&#xD;
&amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or with Gradle:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;buildscript {&#xD;
dependencies {&#xD;
classpath &amp;quot;io.spring.gradle:dependency-management-plugin:1.0.9.RELEASE&amp;quot;&#xD;
}&#xD;
}&#xD;
&#xD;
&#xD;
&#xD;
apply plugin: &amp;quot;io.spring.dependency-management&amp;quot;&#xD;
&#xD;
dependencyManagement {&#xD;
imports {&#xD;
mavenBom &amp;#39;org.springframework.cloud:spring-cloud-dependencies:Hoxton.SR3&amp;#39;&#xD;
}&#xD;
}&#xD;
&#xD;
dependencies {&#xD;
compile &amp;#39;org.springframework.cloud:spring-cloud-starter-config&amp;#39;&#xD;
compile &amp;#39;org.springframework.cloud:spring-cloud-starter-netflix-eureka-client&amp;#39;&#xD;
...&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Security 5.3 goes GA</title>
    <link rel="alternate" href="https://spring.io/blog/2020/03/05/spring-security-5-3-goes-ga" />
    <category term="releases" label="Releases" />
    <author>
      <name>Josh Cummings</name>
    </author>
    <id>tag:spring.io,2020-03-04:3985</id>
    <updated>2020-03-05T17:12:57Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;On behalf of the community, it is my pleasure to announce the general availability of Spring Security 5.3. This release is the result of the work that went into &lt;a href="https://github.com/spring-projects/spring-security/releases/tag/5.3.0.M1"&gt;5.3.0.M1&lt;/a&gt;, &lt;a href="https://github.com/spring-projects/spring-security/releases/tag/5.3.0.RC1"&gt;5.3.0.RC1&lt;/a&gt;, and &lt;a href="https://github.com/spring-projects/spring-security/releases/tag/5.3.0.RELEASE"&gt;5.3.0.RELEASE&lt;/a&gt;. In combination they close 200+ tickets.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;You can find the highlights of 5.3 in the &lt;a href="https://docs.spring.io/spring-security/site/docs/5.3.0.RELEASE/reference/html5/#new"&gt;What&amp;#8217;s new&lt;/a&gt; section of the Spring Security reference.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;As always, we look forward to hearing your &lt;a href="https://github.com/spring-projects/spring-security/issues"&gt;feedback&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="https://projects.spring.io/spring-security/"&gt;Project Site&lt;/a&gt; |
&lt;a href="https://docs.spring.io/spring-security/site/docs/5.3.0.RELEASE/reference/htmlsingle/"&gt;Reference&lt;/a&gt;
| &lt;a href="https://stackoverflow.com/questions/tagged/spring-security"&gt;Help&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Session Dragonfruit-RC1, Corn-SR2 and Bean-SR10 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2020/03/04/spring-session-dragonfruit-rc1-corn-sr2-and-bean-sr10-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Eleftheria Stein-Kousathana</name>
    </author>
    <id>tag:spring.io,2020-03-04:3984</id>
    <updated>2020-03-04T22:20:26Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;On behalf of the community I¡¯m pleased to announce the releases of Spring Session &lt;code&gt;Dragonfruit-RC1&lt;/code&gt;, &lt;code&gt;Corn-SR2&lt;/code&gt; and &lt;code&gt;Bean-SR10&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="spring-session-dragonfruit-rc1"&gt;&lt;a class="anchor" href="#spring-session-dragonfruit-rc1"&gt;&lt;/a&gt;Spring Session Dragonfruit-RC1&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The &lt;code&gt;Dragonfruit-RC1&lt;/code&gt; release is based on:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Spring Session core modules &lt;code&gt;2.3.0.RC1&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring Session Data Geode &lt;code&gt;2.3.0.RC1&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring Session Data MongoDB &lt;code&gt;2.3.0.RC1&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Additional details of these releases can be found in &lt;a href="https://github.com/spring-projects/spring-session/milestone/73?closed=1"&gt;the changelog&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="spring-session-corn-sr2"&gt;&lt;a class="anchor" href="#spring-session-corn-sr2"&gt;&lt;/a&gt;Spring Session Corn-SR2&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The &lt;code&gt;Corn-SR2&lt;/code&gt; release is based on:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Spring Session core modules &lt;code&gt;2.2.2.RELEASE&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring Session Data Geode &lt;code&gt;2.2.3.RELEASE&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring Session Data MongoDB &lt;code&gt;2.2.3.RELEASE&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Additional details of these releases can be found in &lt;a href="https://github.com/spring-projects/spring-session/milestone/75?closed=1"&gt;the changelog&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="spring-session-bean-sr10"&gt;&lt;a class="anchor" href="#spring-session-bean-sr10"&gt;&lt;/a&gt;Spring Session Bean-SR10&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The &lt;code&gt;Bean-SR10&lt;/code&gt; release is based on:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Spring Session core modules &lt;code&gt;2.1.11.RELEASE&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring Session Data Geode &lt;code&gt;2.1.9.RELEASE&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring Session Data MongoDB &lt;code&gt;2.1.7.RELEASE&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Additional details of these releases can be found in &lt;a href="https://github.com/spring-projects/spring-session/milestone/74?closed=1"&gt;the changelog&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="https://projects.spring.io/spring-session/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://docs.spring.io/spring-session/docs/2.3.0.RC1/reference/html5/"&gt;Documentation&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-session/issues"&gt;Issues&lt;/a&gt; | &lt;a href="https://gitter.im/spring-projects/spring-session"&gt;Gitter&lt;/a&gt; | &lt;a href="https://stackoverflow.com/questions/tagged/spring-session"&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Tips: Kotlin and Spring Security</title>
    <link rel="alternate" href="https://spring.io/blog/2020/03/04/spring-tips-kotlin-and-spring-security" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2020-03-04:3982</id>
    <updated>2020-03-04T03:19:49Z</updated>
    <content type="html">&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/V1ce8RdTdo0" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;Hi, Spring fans! Welcome to another installment of &lt;em&gt;Spring Tips&lt;/em&gt;. In this episode we&amp;rsquo;re going to look at the new Kotlin DSL for Spring Security. I love Kotlin. I introduced Kotlin in several other Spring Tips videos: &lt;a href="https://spring.io/blog/2016/10/19/spring-tips-the-kotlin-programming-language"&gt;The Kotlin Programming Language&lt;/a&gt;, &lt;a href="https://spring.io/blog/2017/11/08/spring-tips-bootiful-kotlin-redux"&gt;Bootiful Kotlin Redux&lt;/a&gt;, and &lt;a href="https://spring.io/blog/2019/06/12/spring-tips-spring-s-support-for-kotlin-coroutines"&gt;Spring&amp;rsquo;s Support for Coroutines&lt;/a&gt;. Some of those videos are &lt;em&gt;very&lt;/em&gt; old! There are already a number of different projects in the Spring diaspora that are shipping Kotlin DSLs. They include, among others, Spring Framework, Spring Webflux, Spring Data, Spring Cloud Contract and Spring Cloud Gateway. And now, Spring Security! &lt;/p&gt;
&lt;p&gt;Spring Security is an amazing project - it solves some of the hardest problems in the industry and helps people secure their applications. And, as if that weren&amp;rsquo;t enough, it&amp;rsquo;s displayed a steadfast determination to make security &lt;em&gt;easy&lt;/em&gt;. If you ever used Spring Security in its earliest incarnations, you&amp;rsquo;d know that it required &lt;em&gt;loads&lt;/em&gt; of XML - pages! - to get anything done. That improved to the point where in Spring Security 3 you could lock down an applicatino with common sense defaults with one or two stanzas of XML. Then, in Spring Security 4 they introduced a Java DSL that gave people the power of their compilers to help them validate things. Gradually, over time, Spring Security also introduced common sense defaults. Nowadays, you can register a &lt;code&gt;UserDetailsService&lt;/code&gt; and Spring Security will lock down all HTTP endpoints in a Servlet-based HTTP application and require authentication. Couldn&amp;rsquo;t be easier! Or could it? In Spring Security 5.2, they introduced some much-appreciated refinements to Spring Security. Now, in addition to using the fluid Java config DSL of yore, there&amp;rsquo;s also a new approach where you can provide a lambda and be given a context object that you can then use. No longer do you need to indent your Spring Security APIs for their intent to be understood! And now, in this installment, we&amp;rsquo;re going to take things to the next level with a very quick look at the brand new Spring Security Kotlin DSL. &lt;/p&gt;
&lt;p&gt;Remember, Spring Security addresses two orthagonal concerns: authentication and authorization. Authentication answers the question: &amp;ldquo;&lt;em&gt;who&lt;/em&gt; is making the request?&amp;rdquo; Is it Josh, or Jane? Authorization answers the question &amp;ldquo;what permissions does the requester have once inside the system?&amp;rdquo; Authentication is all about plugging in identity providers. There are a million ways to do that (Active Directory, in-memory usernames and passwords, LDAP, SAML, etc.) It&amp;rsquo;s more about plugging in implementations. We&amp;rsquo;re just going to use an in-memory username and password authentication manager since we need it and that&amp;rsquo;s not where the DSL really shines. &lt;/p&gt;
&lt;p&gt;DSLs are most useful not when swapping out implementations of a given type, but when describing rules or customizing behavior. So, we&amp;rsquo;ll use the Spring Security DSL to customize the authorization behavior. &lt;/p&gt;
&lt;p&gt;The following is a Spring Boot-based application that uses Spring Security. I generated a new project from the &lt;a href="http://start.Spring.io"&gt;Spring Initializr&lt;/a&gt; that uses Kotlin, and uses Spring Security and Spring Boot 2.3.M2 or later. It uses the functional bean registration DSL to programatically register beans. We talked about programatic bean registration &lt;a href="https://spring.io/blog/2017/03/01/spring-tips-programmatic-bean-registration-in-spring-framework-5"&gt;in a &lt;em&gt;Spring Tips&lt;/em&gt; video from waaaaay back in 2017&lt;/a&gt;. Granted, that video demonstrated its use in Java, but the application is basically the same in Kotlin: you register a bean by wrapping it a call to the &lt;code&gt;bean&lt;/code&gt; function. &lt;/p&gt;
&lt;p&gt;The first bean is the &lt;code&gt;InMemoryUserDetailsManager&lt;/code&gt;. The second bean is a functional HTTP endpoint, &lt;code&gt;/greetings&lt;/code&gt;. When an HTTP request comes in, we extract the authenticated principal from the current request, extract the name and then build a &lt;code&gt;ServerResponse&lt;/code&gt; whose body will be represented by a &lt;code&gt;Map&amp;lt;String,String&amp;gt;&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;The interesting bit is the class &lt;code&gt;KotlinSecurityConfiguration&lt;/code&gt;. It extends &lt;code&gt;WebSecurityConfigurerAdapter&lt;/code&gt;. There are a few methods we might override there, but I chose to override the &lt;code&gt;configure&lt;/code&gt; method to specify two things: that I wanted to opt-in to HTTP BASIC authentication, and to specify what routes require authentication and which are wide-open. The configuration below stipultes that all requests to &lt;code&gt;/greetings/**&lt;/code&gt; (the &lt;code&gt;/greetings/&lt;/code&gt; endpoint, and anything below it, like &lt;code&gt;/greetings/foo&lt;/code&gt;) must be authenticated. The second rule says that everything else is wide-open. It&amp;rsquo;s very important that the more specific rule - &lt;code&gt;/greetings/**&lt;/code&gt; - come before the more wide-open rule. The rules are evaluated in order, from top to bottom. If we&amp;rsquo;d put the second rule first, then it would match for every request and we&amp;rsquo;d never need to evaluate the rule for &lt;code&gt;/greetings&lt;/code&gt; - it would be left effectively wide-open! &lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint kotlin"&gt;package com.example.kotlinsecurity&#xD;
&#xD;
import org.springframework.boot.autoconfigure.SpringBootApplication&#xD;
import org.springframework.boot.runApplication&#xD;
import org.springframework.context.annotation.Bean&#xD;
import org.springframework.context.support.beans&#xD;
import org.springframework.security.config.annotation.web.builders.HttpSecurity&#xD;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity&#xD;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter&#xD;
import org.springframework.security.config.web.servlet.invoke&#xD;
import org.springframework.security.core.userdetails.User&#xD;
import org.springframework.security.provisioning.InMemoryUserDetailsManager&#xD;
import org.springframework.web.servlet.function.ServerResponse&#xD;
import org.springframework.web.servlet.function.router&#xD;
&#xD;
@SpringBootApplication&#xD;
class KotlinSecurityApplication&#xD;
&#xD;
@EnableWebSecurity&#xD;
class KotlinSecurityConfiguration : WebSecurityConfigurerAdapter() {&#xD;
&#xD;
	override fun configure(http: HttpSecurity?) {&#xD;
		http {&#xD;
			httpBasic {}&#xD;
			authorizeRequests {&#xD;
				authorize(&amp;quot;/greetings/**&amp;quot;, hasAuthority(&amp;quot;ROLE_ADMIN&amp;quot;))&#xD;
				authorize(&amp;quot;/**&amp;quot;, permitAll)&#xD;
			}&#xD;
		}&#xD;
	}&#xD;
}&#xD;
&#xD;
fun main(args: Array&amp;lt;String&amp;gt;) {&#xD;
	runApplication&amp;lt;KotlinSecurityApplication&amp;gt;(*args) {&#xD;
		addInitializers(beans {&#xD;
			bean {&#xD;
&#xD;
				fun user(user: String, pw: String, vararg roles: String) =&#xD;
                    User.withDefaultPasswordEncoder().username(user).password(pw).roles(*roles).build()&#xD;
&#xD;
				InMemoryUserDetailsManager(user(&amp;quot;jlong&amp;quot;, &amp;quot;pw&amp;quot;, &amp;quot;USER&amp;quot;), user(&amp;quot;rwinch&amp;quot;, &amp;quot;pw1&amp;quot;, &amp;quot;USER&amp;quot;, &amp;quot;ADMIN&amp;quot;))&#xD;
			}&#xD;
			bean {&#xD;
				router {&#xD;
					GET(&amp;quot;/greetings&amp;quot;) { request -&amp;gt;&#xD;
						request.principal().map { it.name }.map { ServerResponse.ok().body(mapOf(&amp;quot;greeting&amp;quot; to &amp;quot;Hello, $it&amp;quot;)) }.orElseGet { ServerResponse.badRequest().build() }&#xD;
					}&#xD;
				}&#xD;
			}&#xD;
		})&#xD;
	}&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a href="#conclusion" class="anchor" name="conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this installment, we introduced Spring Security&amp;rsquo;s new Kotlin DSL. There&amp;rsquo;s more text than there is code because, and this is profound, Spring Security does a &lt;em&gt;lot&lt;/em&gt; of stuff for you, so that the surface area of the API is literally the bare minimum in customizations you want to do beyond the already sensible defaults. I hope you learned something new, and will give the Spring Security DSL a shot. &lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - March 3rd, 2020</title>
    <link rel="alternate" href="https://spring.io/blog/2020/03/03/this-week-in-spring-march-3rd-2020" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2020-03-03:3981</id>
    <updated>2020-03-03T21:42:00Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! This week, I&amp;rsquo;m home, in San Francisco, California, in the US, where the fears around Coronavirus have heated up and made things problematic for those of us who travel. It looks like, at least for the immediate future, I&amp;rsquo;ll be - basically - grounded. Stay safe out there, my friends. &lt;/p&gt;
&lt;p&gt;The good news is that this will let me get to a ton more other things &lt;a href="http://spring.io/blogs"&gt;like the blogs&lt;/a&gt;, &lt;a href="http://twitter.com/BootifulPodcast"&gt;A Bootiful Podcast&lt;/a&gt; and &lt;a href="http://twitter.com/SpringTipsLive"&gt;Spring Tips&lt;/a&gt; and of course my &lt;a href="http://ReactiveSpring.io"&gt;Reactive Spring book&lt;/a&gt;. And of course, we&amp;rsquo;ve got a ton of things to get to today in today&amp;rsquo;s installment of &lt;em&gt;This Week in Spring&lt;/em&gt;, so let&amp;rsquo;s get to it! &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/03/02/getting-started-with-rsocket-spring-boot-server"&gt;Getting Started With RSocket: Spring Boot Server&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/02/28/a-bootiful-podcast-spring-cloud-contract-lead-marcin-grzejszczak-on-spring-cloud-contract-spring-cloud-sleuth-continuous-integration-and-more"&gt;A Bootiful Podcast: Spring Cloud Contract lead Marcin Grzejszczak on Spring Cloud Contract, Spring Cloud Sleuth, Continuous Integration and more&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/02/27/spring-boot-2-2-5-released"&gt;Spring Boot 2.2.5 released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/02/27/spring-boot-2-1-13-released"&gt;Spring Boot 2.1.13 released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/02/27/cve-reports-published-for-reactor-netty"&gt;CVE Reports Published for Reactor Netty&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/02/26/spring-data-moore-sr5-and-lovelace-sr16-released"&gt;Spring Data Moore SR5 and Lovelace SR16 released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://m.youtube.com/watch?v=70gWx2APczA"&gt;Another fine installment from Greg Turnquist, this one on Messaging with Spring Boot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;This is an interesting post on &lt;a href="https://dev.to/onlinepajak/database-schema-changes-with-hibernate-and-spring-boot-3f5k"&gt;database schema changes with Hibernate and Spring Boot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/springcloud/status/1233469658910674946"&gt;Don&amp;rsquo;t miss the opportunity to meet Spring Cloud Gateway lead Spencer Gibb&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Congrats to the Confluent team &lt;a href="https://twitter.com/gAmUssA/status/1233183125150355456?s=20"&gt;on their new developer portal&lt;/a&gt; chock full of good stuff!&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/02/27/cve-reports-published-for-reactor-netty"&gt;There are new Spring Boot releases, including CVE fixes for Netty&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/cloudfoundry/status/1233045258809888768"&gt;I love the Cloud Foundry on Kubernetes opportunity&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/david_syer/status/1232675337814921217?s=12"&gt;The good Dr. Dave Syer demonstrating how to start a Spring Boot application, like the Petclinic, used a pre-cached JVM tool&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://bddy.me/2SZLsmS"&gt;The Cloud Foundry community is looking for a handful of volunteers to help reconstitute a multi-member vulnerability management team for CFF projects. &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-projects/spring-boot/issues/19988"&gt;There&amp;rsquo;s now out-of-the-box support for R2DBC in Spring Boot&lt;/a&gt;!&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://spring.io"&gt;have you seen the new Spring website?&lt;/a&gt; - it&amp;rsquo;s perty!&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Getting Started With RSocket: Spring Boot Server</title>
    <link rel="alternate" href="https://spring.io/blog/2020/03/02/getting-started-with-rsocket-spring-boot-server" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Ben Wilcock</name>
    </author>
    <id>tag:spring.io,2020-02-27:3975</id>
    <updated>2020-03-02T16:00:00Z</updated>
    <content type="html">&lt;p&gt;&lt;strong&gt;Time: approximately 15 mins.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In the diverse world of microservices, HTTP is the undisputed leader in agent-to-agent communications. It¡¯s mature, well established, and everywhere. But in some cases, HTTP request-response can be cumbersome. What if you need communication patterns beyond traditional request-response, such as fire-and-forget or streaming? And what if you want to send messages in either direction? &lt;/p&gt;
&lt;p&gt;With HTTP, there are ways to achieve this but it¡¯s not what the protocol was built for. Many of the solutions come with additional tradeoffs or shortcomings. Plus, here¡¯s no rulebook that says ¡°thou shalt always use HTTP¡±, messaging protocols like AMQP proved that already. So, it¡¯s good to know what your options are, and healthy to add a few new technologies to your list every once in a while. This post is about one such alternative?RSocket.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://rsocket.io/"&gt;RSocket&lt;/a&gt; is a new messaging protocol that&amp;rsquo;s designed to solve some common microservice communication challenges. With RSocket you get a flexible protocol that works over TCP or WebSockets. This means you can do binary messages without conversion. You get modern controls like multiplexing, back-pressure, resumption, and routing, and you get multiple messaging modes including fire-and-forget, request-response, and streaming. RSocket is fully &lt;a href="https://projectreactor.io/"&gt;reactive&lt;/a&gt; too, so it&amp;rsquo;s ideal for your high-throughput microservice applications. Early adopters include Netflix, Pivotal, Alibaba, and Facebook?all of them experts in delivering scalable Internet-based services.&lt;/p&gt;
&lt;p&gt;In this post?which is the first in a series?you&amp;rsquo;ll learn how to get started with RSocket. You¡¯ll become familiar with how it works, and experience some of its power. By the end of the series, you¡¯ll have added RSocket to your skillset so that next time you¡¯re figuring out your options, you¡¯ll have one more protocol to choose from.&lt;/p&gt;&lt;h1&gt;&lt;a href="#let-s-get-started-hellip" class="anchor" name="let-s-get-started-hellip"&gt;&lt;/a&gt;Let¡¯s Get Started&amp;hellip;&lt;/h1&gt;
&lt;p&gt;As request-response is familiar ground for most web developers, we¡¯ll begin our journey into RSocket with this pattern. The semantics of request-response are fairly straightforward, you send one request, you get one response. HTTP is built on this basic interaction and it¡¯s incredibly common. &lt;/p&gt;
&lt;p&gt;In this tutorial, you¡¯ll discover how to do request-response with RSocket using Spring Boot as your server and a terminal application as your client.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Request-response is just one of the four interaction models supported by Spring and RSocket. We¡¯ll cover the others in future posts.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When you follow the steps below, you&amp;rsquo;ll notice that the amount of code required to build an RSocket server with Spring Boot is very small. The code has been provided for you &lt;a href="https://github.com/benwilcock/spring-rsocket-demo"&gt;here&lt;/a&gt; but you prefer you could also write the code from scratch yourself in a few minutes.&lt;/p&gt;&lt;h1&gt;&lt;a href="#step-1-setup-your-environment" class="anchor" name="step-1-setup-your-environment"&gt;&lt;/a&gt;Step 1: Setup Your Environment&lt;/h1&gt;
&lt;p&gt;First, check you have the following prerequisites installed:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;A &lt;a href="https://adoptopenjdk.net/"&gt;Java SDK&lt;/a&gt; of version 8 or above (to check, use java -version at the terminal)&lt;/li&gt;
  &lt;li&gt;A working &lt;a href="https://spring.io/tools"&gt;Java IDE&lt;/a&gt; (I¡¯m using IntelliJ IDEA)&lt;/li&gt;
  &lt;li&gt;A folder containing the cloned or extracted &lt;a href="https://github.com/benwilcock/spring-rsocket-demo"&gt;demo code sample&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Linux Bash/ZSH shell (if you&amp;rsquo;re a Windows user, check the note below)&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
  &lt;p&gt;If you¡¯re a Windows user, switch to Microsoft&amp;rsquo;s &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/faq"&gt;Windows Subsystem for Linux&lt;/a&gt;. Microsoft&amp;rsquo;s instructions on how to do this are &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now, Make the downloaded project folder your current directory in the terminal:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint bash"&gt;cd spring-rsocket-demo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, download the excellent &lt;a href="https://github.com/making/rsc"&gt;RSocket Client CLI&lt;/a&gt; by &lt;a href="https://github.com/making"&gt;Toshiaki Maki&lt;/a&gt; into the &lt;code&gt;rsocket-server&lt;/code&gt; folder of your cloned or extracted code. There is an official RSocket CLI &lt;a href="https://github.com/rsocket/rsocket-cli"&gt;elsewhere&lt;/a&gt;, but Toshiaki¡¯s is a little easier to use. In the terminal, download the JAR file as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint bash"&gt;cd rsocket-server&#xD;
wget -O rsc.jar https://github.com/making/rsc/releases/download/0.4.2/rsc-0.4.2.jar
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You will use this client later to talk to the RSocket server, but for now, test it¡¯s working by calling the help command like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint bash"&gt;java -jar rsc.jar --help
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You should see some output like that below (which I&amp;rsquo;ve truncated), explaining the command&amp;rsquo;s usage and options. &lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint none"&gt;usage: rsc Uri [Options]&#xD;
&#xD;
Non-option arguments:&#xD;
[String: Uri]&#xD;
&#xD;
Option                              Description&#xD;
------                              -----------&#xD;
--channel                           Shortcut of --im REQUEST_CHANNEL&#xD;
-d, --data [String]                 Data. Use &amp;#39;-&amp;#39; to read data from&#xD;
&#xD;
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Leave this terminal window open, you&amp;rsquo;ll need it later.&lt;/p&gt;&lt;h1&gt;&lt;a href="#step-2-examine-the-server-code" class="anchor" name="step-2-examine-the-server-code"&gt;&lt;/a&gt;Step 2: Examine the Server Code&lt;/h1&gt;
&lt;p&gt;Open the rsocket-server project in your IDE and examine the code. As you can see, there is very little code required to stand up an RSocket server in Spring Boot. Here are some highlights:&lt;/p&gt;&lt;h4&gt;&lt;a href="#the-project-file" class="anchor" name="the-project-file"&gt;&lt;/a&gt;The Project File&lt;/h4&gt;
&lt;p&gt;In the project&amp;rsquo;s &lt;code&gt;pom.xml&lt;/code&gt; file, you can see the &lt;code&gt;&amp;lt;dependencies&amp;gt;&lt;/code&gt; required by the Spring Boot RSocket server. Spring Boot version &lt;code&gt;2.2.5.RELEASE&lt;/code&gt; is used because, at the time of writing, this version has the most production-ready RSocket features. The project also depends on &lt;code&gt;lombok&lt;/code&gt; and the &lt;code&gt;spring-boot-starter-rsocket&lt;/code&gt; library. Lombok adds constructors, getters, setters, and equals to Java data classes and also eases access to things like logs. The Spring Boot Starter for RSocket integrates RSocket with Spring Boot and automatically configures some RSocket infrastructure for you at runtime.&lt;/p&gt;&lt;h4&gt;&lt;a href="#the-application-properties" class="anchor" name="the-application-properties"&gt;&lt;/a&gt;The Application Properties&lt;/h4&gt;
&lt;p&gt;In the &lt;code&gt;application.properties&lt;/code&gt; file, the TCP port for the RSocket server is set to &lt;code&gt;7000&lt;/code&gt;, and Spring Boot&amp;rsquo;s lazy initialization feature is switched on.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;spring.rsocket.server.port=7000&#xD;
spring.main.lazy-initialization=true
&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;&lt;a href="#the-message-class" class="anchor" name="the-message-class"&gt;&lt;/a&gt;The Message Class&lt;/h4&gt;
&lt;p&gt;The first class to take a look at in more detail is called &lt;code&gt;Message.java&lt;/code&gt;. This Lombok &lt;code&gt;@Data&lt;/code&gt; class is used to model the request and response messages between the client and the server (or the ¡®requester¡¯ and ¡®responder¡¯ if you prefer). The class looks like this¡¦&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@Data&#xD;
@AllArgsConstructor&#xD;
@NoArgsConstructor&#xD;
public class Message {&#xD;
    private String origin;&#xD;
    private String interaction;&#xD;
    private long index;&#xD;
    private long created = Instant.now().getEpochSecond();&#xD;
&#xD;
    public Message(String origin, String interaction) {&#xD;
        this.origin = origin;&#xD;
        this.interaction = interaction;&#xD;
        this.index = 0;&#xD;
    }&#xD;
&#xD;
    public Message(String origin, String interaction, long index) {&#xD;
        this.origin = origin;&#xD;
        this.interaction = interaction;&#xD;
        this.index = index;&#xD;
    }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using this class, you can say where a message came from (its &lt;code&gt;origin&lt;/code&gt;), which messaging style it was intended to use (the &lt;code&gt;interaction&lt;/code&gt;), and which sequence number a message has in a sequence of messages (its &lt;code&gt;index&lt;/code&gt;). Lombok simplifies the code by providing constructors, getters, setters, toString, and hashcode implementations.&lt;/p&gt;&lt;h4&gt;&lt;a href="#the-controller-class" class="anchor" name="the-controller-class"&gt;&lt;/a&gt;The Controller Class&lt;/h4&gt;
&lt;p&gt;The RSocket server controller code can be found in the &lt;code&gt;RSocketController.java&lt;/code&gt; file. This class is annotated as a Spring &lt;code&gt;@Controller&lt;/code&gt; which essentially means that it declares service endpoints?in this case, RSocket endpoints. &lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@Controller&#xD;
public class RSocketController {&#xD;
&#xD;
    @MessageMapping(&amp;quot;request-response&amp;quot;)&#xD;
    Message requestResponse(Message request) {&#xD;
            log.info(&amp;quot;Received request-response request: {}&amp;quot;, request);&#xD;
            // create a single Message and return it&#xD;
            return new Message(SERVER, RESPONSE);&#xD;
    }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Inside the class, there is a method called &lt;code&gt;requestResponse()&lt;/code&gt; which accepts a single &lt;code&gt;Message&lt;/code&gt; object (the request) and returns a single &lt;code&gt;Message&lt;/code&gt; object (the response). &lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll notice that this &lt;code&gt;requestResponse()&lt;/code&gt; method is decorated with the &lt;code&gt;@MessageMapping(&amp;quot;request-response&amp;quot;)&lt;/code&gt; annotation. This annotation declares that any messages with metadata containing the RSocket route of &lt;code&gt;request-response&lt;/code&gt; should be handled by this method. You will use this route later when you send a request message from your client. &lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Did you notice how this is slightly different from Spring¡¯s REST controllers? With REST controllers, URL path mappings like &lt;code&gt;/hello&lt;/code&gt; are used to associate HTTP calls with their handler methods.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That&amp;rsquo;s it for code. Let&amp;rsquo;s try it.&lt;/p&gt;&lt;h1&gt;&lt;a href="#step-3-start-the-spring-boot-rsocket-server" class="anchor" name="step-3-start-the-spring-boot-rsocket-server"&gt;&lt;/a&gt;Step 3: Start The Spring Boot RSocket Server&lt;/h1&gt;
&lt;p&gt;Leaving your existing terminal window open, in a second terminal window, make the &lt;code&gt;rsocket-server&lt;/code&gt; folder your current directory. Then build and run the RSocket server using the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint bash"&gt;./mvnw clean package spring-boot:run -DskipTests=true
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
  &lt;p&gt;Alternatively, you can use the &amp;ldquo;Build&amp;rdquo; and &amp;ldquo;Run&amp;rdquo; commands in your Java IDE if you prefer.&lt;/p&gt;
&lt;/blockquote&gt;&lt;h1&gt;&lt;a href="#step-4-send-a-command-to-the-server-with-the-rsocket-cli" class="anchor" name="step-4-send-a-command-to-the-server-with-the-rsocket-cli"&gt;&lt;/a&gt;Step 4: Send A Command To The Server With The RSocket CLI&lt;/h1&gt;
&lt;p&gt;Next, you¡¯ll send a message to the running server using the RSocket client &lt;code&gt;rsc.jar&lt;/code&gt; that you downloaded and tested in Step 1. Go back to the original terminal window where you had the &lt;code&gt;--help&lt;/code&gt; text and issue the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint bash"&gt;java -jar rsc.jar --debug --request --data &amp;quot;{\&amp;quot;origin\&amp;quot;:\&amp;quot;Client\&amp;quot;,\&amp;quot;interaction\&amp;quot;:\&amp;quot;Request\&amp;quot;}&amp;quot; --route request-response tcp://localhost:7000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You¡¯ll notice that the command has an RSocket message route declared (which is achieved by adding the &lt;code&gt;--route&lt;/code&gt; option and specifying a name for the route). In this case, the route is &lt;code&gt;request-response&lt;/code&gt; which matches the &lt;code&gt;@MessageMapping&lt;/code&gt; declared in the request-response handler method in the &lt;code&gt;RSocketController.java&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When the command runs, you will see some debug information in the terminal window explaining what happened during the request-response interaction. It looks something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint none"&gt;2020-02-27 11:20:21.806 DEBUG --- [actor-tcp-nio-1] i.r.FrameLogger : sending -&amp;gt;&#xD;
Frame =&amp;gt; Stream ID: 1 Type: REQUEST_RESPONSE Flags: 0b100000000 Length: 69&#xD;
Metadata:&#xD;
         +-------------------------------------------------+&#xD;
         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |&#xD;
+--------+-------------------------------------------------+----------------+&#xD;
|00000000| 10 72 65 71 75 65 73 74 2d 72 65 73 70 6f 6e 73 |.request-respons|&#xD;
|00000010| 65                                              |e               |&#xD;
+--------+-------------------------------------------------+----------------+&#xD;
Data:&#xD;
         +-------------------------------------------------+&#xD;
         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |&#xD;
+--------+-------------------------------------------------+----------------+&#xD;
|00000000| 7b 22 6f 72 69 67 69 6e 22 3a 22 43 6c 69 65 6e |{&amp;quot;origin&amp;quot;:&amp;quot;Clien|&#xD;
|00000010| 74 22 2c 22 69 6e 74 65 72 61 63 74 69 6f 6e 22 |t&amp;quot;,&amp;quot;interaction&amp;quot;|&#xD;
|00000020| 3a 22 52 65 71 75 65 73 74 22 7d                |:&amp;quot;Request&amp;quot;}     |&#xD;
+--------+-------------------------------------------------+----------------+&#xD;
2020-02-27 11:20:21.927 DEBUG --- [actor-tcp-nio-1] i.r.FrameLogger : receiving -&amp;gt;&#xD;
Frame =&amp;gt; Stream ID: 1 Type: NEXT_COMPLETE Flags: 0b1100000 Length: 81&#xD;
Data:&#xD;
         +-------------------------------------------------+&#xD;
         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |&#xD;
+--------+-------------------------------------------------+----------------+&#xD;
|00000000| 7b 22 6f 72 69 67 69 6e 22 3a 22 53 65 72 76 65 |{&amp;quot;origin&amp;quot;:&amp;quot;Serve|&#xD;
|00000010| 72 22 2c 22 69 6e 74 65 72 61 63 74 69 6f 6e 22 |r&amp;quot;,&amp;quot;interaction&amp;quot;|&#xD;
|00000020| 3a 22 52 65 73 70 6f 6e 73 65 22 2c 22 69 6e 64 |:&amp;quot;Response&amp;quot;,&amp;quot;ind|&#xD;
|00000030| 65 78 22 3a 30 2c 22 63 72 65 61 74 65 64 22 3a |ex&amp;quot;:0,&amp;quot;created&amp;quot;:|&#xD;
|00000040| 31 35 38 32 38 30 32 34 32 31 7d                |1582802421}     |&#xD;
+--------+-------------------------------------------------+----------------+&#xD;
{&amp;quot;origin&amp;quot;:&amp;quot;Server&amp;quot;,&amp;quot;interaction&amp;quot;:&amp;quot;Response&amp;quot;,&amp;quot;index&amp;quot;:0,&amp;quot;created&amp;quot;:1582802421}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The debug output you see is split into three &amp;lsquo;message frames&amp;rsquo;. The first message frame is labeled &lt;code&gt;Metadata&lt;/code&gt;. In this case, it shows the routing metadata (&lt;code&gt;request-response&lt;/code&gt;) being sent to the server. The second frame shows the &lt;code&gt;Data&lt;/code&gt; message that the client is sending to the server (a JSON string). The third frame shows the server&amp;rsquo;s response message back to the client (also a JSON string).&lt;/p&gt;
&lt;p&gt;On the very last line, you can see the JSON formatted response from the server printed in isolation, confirming that our command message was successfully received and acknowledged by the server:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint bash"&gt;{&amp;quot;origin&amp;quot;:&amp;quot;Server&amp;quot;,&amp;quot;interaction&amp;quot;:&amp;quot;Response&amp;quot;,&amp;quot;index&amp;quot;:0,&amp;quot;created&amp;quot;:1582802421}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Congratulations! You&amp;rsquo;re done. You just sent a request-response message using RSocket. You can now stop the RSocket server by pressing &lt;code&gt;Ctrl-C&lt;/code&gt; in the terminal window or by closing it. If you used your IDE to run the RSocket server, you can stop the process in your IDE in the usual way.&lt;/p&gt;&lt;h1&gt;&lt;a href="#how-it-works" class="anchor" name="how-it-works"&gt;&lt;/a&gt;How It Works&lt;/h1&gt;
&lt;p&gt;The RSocket &lt;code&gt;rsc&lt;/code&gt; client that you downloaded sends a request message to the &lt;code&gt;RSocketController&lt;/code&gt; using the RSocket messaging protocol. The message is sent over TCP to the address &lt;code&gt;tcp://localhost:7000&lt;/code&gt; where the server is waiting. &lt;/p&gt;
&lt;p&gt;A message routing instruction is sent in the first message frame. This routing instruction is set using the &lt;code&gt;--route&lt;/code&gt; option of the CLI client and is set to &lt;code&gt;request-response&lt;/code&gt;. Spring uses this routing information to select the correct &lt;code&gt;@MessageMapping&lt;/code&gt; endpoint to call, in this case, the &lt;code&gt;requestResponse(Message request)&lt;/code&gt; method. The method then responds with a message of its own. The CLI client prints the whole interaction in the terminal window as a series of message frames.&lt;/p&gt;&lt;h1&gt;&lt;a href="#wrapping-up" class="anchor" name="wrapping-up"&gt;&lt;/a&gt;Wrapping Up&lt;/h1&gt;
&lt;p&gt;If you followed along, you saw just how easy it is to code a simple RSocket server using Spring Boot. You examined the Java code required and then started the Spring Boot server locally. You then sent a message to the RSocket server and observed the response. You also learned how it&amp;rsquo;s possible to route your RSocket messages in Spring using the RSocket message routing feature. In the next post, you¡¯ll learn &lt;a href="https://spring.io/blog/2020/03/09/getting-started-with-rsocket-spring-boot-client"&gt;how to start building your own RSocket client using Spring Boot&lt;/a&gt;.&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>A Bootiful Podcast: Spring Cloud Contract lead Marcin Grzejszczak on Spring Cloud Contract, Spring Cloud Sleuth, Continuous Integration and more</title>
    <link rel="alternate" href="https://spring.io/blog/2020/02/28/a-bootiful-podcast-spring-cloud-contract-lead-marcin-grzejszczak-on-spring-cloud-contract-spring-cloud-sleuth-continuous-integration-and-more" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2020-02-28:3978</id>
    <updated>2020-02-28T04:48:29Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! Welcome to another installment of A Bootiful Podcast! In today&amp;rsquo;s installment &lt;a href="http://twitter.com/starbuxman"&gt;Josh Long (@starbuxman)&lt;/a&gt; talks to Spring Cloud team member lead &lt;a href="http://twitter.com/MGrzejszczak"&gt;Marcin Grzejszczak&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://spring.io/projects/spring-cloud-contract"&gt;Spring Cloud Contract&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/projects/spring-cloud-sleuth"&gt;Spring Cloud Sleuth&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://twitter.com/MGrzejszczak"&gt;Marcin on Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe title="Spring Cloud Contract lead Marcin Grzejszczak on Spring Cloud Contract, Spring Cloud Sleuth, Continuous Integration and more" src="https://www.podbean.com/media/player/vyuyu-d4f900?from=usersite&amp;vjs=1&amp;skin=1&amp;fonts=Helvetica&amp;auto=0&amp;download=1" height="315" width="100%" style="border: none;" scrolling="no" data-name="pb-iframe-player"&gt;&lt;/iframe&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Boot 2.2.5 released</title>
    <link rel="alternate" href="https://spring.io/blog/2020/02/27/spring-boot-2-2-5-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Andy Wilkinson</name>
    </author>
    <id>tag:spring.io,2020-02-27:3977</id>
    <updated>2020-02-27T18:02:34Z</updated>
    <content type="html">&lt;p&gt;On behalf of the team and everyone who has contributed, I&amp;rsquo;m happy to announce that Spring Boot 2.2.5 has been released and is now available from &lt;a href="https://repo.spring.io/release"&gt;repo.spring.io&lt;/a&gt; and Maven Central.&lt;/p&gt;
&lt;p&gt;This release includes &lt;a href="https://github.com/spring-projects/spring-boot/releases/tag/v2.2.5.RELEASE"&gt;62 bug fixes, enhancements, documentation improvements, and dependency upgrades&lt;/a&gt;. Thanks to all those who have contributed with issue reports and pull requests.&lt;/p&gt;&lt;h3&gt;&lt;a href="#important-security-advisory" class="anchor" name="important-security-advisory"&gt;&lt;/a&gt;Important Security Advisory&lt;/h3&gt;
&lt;p&gt;This version of Spring Boot includes a dependency upgrade to Reactor Netty 0.9.5. It contains fixes for &lt;a href="https://pivotal.io/security/cve-2020-5403"&gt;CVE-2020-5403&lt;/a&gt; and &lt;a href="https://pivotal.io/security/cve-2020-5404"&gt;CVE-2020-5404&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;&lt;a href="#how-can-you-help" class="anchor" name="how-can-you-help"&gt;&lt;/a&gt;How can you help?&lt;/h3&gt;
&lt;p&gt;If you&amp;rsquo;re interested in helping out, check out the &lt;a href="https://github.com/spring-projects/spring-boot/labels/status%3A%20ideal-for-contribution"&gt;&amp;ldquo;ideal for contribution&amp;rdquo; tag&lt;/a&gt; in the issue repository. If you have general questions, please ask on &lt;a href="http://stackoverflow.com"&gt;stackoverflow.com&lt;/a&gt; using the &lt;a href="http://stackoverflow.com/tags/spring-boot"&gt;&lt;code&gt;spring-boot&lt;/code&gt; tag&lt;/a&gt; or chat with the community on &lt;a href="https://gitter.im/spring-projects/spring-boot"&gt;Gitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://spring.io/projects/spring-boot/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot/issues"&gt;Issues&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; | &lt;a href="http://stackoverflow.com/questions/tagged/spring-boot"&gt;Stack Overflow&lt;/a&gt; | &lt;a href="https://gitter.im/spring-projects/spring-boot"&gt;Gitter&lt;/a&gt;&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Boot 2.1.13 released</title>
    <link rel="alternate" href="https://spring.io/blog/2020/02/27/spring-boot-2-1-13-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Andy Wilkinson</name>
    </author>
    <id>tag:spring.io,2020-02-27:3974</id>
    <updated>2020-02-27T18:02:07Z</updated>
    <content type="html">&lt;p&gt;On behalf of the team and everyone who has contributed, I&amp;rsquo;m happy to announce that Spring Boot 2.1.13 has been released and is now available from &lt;a href="https://repo.spring.io/release"&gt;repo.spring.io&lt;/a&gt; and Maven Central.&lt;/p&gt;
&lt;p&gt;This release includes &lt;a href="https://github.com/spring-projects/spring-boot/releases/tag/v2.1.13.RELEASE"&gt;34 bug fixes, documentation improvements, and dependency upgrades&lt;/a&gt;. Thanks to all those who have contributed with issue reports and pull requests.&lt;/p&gt;&lt;h3&gt;&lt;a href="#important-security-advisory" class="anchor" name="important-security-advisory"&gt;&lt;/a&gt;Important Security Advisory&lt;/h3&gt;
&lt;p&gt;This version of Spring Boot includes a dependency upgrade to Reactor Netty 0.8.16. It contains a fix for &lt;a href="https://pivotal.io/security/cve-2020-5404"&gt;CVE-2020-5404&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;&lt;a href="#how-can-you-help" class="anchor" name="how-can-you-help"&gt;&lt;/a&gt;How can you help?&lt;/h3&gt;
&lt;p&gt;If you&amp;rsquo;re interested in helping out, check out the &lt;a href="https://github.com/spring-projects/spring-boot/labels/status%3A%20ideal-for-contribution"&gt;&amp;ldquo;ideal for contribution&amp;rdquo; tag&lt;/a&gt; in the issue repository. If you have general questions, please ask on &lt;a href="http://stackoverflow.com"&gt;stackoverflow.com&lt;/a&gt; using the &lt;a href="http://stackoverflow.com/tags/spring-boot"&gt;&lt;code&gt;spring-boot&lt;/code&gt; tag&lt;/a&gt; or chat with the community on &lt;a href="https://gitter.im/spring-projects/spring-boot"&gt;Gitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://spring.io/projects/spring-boot/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot/issues"&gt;Issues&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-boot/docs/2.1.13.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; | &lt;a href="http://stackoverflow.com/questions/tagged/spring-boot"&gt;Stack Overflow&lt;/a&gt; | &lt;a href="https://gitter.im/spring-projects/spring-boot"&gt;Gitter&lt;/a&gt;&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>CVE Reports Published for Reactor Netty</title>
    <link rel="alternate" href="https://spring.io/blog/2020/02/27/cve-reports-published-for-reactor-netty" />
    <category term="news" label="News and Events" />
    <author>
      <name>Rossen Stoyanchev</name>
    </author>
    <id>tag:spring.io,2020-02-27:3976</id>
    <updated>2020-02-27T17:48:11Z</updated>
    <content type="html">&lt;p&gt;The following CVE reports were published today:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://pivotal.io/security/cve-2020-5403"&gt;CVE-2020-5403&lt;/a&gt; affecting Reactor Netty &lt;code&gt;HttpServer&lt;/code&gt; 0.9.3 and 0.9.4.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://pivotal.io/security/cve-2020-5404"&gt;CVE-2020-5404&lt;/a&gt; affecting Reactor Netty &lt;code&gt;HttpClient&lt;/code&gt; for all 0.8.x and 0.9.x versions in applications where the automatic following of redirects is explicitly enabled.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The fixes are in Reactor Netty 0.9.5 and 0.8.16. If using the reactor-bom, you can upgrade to Dysprosium-SR5 or Californium-SR16.&lt;/p&gt;
&lt;p&gt;Reactor Netty is used internally in many frameworks including Spring WebFlux and its &lt;code&gt;WebClient&lt;/code&gt;. If you have a Spring Boot application, you can upgrade to Spring Boot 2.2.5 or 2.1.13. &lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Data Moore SR5 and Lovelace SR16 released</title>
    <link rel="alternate" href="https://spring.io/blog/2020/02/26/spring-data-moore-sr5-and-lovelace-sr16-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Mark Paluch</name>
    </author>
    <id>tag:spring.io,2020-02-26:3973</id>
    <updated>2020-02-26T12:34:00Z</updated>
    <content type="html">&lt;p&gt;On behalf of the community, I&amp;rsquo;d like to announce the availability of the Spring Data &lt;code&gt;Moore SR5&lt;/code&gt; and &lt;code&gt;Lovelace SR16&lt;/code&gt; service releases.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Moore SR5&lt;/code&gt; ships with &lt;a href="https://jira.spring.io/issues/?filter=16733"&gt;61 tickets fixed&lt;/a&gt;, and &lt;code&gt;Lovelace SR16&lt;/code&gt; ships with &lt;a href="https://jira.spring.io/issues/?filter=16732"&gt;43 tickets fixed&lt;/a&gt;. Both releases contain mostly bug fixes and dependency upgrades. &lt;code&gt;Moore SR5&lt;/code&gt; is built on top of the just-released Spring Framework &lt;code&gt;5.2.4&lt;/code&gt; and will be picked up by Spring Boot &lt;code&gt;2.2.5&lt;/code&gt; for your convenience. Similarly, &lt;code&gt;Lovelace SR16&lt;/code&gt; uses Spring Framework &lt;code&gt;5.1.14&lt;/code&gt; and will be included by Spring Boot &lt;code&gt;2.1.13&lt;/code&gt; in the next days.&lt;/p&gt;
&lt;p&gt;Finally, here are links to the reference documentation, changelogs, and artifacts of the individual project releases:&lt;/p&gt;&lt;h2&gt;&lt;a href="#moore-sr5" class="anchor" name="moore-sr5"&gt;&lt;/a&gt;Moore SR5&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Data Commons 2.2.5 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-commons/2.2.5.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.2.5.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.2.5.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.2.5.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JDBC 1.1.5 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-jdbc/1.1.5.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/1.1.5.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/1.1.5.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/1.1.5.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JPA 2.2.5 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-jpa/2.2.5.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.2.5.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.2.5.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.2.5.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Neo4j 5.2.5 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-neo4j/5.2.5.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/5.2.5.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/5.2.5.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/5.2.5.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Solr 4.1.5 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-solr/4.1.5.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/4.1.5.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/4.1.5.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/4.1.5.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Cassandra 2.2.5 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-cassandra/2.2.5.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/2.2.5.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/2.2.5.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/2.2.5.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data KeyValue 2.2.5 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-keyvalue/2.2.5.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.2.5.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.2.5.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.2.5.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Geode 2.2.5 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-geode/2.2.5.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.2.5.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.2.5.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.2.5.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data MongoDB 2.2.5 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-mongodb/2.2.5.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/2.2.5.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/2.2.5.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/2.2.5.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data LDAP 2.2.5 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-ldap/2.2.5.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.2.5.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.2.5.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.2.5.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Envers 2.2.5 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-envers/2.2.5.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.2.5.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.2.5.RELEASE/reference/html"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data REST 3.2.5 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-rest-webmvc/3.2.5.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.2.5.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.2.5.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.2.5.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Gemfire 2.2.5 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-gemfire/2.2.5.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/gemfire/docs/2.2.5.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/gemfire/docs/2.2.5.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/gemfire/docs/2.2.5.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Redis 2.2.5 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-redis/2.2.5.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.2.5.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.2.5.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.2.5.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Elasticsearch 3.2.5 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-elasticsearch/3.2.5.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/3.2.5.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/3.2.5.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/3.2.5.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Couchbase 3.2.5 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-couchbase/3.2.5.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/3.2.5.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/3.2.5.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/3.2.5.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;&lt;a href="#lovelace-sr16" class="anchor" name="lovelace-sr16"&gt;&lt;/a&gt;Lovelace SR16&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Data Commons 2.1.16 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-commons/2.1.16.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.1.16.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.1.16.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.1.16.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JDBC 1.0.16 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-jdbc/1.0.16.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/1.0.16.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/1.0.16.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/1.0.16.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JPA 2.1.16 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-jpa/2.1.16.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.1.16.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.1.16.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.1.16.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Neo4j 5.1.16 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-neo4j/5.1.16.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/5.1.16.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/5.1.16.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/5.1.16.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Solr 4.0.16 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-solr/4.0.16.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/4.0.16.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/4.0.16.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/4.0.16.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Cassandra 2.1.16 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-cassandra/2.1.16.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/2.1.16.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/2.1.16.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/2.1.16.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data KeyValue 2.1.16 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-keyvalue/2.1.16.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.1.16.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.1.16.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.1.16.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Geode 2.1.16 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-geode/2.1.16.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.1.16.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.1.16.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.1.16.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data MongoDB 2.1.16 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-mongodb/2.1.16.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/2.1.16.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/2.1.16.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/2.1.16.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data LDAP 2.1.16 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-ldap/2.1.16.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.1.16.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.1.16.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.1.16.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Envers 2.1.16 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-envers/2.1.16.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.1.16.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.1.16.RELEASE/reference/html"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data REST 3.1.16 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-rest-webmvc/3.1.16.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.1.16.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.1.16.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.1.16.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Gemfire 2.1.16 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-gemfire/2.1.16.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/gemfire/docs/2.1.16.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/gemfire/docs/2.1.16.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/gemfire/docs/2.1.16.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Redis 2.1.16 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-redis/2.1.16.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.1.16.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.1.16.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.1.16.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Elasticsearch 3.1.16 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-elasticsearch/3.1.16.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/3.1.16.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/3.1.16.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/3.1.16.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Couchbase 3.1.16 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-couchbase/3.1.16.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/3.1.16.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/3.1.16.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/3.1.16.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Tips: Apache RocketMQ</title>
    <link rel="alternate" href="https://spring.io/blog/2020/02/25/spring-tips-apache-rocketmq" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2020-02-25:3971</id>
    <updated>2020-02-25T21:24:00Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! In this installment of Spring Tips, we&amp;rsquo;re going to look at Alibaba&amp;rsquo;s Apache RocketMQ. We&amp;rsquo;ve talked some about Alibaba in Spring Tips before. Check out the earlier Spring Tips installment in which we explore &lt;a href="https://www.youtube.com/watch?v=B60y65wexgI&amp;feature=emb_title"&gt;some of Spring Cloud Alibaba&lt;/a&gt;.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/vwHk8HVQAJE" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;&lt;h2&gt;&lt;a href="#running-apache-rocketmq" class="anchor" name="running-apache-rocketmq"&gt;&lt;/a&gt;Running Apache RocketMQ&lt;/h2&gt;
&lt;p&gt;In order to use Apache RocketMQ, you&amp;rsquo;ll need to follow the steps in the &lt;a href="https://rocketmq.apache.org/docs/quick-start/"&gt;RocketMQ&lt;/a&gt; quickstart. This Spring Tips installment introduces Apache RocketMQ, originally a technology developed and used internally at Alibaba and proven in the forge of 11/11, the famous Chinese sales holiday, sort of like &amp;ldquo;Cyber Monday,&amp;rdquo; or &amp;ldquo;Black Friday,&amp;rdquo; in the US. Sort of like that, but waaaaaay bigger. In 2019, Alibaba (alone, with no other e-commerce engines involved), made almost $40 &lt;strong&gt;billion&lt;/strong&gt; USD in 24 hours. This required that trillions of messages be sent through something that could scale to meet the demand. RocketMQ is the only thing they could trust. &lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll need to use Java 8 when running Apache RocketMQ. (You can use any version of Java when writing Spring applications that connect to Apache RocketMQ, of course.) I use SDK Manager (&amp;ldquo;SDKman&amp;rdquo; - &lt;code&gt;sdk&lt;/code&gt;) to switch to the appropriate version of Java.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;sdk use java 8.0.242.hs-adpt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&amp;rsquo;ll install a version that works if it&amp;rsquo;s not already installed. Once that&amp;rsquo;s done, you&amp;rsquo;ll then need to run the NameServer.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;${ROCKETMQ_HOME}/bin/mqnamesrv 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then you&amp;rsquo;ll need to run the Broker itself.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;${ROCKETMQ_HOME}/bin/mqbroker -n localhost:9876
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to use SQL-based filtering, you need to add a property to the broker&amp;rsquo;s configuration, &lt;code&gt;$ROCKETMQ_HOME/conf/broker.conf&lt;/code&gt;, and then tell RocketMQ to use that configuration.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;enablePropertyFilter = true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I use a script like this to launch everything.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;export JAVA_HOME=$HOME/.sdkman/candidates/java/8.0.242.hs-adpt&#xD;
${ROCKETMQ_HOME}/bin/mqnamesrv &amp;amp;  &#xD;
${ROCKETMQ_HOME}/bin/mqbroker -n localhost:9876 -c ${ROCKETMQ_HOME}/conf/broker.conf
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a href="#using-apache-rocketmq-from-java-code" class="anchor" name="using-apache-rocketmq-from-java-code"&gt;&lt;/a&gt;Using Apache RocketMQ from Java Code&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s look at a simple producer class that uses the Spring Boot autoconfiguration and the &lt;code&gt;RocketMQTemplate&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;In order to work with this, you&amp;rsquo;ll need to create a new project on the &lt;a href="http://start.Spring.io"&gt;Spring Initializr&lt;/a&gt;. I generated a new project with the latest version of Java and then I made sure to include &lt;code&gt;Lombok&lt;/code&gt;. We also need the Apache RocketMQ client and the appropriate Spring Boot autoconfiguration:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint xml"&gt;&amp;lt;dependency&amp;gt;&#xD;
	&amp;lt;groupId&amp;gt;org.apache.rocketmq&amp;lt;/groupId&amp;gt;&#xD;
	&amp;lt;artifactId&amp;gt;rocketmq-spring-boot-starter&amp;lt;/artifactId&amp;gt;&#xD;
	&amp;lt;version&amp;gt;2.0.4&amp;lt;/version&amp;gt;&#xD;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The autoconfiguration will create a connection to the running Apache RocketMQ broker, informed by certain properties. &lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint properties"&gt;rocketmq.name-server=127.0.0.1:9876&#xD;
rocketmq.producer.group=greetings-producer-group
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first property, &lt;code&gt;name-server&lt;/code&gt;, tells the application where the Apache RocketMQ nameserver lives. The nameserver, then, knows where the broker lives. You&amp;rsquo;ll need to also specify a group for both the producer and the consumer. Here, we use &lt;code&gt;greetings-producer-group&lt;/code&gt;. &lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;&lt;br/&gt;package com.example.producer;&#xD;
&#xD;
import lombok.AllArgsConstructor;&#xD;
import lombok.Data;&#xD;
import lombok.NoArgsConstructor;&#xD;
import lombok.RequiredArgsConstructor;&#xD;
import org.apache.rocketmq.spring.core.RocketMQTemplate;&#xD;
import org.springframework.boot.SpringApplication;&#xD;
import org.springframework.boot.autoconfigure.SpringBootApplication;&#xD;
import org.springframework.boot.context.event.ApplicationReadyEvent;&#xD;
import org.springframework.context.ApplicationListener;&#xD;
import org.springframework.context.annotation.Bean;&#xD;
import org.springframework.messaging.Message;&#xD;
import org.springframework.messaging.core.MessagePostProcessor;&#xD;
import org.springframework.messaging.support.MessageBuilder;&#xD;
&#xD;
import java.time.Instant;&#xD;
&#xD;
@RequiredArgsConstructor&#xD;
@SpringBootApplication&#xD;
public class ProducerApplication {&#xD;
&#xD;
	@Bean&#xD;
	ApplicationListener&amp;lt;ApplicationReadyEvent&amp;gt; ready(RocketMQTemplate template) {&#xD;
		return event -&amp;gt; {&#xD;
&#xD;
			var now = Instant.now();&#xD;
			var destination = &amp;quot;greetings-topic&amp;quot;;&#xD;
&#xD;
			for (var name : &amp;quot;Tammie,Kimly,Josh,Rob,Mario,Mia&amp;quot;.split(&amp;quot;,&amp;quot;)) {&#xD;
&#xD;
				var payload = new Greeting(&amp;quot;Hello @ &amp;quot; + name + &amp;quot; @ &amp;quot; + now.toString());&#xD;
				var messagePostProcessor = new MessagePostProcessor() {&#xD;
&#xD;
					@Override&#xD;
					public Message&amp;lt;?&amp;gt; postProcessMessage(Message&amp;lt;?&amp;gt; message) {&#xD;
						var headerValue = Character.toString(name.toLowerCase().charAt(0));&#xD;
						return MessageBuilder&#xD;
							.fromMessage(message)&#xD;
							.setHeader(&amp;quot;letter&amp;quot;, headerValue)&#xD;
							.build();&#xD;
					}&#xD;
				};&#xD;
				template.convertAndSend(destination, payload, messagePostProcessor);&#xD;
			}&#xD;
		};&#xD;
	}&#xD;
&#xD;
	public static void main(String[] args) {&#xD;
		SpringApplication.run(ProducerApplication.class, args);&#xD;
	}&#xD;
}&#xD;
&#xD;
@Data&#xD;
@AllArgsConstructor&#xD;
@NoArgsConstructor&#xD;
class Greeting {&#xD;
	private String message;&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I don&amp;rsquo;t know if it can get much simpler than that! It&amp;rsquo;s a simple for-loop, processing each name, creating a new &lt;code&gt;Greeting&lt;/code&gt; object, and then using the &lt;code&gt;RocketMQTemplate&lt;/code&gt; to send the payload to an Apache RocketMQ topic, &lt;code&gt;greetings-topic&lt;/code&gt;. Here, we&amp;rsquo;ve used the overload of the &lt;code&gt;RocketMQTemplate&lt;/code&gt; object that accepts a &lt;code&gt;MessagePostProcessor&lt;/code&gt;. The &lt;code&gt;MessagePostProcessor&lt;/code&gt; is a callback in which we can transform the Spring Framework &lt;code&gt;Message&lt;/code&gt; object that will be sent out. In this example, we contribute a header value, &lt;code&gt;letter&lt;/code&gt;, that contains the first letter of the name. We&amp;rsquo;ll use this in the consumer.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s look at the consumer. Generate a new Spring Boot application from the Spring Initializr and be sure to add the Apache RocketMQ autoconfiguration. You&amp;rsquo;ll need to specify the name server in &lt;code&gt;application.properties&lt;/code&gt; for the client, too. &lt;/p&gt;
&lt;p&gt;The autoconfiguration supports defining beans that implement &lt;code&gt;RocketMQListener&amp;lt;T&amp;gt;&lt;/code&gt;, where &lt;code&gt;T&lt;/code&gt; is the type of the payload that the consumer will receive. The payload, in this case, is the &lt;code&gt;Greeting&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;package com.example.consumer;&#xD;
&#xD;
import lombok.AllArgsConstructor;&#xD;
import lombok.Data;&#xD;
import lombok.NoArgsConstructor;&#xD;
import lombok.extern.log4j.Log4j2;&#xD;
import org.apache.rocketmq.spring.annotation.RocketMQMessageListener;&#xD;
import org.apache.rocketmq.spring.core.RocketMQListener;&#xD;
import org.springframework.boot.SpringApplication;&#xD;
import org.springframework.boot.autoconfigure.SpringBootApplication;&#xD;
import org.springframework.stereotype.Service;&#xD;
&#xD;
import static org.apache.rocketmq.spring.annotation.SelectorType.SQL92;&#xD;
&#xD;
@SpringBootApplication&#xD;
public class ConsumerApplication {&#xD;
&#xD;
	public static void main(String[] args) {&#xD;
		SpringApplication.run(ConsumerApplication.class, args);&#xD;
	}&#xD;
}&#xD;
&#xD;
@Data&#xD;
@AllArgsConstructor&#xD;
@NoArgsConstructor&#xD;
class Greeting {&#xD;
	private String message;&#xD;
}&#xD;
&#xD;
@Log4j2&#xD;
@Service&#xD;
@RocketMQMessageListener(&#xD;
	topic = &amp;quot;greetings-topic&amp;quot;,&#xD;
	consumerGroup = &amp;quot;simple-group&amp;quot;&#xD;
)&#xD;
class SimpleConsumer implements RocketMQListener&amp;lt;Greeting&amp;gt; {&#xD;
&#xD;
	@Override&#xD;
	public void onMessage(Greeting greeting) {&#xD;
		log.info(greeting.toString());&#xD;
	}&#xD;
}&#xD;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, the &lt;code&gt;SimpleConsumer&lt;/code&gt; simply logs all incoming messages from the &lt;code&gt;greetings-topic&lt;/code&gt; topic in Apache RocketMQ. Here, the consumer will process &lt;em&gt;every&lt;/em&gt; message on the topic. Let&amp;rsquo;s look at another nice feature - selectors - that let us selectively process incoming messages. Let&amp;rsquo;s replace the existing RocketMQ listener with two new ones. Each one will use a SQL92-compatible predicate to determine whether incoming messages should be processed. One listener processes only the messages that have a &lt;code&gt;letter&lt;/code&gt; header matching &lt;code&gt;m&lt;/code&gt;, &lt;code&gt;k&lt;/code&gt;, or &lt;code&gt;t&lt;/code&gt;. The other matches only those whose &lt;code&gt;letter&lt;/code&gt; header matches &lt;code&gt;j&lt;/code&gt;. &lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;&lt;br/&gt;@Log4j2&#xD;
@Service&#xD;
@RocketMQMessageListener(&#xD;
	topic = &amp;quot;greetings-topic&amp;quot;,&#xD;
	selectorExpression = &amp;quot; letter = &amp;#39;m&amp;#39; or letter = &amp;#39;k&amp;#39; or letter = &amp;#39;t&amp;#39; &amp;quot;,&#xD;
	selectorType = SQL92,&#xD;
	consumerGroup = &amp;quot;sql-consumer-group-mkt&amp;quot;&#xD;
)&#xD;
class MktSqlSelectorConsumer implements RocketMQListener&amp;lt;Greeting&amp;gt; {&#xD;
&#xD;
	@Override&#xD;
	public void onMessage(Greeting greeting) {&#xD;
		log.info(&amp;quot;&amp;#39;m&amp;#39;, &amp;#39;k&amp;#39;, &amp;#39;t&amp;#39;: &amp;quot; + greeting.toString());&#xD;
	}&#xD;
}&#xD;
&#xD;
&#xD;
@Log4j2&#xD;
@Service&#xD;
@RocketMQMessageListener(&#xD;
	topic = &amp;quot;greetings-topic&amp;quot;,&#xD;
	selectorExpression = &amp;quot; letter = &amp;#39;j&amp;#39; &amp;quot;,&#xD;
	selectorType = SQL92,&#xD;
	consumerGroup = &amp;quot;sql-consumer-group-j&amp;quot;&#xD;
)&#xD;
class JSqlSelectorConsumer implements RocketMQListener&amp;lt;Greeting&amp;gt; {&#xD;
&#xD;
	@Override&#xD;
	public void onMessage(Greeting greeting) {&#xD;
		log.info(&amp;quot;&amp;#39;j&amp;#39;: &amp;quot; + greeting.toString());&#xD;
	}&#xD;
}&#xD;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Not bad, eh? There&amp;rsquo;s plenty of other things that Apache RocketMQ supports (besides processing trillions of messages in 24 hours!) It can store long tail messages on disk, without degrading performance. It supports serialization - the ordering of - of messages, transactions, batch processing, etc. It even supports scheduled messages - messages that are only delivered after a certain interval. Needless to say, I&amp;rsquo;m a big Apache RocketMQ fan. &lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - February 25th, 2020</title>
    <link rel="alternate" href="https://spring.io/blog/2020/02/25/this-week-in-spring-february-25th-2020" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2020-02-25:3972</id>
    <updated>2020-02-25T21:22:03Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! This week I am in delicious Philadelphia enjoying the amazing food (scrapple! TastyKakes!) and hanging out with amazing customers using VMWare and Spring to great effect. It&amp;rsquo;s been a busy week since we last talked: I released a new Spring Tips installment, wrote a bunch of blogs, recorded a new podcast, and published a new podcast installment. We&amp;rsquo;ve got a lot to get to today so let&amp;rsquo;s get to it!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;In this first installment of &lt;em&gt;Spring Tips&lt;/em&gt;, season 7, I look &lt;a href="https://spring.io/blog/2020/02/20/spring-tips-rsocket-and-spring-security"&gt;at RSocket and Spring Security&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/02/25/spring-framework-5-2-4-and-5-1-14-available-now"&gt;Spring Framework 5.2.4 and 5.1.14 available now&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/02/24/netflix-built-a-spring-application-generator-to-boost-dev-productivity-here-s-how-you-can-too"&gt;Netflix Built a Spring Application Generator to Boost Dev Productivity. Here&amp;rsquo;s How You Can, Too.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/02/24/spring-boot-for-apache-geode-pivotal-gemfire-1-3-0-m2-available"&gt;Spring Boot for Apache Geode &amp;amp; Pivotal GemFire 1.3.0.M2 Available&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/02/24/spring-session-for-apache-geode-pivotal-gemfire-2-3-0-m2-available"&gt;Spring Session for Apache Geode &amp;amp; Pivotal GemFire 2.3.0.M2 Available&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/02/24/netflix-built-an-application-generator-to-boost-productivity-here-s-how-you-can-too"&gt;Netflix Built an Application Generator to Boost Productivity. Here&amp;rsquo;s How You Can, Too.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/02/21/a-bootiful-podcast-building-china-scale-infrastructure-at-alibaba-with-spring-cloud-rsocket-and-more"&gt;A Bootiful Podcast: Building China-scale Infrastructure at Alibaba with Spring Cloud, Rsocket, and more&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;You should probably check this video on &lt;a href="https://content.pivotal.io/webinars/feb-13-how-to-build-reliable-streaming-pipelines-with-rabbitmq-and-project-reactor-webinar"&gt;how to build reliable streaming pipelines with RabbitMQ and Project Reactor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2020/02/19/announcing-spring-cloud-stream-horsham-sr2-3-0-2-release-and-spring-cloud-hoxton-sr2"&gt;Announcing Spring Cloud Stream Horsham.SR2 (3.0.2.RELEASE) and Spring Cloud Hoxton.SR2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Our friend Toshiaki Maki has a nice demo demonstrating &lt;a href="https://github.com/making/demo-jwt"&gt;using JWT in Spring Security&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=pgWk9dft3So&amp;feature=youtu.be"&gt;Matt Raible has a very interesting look at creating a Spring Boot CRUD application with Angular 9 and Spring Boot 2.2.x&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;This is an oldie-but-a-goodie from the good, the &lt;em&gt;great&lt;/em&gt;, Dr. Dave Syer: it looks at &lt;a href="https://www.infoq.com/presentations/spring-framework-boot-performance-improvements/"&gt;Spring Performance Gains&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.infoq.com/news/2020/02/vmware-pivotal-tanzu-merger/"&gt;VMware Details its Tanzu/Kubernetes Strategy After Pivotal Merger&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Hey, the Baeldung blog has a nice enumeration of some of the &lt;a href="https://www.baeldung.com/spring-framework-design-patterns"&gt;design patterns in the Spring Framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.hashicorp.com/resources/securing-rabbitmq-with-vault"&gt;Securing RabbitMQ with Vault&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://codesoapbox.dev/externalize-springdoc-openapi-schema/"&gt;Externalize Springdoc OpenAPI schema (write documentation outside of target classes) ? Code Soapbox&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I loved Joris Kuipers talk, &lt;a href="https://youtu.be/73KxyTUU4nU"&gt; &lt;em&gt;Day 2 Problems in CQRS and Event-Sourcing&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://medium.com/@jmpinto/deploying-cloudfoundry-on-a-local-kubernetes-9103a57bf713"&gt;Deploying Cloud Foundry on a local Kubernetes - Jo?o M Pinto - Medium&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://techcommunity.microsoft.com/t5/spring-on-azure/auto-scale-azure-spring-cloud-with-azure-monitor-and-azure/ba-p/1181125"&gt;Auto scale Azure Spring Cloud with Azure Monitor and Azure Automation Runbooks - Microsoft Tech Community - 1181125&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://eventil.com/events/rabbitmq-summit-2020/cfp"&gt;Call for Proposals for RabbitMQ Summit 2020 open till Mar 8&lt;/a&gt; - submit now!&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://hackernoon.com/integrate-java-database-versioning-with-liquibase-using-mysql-a-step-by-step-guide-n8b23aw5"&gt;Integrate Java Database Versioning with Liquibase using MySQL [A Step by Step Guide] - By Tiago Melo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
</feed>
