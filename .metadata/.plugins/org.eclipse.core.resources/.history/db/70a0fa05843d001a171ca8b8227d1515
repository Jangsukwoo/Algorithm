package CodingStudySamsung모의;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Arrays;
import java.util.StringTokenizer;

/*

1
3 10 10
0 0 0 0 0 0 0 0 0 0
1 0 1 0 1 0 0 0 0 0
1 0 3 0 1 1 0 0 0 1
1 1 1 0 1 2 0 0 0 9
1 1 4 0 1 1 0 0 1 1
1 1 4 1 1 1 2 1 1 1
1 1 5 1 1 1 1 2 1 1
1 1 6 1 1 1 1 1 2 1
1 1 1 1 1 1 1 1 1 5
1 1 7 1 1 1 1 1 1 1
 */
public class 벽돌깨기 {
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
	static StringTokenizer st;
	static int N,W,H;
	static int[] pick;
	static int[][] bricks;
	static int[] dr = {-1,0,1,0};
	static int[] dc = {0,1,0,-1};
	public static void main(String[] args) throws NumberFormatException, IOException {
		int T = Integer.parseInt(br.readLine());
		for(int testcase=1;testcase<=T;testcase++) {
			setData();
			duplicationPermutation(0);
		}
	}
	private static void duplicationPermutation(int depth) {
		if(depth==N){
			System.out.println(Arrays.toString(pick));
			return;
		}
		for(int i=0;i<W;i++) {
			pick[depth] = i;
			duplicationPermutation(depth+1);
		}
	}
	private static void setData() throws IOException {
		st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		W = Integer.parseInt(st.nextToken());//열
		H = Integer.parseInt(st.nextToken());//행
		bricks = new int[H][W];
		pick = new int[N];
		for(int row=0;row<H;row++) {
			st = new StringTokenizer(br.readLine());
			for(int col=0;col<W;col++) {
				bricks[row][col] = Integer.parseInt(st.nextToken());
			}
		}
	}
}
