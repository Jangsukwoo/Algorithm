package 공채대비;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.StringTokenizer;

/*
 * 13:56~
 */
public class 새로운게임2{
	static int N,K;
	static int[][] chess;
	static Horse[] horselist;
	static int turn=0;
	static ArrayList<Horse>[][] horseMap;
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static StringTokenizer st;
	static boolean end;
	static int[] dr = {0,0,0,-1,1};
	static int[] dc = {0,1,-1,0,0};//1,2,3,4
	static class Horse{
		int row;
		int col;
		int dir;
		int idx;
		public Horse(int row, int col, int dir, int idx) {
			this.row = row;
			this.col = col;
			this.dir = dir;
			this.idx = idx;
		}
	}
	public static void main(String[] args) throws IOException {
		setData();
		simulation();
	}
	private static void simulation() {
		while(turn<=1000) {
			for(int i=0;i<K;i++) {
				//업고 간다.
				move(horselist[i]);
			}
		}
	}
	private static void move(Horse horse) {
		/*
		 * 0:흰
		 * 1:빨
		 * 2:파
		 */
		int currentIdx = getCurrenthorseIdx(horse);
		int reverseDir=getReverseDir(horse.dir);
		int dir = horse.dir;
		int nr = horse.row+dr[dir];
		int nc = horse.col+dc[dir];
		
		if(reverseCheck(horse,reverseDir,nr,nc)) horselist[currentIdx].dir=reverseDir;
		else{//갈 수 있다.
			if(chess[nr][nc]==0) {
				
			}else if(chess[nr][nc]==1){
				
			}
		}
	}
	private static boolean reverseCheck(Horse horse, int reverseDir, int nr, int nc) {
		if(!rangeCheck(nr,nc)){ //가려는 땅이 영역 밖이다.
			nr = horse.row+dr[reverseDir];
			nc = horse.col+dc[reverseDir];
			if(chess[nr][nc]==2){//반대도 파랑색이면
				return true;
			}
		}else if(rangeCheck(nr, nc) && chess[nr][nc]==2) {
			//영역 안쪽에 있고 파랑색인 경우
			nr = horse.row+dr[reverseDir];
			nc = horse.col+dc[reverseDir];
			if(!rangeCheck(nr, nc) || chess[nr][nc]==2){//반대도 파랑색이 또는 영역 밖이라면
				return true;
			}
		}
		return false;
	}
	private static int getReverseDir(int dir) {
		int reverseDir = 0;
		switch (dir) {
		case 1:
			reverseDir=2;
			break;
		case 2:
			reverseDir=1;
			break;
		case 3:
			reverseDir=4;
			break;
		case 4:
			reverseDir=3;
			break;
		}
		return reverseDir;
	}
	private static boolean rangeCheck(int nr, int nc){
		if(nr>=0 && nr<N && nc>=0 && nc<N) return true;
		return false;
	}
	private static int getCurrenthorseIdx(Horse horse){
		int size = horseMap[horse.row][horse.col].size();
		for(int i=0;i<size;i++) {
			if(horseMap[horse.row][horse.col].get(i).idx==horse.idx) return i;
		}
		return 0;
	}
	private static void setData() throws IOException {
		st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		K = Integer.parseInt(st.nextToken());
		chess = new int[N][N];
		horseMap = new ArrayList[N][N];
		horselist = new Horse[K];
		for(int row=0;row<N;row++) {
			st = new StringTokenizer(br.readLine());
			for(int col=0;col<N;col++){
				horseMap[row][col] = new ArrayList<Horse>();
				chess[row][col] = Integer.parseInt(st.nextToken());
			}
		}
		for(int i=0,row,col,dir;i<K;i++) {
			st = new StringTokenizer(br.readLine());
			row = Integer.parseInt(st.nextToken());
			col = Integer.parseInt(st.nextToken());
			dir = Integer.parseInt(st.nextToken());
			horselist[i] = new Horse(row, col, dir,i);
			horseMap[row][col].add(horselist[i]);
		}
	}
}
