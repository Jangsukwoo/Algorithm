package 공채대비;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.StringTokenizer;

/*
 * 19:07~
 * 가장 처음 모든 바이러스는 비활성 상태
 * 활성 상태 바이러스 -> 상하좌우
 * M개를 활성 상태
 * 0 빈칸, 1 벽, 2 바이러스 위치
 * 모든 빈칸에 바이러스를 퍼뜨리는 최소 시간
 */
public class 연구소3 {
	static int N,M;
	static int[][] laboratory;
	static boolean[][] visit;
	static int[] pickVirusIdx;
	static int answer = Integer.MAX_VALUE;
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static StringTokenizer st;
	static ArrayList<Virus> inactiveVirusList;
	static class Virus{
		int row;
		int col;
		public Virus(int row, int col) {
			this.row = row;
			this.col = col;
		}
	}
	public static void main(String[] args) throws IOException {
		setData();
		nCr(0,0);
	}
	private static void nCr(int r, int idx) {
		if(r==M) {
			initialization();
			bfs();
			return;
		}
		for(int pick=idx;pick<inactiveVirusList.size();pick++){
			pickVirusIdx[r] = pick;
			nCr(r+1,pick+1);
		}
	}
	private static void initialization(){
		visit = new boolean[N][N];
		for(int pick=0;pick<M;pick++)insertQueue(inactiveVirusList.get(pick));
		
	}
	private static void bfs() {

	}
	private static void insertQueue(Virus virus) {
		
	}
	private static void setData() throws IOException {
		st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		laboratory  = new int[N][N];
		visit = new boolean[N][N];
		inactiveVirusList = new ArrayList<Virus>();
		for(int row=0;row<N;row++) {
			st = new StringTokenizer(br.readLine());
			for(int col=0;col<N;col++) {
				laboratory[row][col] = Integer.parseInt(st.nextToken());
				if(laboratory[row][col]==2) inactiveVirusList.add(new Virus(row, col));
			}
		}
		pickVirusIdx = new int[M];
	}
}
