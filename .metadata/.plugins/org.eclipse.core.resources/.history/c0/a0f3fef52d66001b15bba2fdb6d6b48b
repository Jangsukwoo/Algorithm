package CodingTest;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.StringTokenizer;

public class 영6 {

	static int V,E; //정점개수, 간선개수
	static int startVertax;
	static ArrayList<int[]>[] edgeList;//각 정점에 대해 
	static int INF = 987654321;
	static int[] dist;
	static boolean[] visit;
	static int[][] adjMatrix;

	public static void main(String[] args) {
		System.out.println(solution(5,new int[][] {{1,2,1},{2,3,3},{5,2,2},{1,4,2},{5,3,1},{5,4,2}},3));
	}
	public static int solution(int N, int[][] road, int K) {
		int answer = 0;

		adjMatrix = new int[N+1][N+1];

		for(int[] array : adjMatrix) Arrays.fill(array, INF);
		for(int i=0;i<road.length;i++) {
			int v1 = road[i][0];
			int v2 = road[i][1];
			int cost = road[i][2];
			adjMatrix[v1][v2] = cost;
			adjMatrix[v2][v1] = cost;
		}

		answer = getAnswerByFloydWarshall(K,ㅜ);

		return answer;
	}
	private static int getAnswerByFloydWarshall(int K) {
		int answer = 0;
		
		for(int k=1;k<=V;k++) {
			for(int i=1;i<=V;i++) {
				for(int j=1;j<=V;j++) {
					adjMatrix[i][j] = Math.min(adjMatrix[i][j],adjMatrix[i][k]+adjMatrix[k][j]);
				}
			}
		}
		for(int vertax=2;vertax<=V;vertax++) {
			if(adjMatrix[1][vertax]<=K) answer++; //K시간 이내로 갈 수 있는 곳이면 카운팅
		}
		return answer;
	}

}
