package 프로그래머스;

import java.util.LinkedList;
import java.util.Queue;

public class 블록이동하기 {
	static class Robot{
		int leftR,leftC,rightR,rightC;
		public Robot(int leftR, int leftC, int rightR, int rightC) {
			this.leftR = leftR;
			this.leftC = leftC;
			this.rightR = rightR;
			this.rightC = rightC;
		}
	}
	static int[] dr = {-1,0,1,0};
	static int[] dc = {0,1,0,-1};
	static int R,C;
	public static void main(String[] args) {

	}
	public  static int solution(int[][] board) {
		int answer = 0;
		R = board.length;
		C = board[0].length;
		Queue<Robot> q = new LinkedList<Robot>();
		q.add(new Robot(0,0,0,1));
		while(!q.isEmpty()){
			int size = q.size();
			for(int i=0;i<size;i++) {
				Robot currentRobot = q.poll();
				int clr = currentRobot.leftR;
				int clc = currentRobot.leftC;
				int crr = currentRobot.rightR;
				int crc = currentRobot.rightC;
				for(int dir=0;dir<4;dir++){//먼저 4방향으로 갈 수 있는지 체크
					int nlr = clr+dr[dir];
					int nlc = clc+dc[dir];
					int nrr = crr+dr[dir];
					int nrc = crc+dc[dir];
					if(check(nlr,nlc,nrr,nrc,board)) q.add(new Robot(nlr,nlc,nrr,nrc));
				}
				
				//축회전
				if(clr==crr){//가로로 누워있는 상태
					if(clc<crc){//l-r 로 누워있는 상태
						//위
						int nr = clr-1;
						int nc = clc+1;
						int nrr = clr-1;
						int nrc = clc;
					}else if(clc>crc){//r-l로 누워있는 상태
						
					}
				}else if(clc==crc){//세로로 누워있는 상태
					
				}
			}
			answer++;
		}
		return answer;
	}
	private static boolean rangeCheck(int nr, int nc, int[][] board) {
		if(nr>=0 && nr<R && nc>=0 && nc<C) {
			if(board[nr][nc]!=1) return true;
		}
		return false;
	}
	private static boolean check(int nlr, int nlc, int nrr, int nrc, int[][] board) {
		if(nlr>=0 && nlr<R && nlc>=0 && nlc<C && nrr>=0 && nrr<R && nrc>=0 && nrc<C){
			if(board[nlr][nlc]!=1 && board[nrr][nrc]!=1) return true;
		}
		return false;
	}
}
