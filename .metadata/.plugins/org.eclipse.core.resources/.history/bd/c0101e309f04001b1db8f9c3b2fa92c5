package SamsungDS;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.StringTokenizer;

public class 낚시왕 {
	static int R,C,M;
	static BufferedReader br;
	static StringTokenizer st;
	static int[] dr = {0,-1,1,0,0};
	static int[] dc = {0,0,0,1,-1};
	static Shark[] sharks; //상어 정보
	static ArrayList<Shark>[][] sea; 
	static int[][] sharkIdMap;
	static int getAllSharkSize;
	static class Shark{
		int row;
		int col;
		int speed;
		int dir;
		int size;
		int sharkId;
		boolean life;
		public Shark(int row, int col, int speed, int dir, int size, boolean life) {
			this.row = row;
			this.col = col;
			this.speed = speed;
			this.dir = dir;
			this.size = size;
			this.life = life;
		}
	}
	public static void main(String[] args) throws IOException {
		setData();
		simulation();
	}
	private static void simulation() {
		for(int shooter=1;shooter<=C;shooter++){
			for(int row=1;row<=R;row++) {
				if(sharkIdMap[row][shooter]!=0){//상어가 있다면
					int findSharkId = sharkIdMap[row][shooter];
					sharks[findSharkId].life = false;
					sea[sharks[findSharkId].row][sharks[findSharkId].col].clear();
					getAllSharkSize+=sharks[findSharkId].size;
					break;
				} //포획처리, 어차피 그 칸에는 한마리밖에 없었을 테니 clear
			}
			moveAllShark();//상어 이동
		}
	}
	private static void moveAllShark() {
		for(int id=1;id<=M;id++){//모든 상어를 조회해본다.
			if(sharks[id].life){//살아있는 상어인가?
				Shark currentShark = sharks[id];
				//이동 후 최종 도착 좌표
				int dir = currentShark.dir;
				int nr = currentShark.row;
				int nc = currentShark.col;
				int time = 0;
				while(time<currentShark.speed){
					nr += dr[dir]; 
					nc += dc[dir];
					if(rangeCheck(nr,nc)) {
						
					}
					time++;
				}
			}
		}
	}
	private static boolean rangeCheck(int nr, int nc) {
		// TODO Auto-generated method stub
		return false;
	}
	private static void setData() throws IOException {
		br = new BufferedReader(new InputStreamReader(System.in));
		st = new StringTokenizer(br.readLine());
		R = Integer.parseInt(st.nextToken());
		C = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		sea= new ArrayList[R+1][C+1];
		sharkIdMap = new int[R+1][C+1];
		for(int row=1;row<=R;row++)
			for(int col=1;col<=C;col++) sea[row][col] = new ArrayList<Shark>();
		sharks = new Shark[M+1];
		for(int id=1;id<=M;id++) {
			st = new StringTokenizer(br.readLine());
			int row = Integer.parseInt(st.nextToken());
			int col = Integer.parseInt(st.nextToken());
			int speed = Integer.parseInt(st.nextToken());
			int dir = Integer.parseInt(st.nextToken());
			int size = Integer.parseInt(st.nextToken());
			sharks[id] = new Shark(row, col, speed, dir, size, true);
			sea[row][col].add(sharks[id]);
			sharkIdMap[row][col] = id;
		}
	}
}
