package SamsungDS;
/*
 * 16:00~
 * 
 */

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.StringTokenizer;

public class 견우와직녀 {
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static StringTokenizer st;
	static int[][] map;
	static ArrayList<int[]> bridgeList;
	static int[] dr = {-1,0,1,0};
	static int[] dc = {0,1,0,-1};
	static int N,M;
	public static void main(String[] args) throws IOException {
		setData();
		setPossiblebridge();
		bfs();
	}
	private static void setPossiblebridge() {
		for(int row=0;row<N;row++) {
			for(int col=0;col<N;col++) {
				if(isInterSection(row,col)) continue;
				else bridgeList.add(new int[] {row,col});
			}
		}
	}
	private static boolean isInterSection(int row, int col) {
		int nr1 = row+dr[0];
		int nc1 = col+dc[0];
		int nr2 = row+dr[1];
		int nc2 = col+dc[1];
		//두 좌표 다 영역 만족하고
		if(rangeCheck(nr1, nc1) && rangeCheck(nr2, nc2)) {
		
		}
		return false;
	}
	private static void bfs() {
		/*
		 * 0 : 절벽
		 * 1 : 땅
		 * 2이상 : 주기
		 * 견우 : 0,0
		 * 직녀 : N-1,N-1
		 */
		
		
	}
	private static void setData() throws IOException {
		st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		map = new int[N][N];
		bridgeList = new ArrayList<int[]>();
		for(int row=0;row<N;row++) {
			st = new StringTokenizer(br.readLine());
			for(int col=0;col<N;col++) {
				map[row][col] = Integer.parseInt(st.nextToken());
			}
		}
	}
	private static boolean rangeCheck(int nr, int nc) {
		if(nr>=0 && nr<N && nc>=0 && nc<N) return true;
		return false;
	}
}
