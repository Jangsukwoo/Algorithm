package codingtest20하;

import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class 쿠2 {
	static StringTokenizer st;
	static int[] months = {0,31,28,31,30,31,30,31,31,30,31,30,31};
	static PriorityQueue<Kiosk> operatingPQ;
	static PriorityQueue<Kiosk> waitingPQ;
	static Kiosk[] kiosks;
	static class Kiosk{
		int id;
		int use;
		int doneTime;
		public Kiosk(int id, int use, int doneTime) {
			this.id = id;
			this.use = use;
			this.doneTime = doneTime;
		}
	}
	public static void main(String[] args) {
		
	} 
	public int solution(int n, String[] customers) {
        int answer = 0;
        kiosks = new Kiosk[n+1];
        for(int id=1;id<=n;id++) {
        	kiosks[id] = new Kiosk(id,0,0);
        	waitingPQ.add(kiosks[id]);
        }
        arrivalTimes = new int[customers.length];
        operatingPQ = new PriorityQueue<Kiosk>();
        waitingPQ = new PriorityQueue<Kiosk>();
        //고객 도착 시간 전부 초로 정량화
        for(int i=0;i<customers.length;i++) {
        	int second = 0;
        	int takeSecond =0;
        	st = new StringTokenizer(customers[i]);
        	String arrivalDateInfo = st.nextToken();
        	String arrivalTimeInfo = st.nextToken();
        	String takeTimeInfo= st.nextToken();
        	String[] date = arrivalDateInfo.split("/");
        	String month_String = date[0];
        	String day_String = date[1];
        	
        	int month = Integer.parseInt(month_String);
        	int day = Integer.parseInt(day_String);
        	
        	for(int m=1;m<month;m++) day+=months[m];
        	
        	String[] arrivalTime = arrivalTimeInfo.split(":");
        	String hour_string = arrivalTime[0];
        	String minute_string = arrivalTime[1];
        	String second_string = arrivalTime[2];
        	int hour = Integer.parseInt(hour_string)+(day*24);
        	int minute = Integer.parseInt(minute_string)+(hour*60);
        
        	second = Integer.parseInt(second_string)+minute*60;
        	takeSecond = Integer.parseInt(takeTimeInfo)*60;
        	
        	arrivalTimes[i] = second;
        }
        
        for(int i=0;i<arrivalTimes.length;i++) {
        	Kiosk matchKiosk = waitingPQ.poll();
        	matchKiosk.use+=1;
        }
        
        return answer;
    }
}
