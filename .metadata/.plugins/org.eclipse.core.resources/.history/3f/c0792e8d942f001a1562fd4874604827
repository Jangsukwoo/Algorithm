package SDS;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

/* 백준 2042번
 * 세그먼트트리
 * N,M,K (N: 수의 개수, M: 수의 변경이 일어나는 회수, K: 구간의 합을 구하는 회수)
 * 1<=N<=1000000
 * 1<=M<=10000
 * 1<=K<=10000
 * 
 */
public class 자료구조_구간합구하기_세그먼트트리 {
	static int M,N,K;
	static int[] data = new int[1000000];
	static long[] segmentTree = new long[2097152];
	public static void main(String[] args) throws IOException {
		inputData();
		setSegmentTree(1,0,(M-1));
		reviseSegmentTree();
	}
	private static void setSegmentTree(int node, int start, int end ) {
		if(start==end) return segmentTree[node] = data[start];
	}
	private static void inputData() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		M = Integer.parseUnsignedInt(st.nextToken());
		N = Integer.parseUnsignedInt(st.nextToken());
		K = Integer.parseUnsignedInt(st.nextToken());
		for(int i=0;i<M;i++) {
			st = new StringTokenizer(br.readLine());
			data[i] = Integer.parseInt(st.nextToken());
		}
	}
}
