import java.util.Scanner;

public class 색종이붙이기 {
   static int[][] paperMap = new int[10][10];
   static int[] paperCount = new int[6];
   static int minimum = (Integer.MAX_VALUE/2);
   static int attachRow,attachCol;
   static boolean possible = true;
   public static void main(String[] args) {
      Scanner sc = new Scanner(System.in);
      for(int row=0;row<10;row++)
         for(int col=0;col<10;col++) paperMap[row][col] = sc.nextInt();

      dfs(0);

      if(possible) System.out.println(minimum);
      else System.out.println("-1");

   }
   private static void dfs(int paperNumber) {
      
      
      
      for(int row=0;row<10;row++){
         for(int col=0;col<10;col++){ //맵검사
      
            
            if(paperMap[row][col]!=1){//빈자리면
            
               
               for(int paper=1;paper<=5;paper++){
                  if(paperCount[paper]<5) {//아직 5개 미만이고
               
                     if(attach(paper,row,col)){//붙였을때 성공했으면 
                        paperCount[paper]++;
                        dfs(paper);      
                        paperCount[paper]--;
                        detach(paper,row,col);
                     }
                     
                  }//5개 아직 다 못썼으면 
               }         
            }
         }
      }
   }
   private static void detach(int paper, int curRow, int curCol) {
      int endRow = curRow+paper;
      int endCol = curCol+paper;
      for(int row=curRow;row<endRow;row++) {
         for(int col=curCol;col<endCol;col++) {
            paperMap[row][col] = 0;
         }
      }
      
   }
   private static boolean attach(int paper,int curRow,int curCol) {//붙여보기
      int[][] copyMap = new int[10][10];
      //boolean attachSuccess = true;
      for(int row=0;row<10;row++) {
         for(int col=0;col<10;col++){
            copyMap[row][col] = paperMap[row][col];
         }
      }//맵 카피해보고
      
      int endRow = curRow+paper;
      int endCol = curCol+paper;
      if(rangeCheck(endRow,endCol)) {//영역안쪽이면 
         for(int row=curRow;row<endRow;row++) {
            for(int col=curCol;col<endCol;col++) {
               if(copyMap[row][col]==1){//색종이가 있으면
                  return false;//끝내버림
               }
            }
         }
         if(endCheck(endRow,endCol)) {//마지막이고
        	 
        	 if(completecheck()) {
        		 
        	 }
        	 int min =0;
        	 for(int i=1;i<=5;i++) min+=paperCount[i];
        	 minimum = Math.min(minimum,min);
         }
         for(int row=0;row<10;row++) {
            for(int col=0;col<10;col++){
               paperMap[row][col]=copyMap[row][col];
            }
         }//맵 카피해보고
         return true;   
      }
      else return false;


   }
   private static boolean completecheck() {
	for(int row=0;row<10;row++) {
		for(int col=0;col<10;col++) {
			if(paperMap[row][col]==0) return false;
		}
	}
	return true;
}
private static boolean endCheck(int endRow, int endCol) {
	if(endRow==9 && endCol==9) return true;
	return false;
}
private static boolean rangeCheck(int endRow, int endCol) {
      if(endRow<10 && endCol<10) return true;
      return false;
   }

}