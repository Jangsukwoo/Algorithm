package Samsung;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
/*
 * 시작 200
 * 
 */
import java.util.Scanner;
class Pinball{
	int row;
	int col;
	int dir;
	public Pinball(int r, int c, int d){
		row = r;
		col = c;
		dir =d;
	}
}
public class 모의_핀볼게임 {
	static int[] dr = {-1,0,1,0};
	static int[] dc = {0,1,0,-1};//상우하좌
	static int N;
	static int[][] board;
	static boolean[][][] visitAnddirection;
	static int maxscore;
	static int startR, startC;
	static Queue<Pinball> q = new LinkedList<Pinball>();
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int T = sc.nextInt();
		for(int testcase=1;testcase<=T;testcase++){
			N = sc.nextInt();
			board = new int[N][N];
			visitAnddirection = new boolean[N][N][4];
			q.clear();
			maxscore=0;
			for(int row=0;row<N;row++) {
				for(int col=0;col<N;col++) {
					board[row][col] = sc.nextInt();
					if(board[row][col]==0){
						q.add(new Pinball(row,col,0));
						visitAnddirection[row][col][0]=true;
					}
				}
			}
			BFS();
			System.out.println("#"+testcase+" "+maxscore);
		}
	}
	private static void BFS() {
		while(!q.isEmpty()){
			int size = q.size();
			for(int i=0;i<size;i++){
				Pinball curPinball = q.poll();
				for(int dir=0;dir<4;dir++){
					int nr = curPinball.row+dr[dir];
					int nc = curPinball.col+dc[dir];
					if(nr==-1){
						curPinball.dir = 1;
						if(!visitAnddirection[curPinball.row][curPinball.col][curPinball.dir]){
							q.add(curPinball);//좌표는 그대로 방향은 반대로
							visitAnddirection[curPinball.row][curPinball.col][curPinball.dir]=true;
						}
					}else if(nr==N){
						curPinball.dir = -1;
						if(!visitAnddirection[curPinball.row][curPinball.col][curPinball.dir]){
							q.add(curPinball);//좌표는 그대로 방향은 반대로
							visitAnddirection[curPinball.row][curPinball.col][curPinball.dir]=true;
						}
					}else if(nc==-1){
						
					}else if(nc==N){
						
					}
				}
					
			}
		}
	}
}
