package CodingStudy;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

/*
 * 18:13
 * 블록이 추가되는 경우는 없다.
 * 이동은 아래에서 위로 올리는것만 생각하고
 * 맵은 로테이트 시키면서 테스트하자.
 * 
 * 보드 크기 최대 20 by 20
 * 최대 5번 이동시켜서 얻을 수 있는 가장 큰 블록??
 * 
 * 19:01 Pause
 * 
 * 19:22~
 * 
 * 
 */
public class 이공사팔 {
	static int N;
	static int[][] originalGameBoard;
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static StringTokenizer st;
	
	public static void main(String[] args) throws NumberFormatException, IOException {
		setData();
		dfs(0,originalGameBoard);
	}
	private static void dfs(int depth, int[][] currentBorad){
		if(depth==5){
			return;
		}
		for(int rotate=0;rotate<4;rotate++){
			currentBorad = rotateBoard(currentBorad);
			int[][] reulstBoard = moveUp(currentBorad);
		}
	}
	private static int[][] moveUp(int[][] currentBorad){//위로 올린다.
		int[][] moveBoard = copy(currentBorad);
		for(int col=0;col<N;col++){
			int currentNumber=moveBoard[N-1][col];
			int currentRow=N-1;
			for(int row=(N-2);row>0;row--){
				if(moveBoard[row][col]==0) continue;
				else if(moveBoard[row][col]==currentNumber){
					moveBoard[row][col] = currentNumber*2;
					moveBoard[currentRow][col] = 0;
					currentRow=(row-1);
					currentNumber=moveBoard[row-1][col];
				}
			}
			int zeroIndex;
			for(int row=0;row<N;row++) {
				
				if(moveBoard[row][col]!=0){
					
				}
			}
		}
		return moveBoard;
	}
	private static void view(int[][] board) {
		for(int row=0;row<N;row++) {
			for(int col=0;col<N;col++) {
				System.out.print(board[row][col]+" ");
			}
			System.out.println();
		}
		System.out.println();
	}
	private static int[][] rotateBoard(int[][] board){
		int[][] originalBoard = copy(board);
		for(int row=0;row<N;row++) {
			for(int col=0;col<N;col++) {
				board[row][col] = originalBoard[N-1-col][row];
			}
		}
		return board;
	}
	private static int[][] copy(int[][] currentBorad){
		int[][] copyBoard = new int[N][N];
		for(int row=0;row<N;row++) {
			for(int col=0;col<N;col++) {
				copyBoard[row][col]=currentBorad[row][col];
			}
		}
		return copyBoard;
	}
	private static void setData() throws NumberFormatException, IOException {
		N = Integer.parseInt(br.readLine());
		originalGameBoard = new int[N][N];
		for(int row=0;row<N;row++) {
			st = new StringTokenizer(br.readLine());
			for(int col=0;col<N;col++) {
				originalGameBoard[row][col] = Integer.parseInt(st.nextToken());
			}
		}
	}
}
