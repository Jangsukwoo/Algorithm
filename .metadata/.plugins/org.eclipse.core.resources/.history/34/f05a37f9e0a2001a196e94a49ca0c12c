package 공채대비;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

/*
 * 10:25~
 * A1->A2로의 최단경로는 여러가지가 나올 수 있다.
 */
public class 연결 {
	static int N,M;
	static int A1R,A1C;
	static int A2R,A2C;
	static int B1R,B1C;
	static int B2R,B2C;
	static int[][] circuit;
	static boolean[][] visit;
	static int[][] dist;
	static int Alength;
	static int[] dr = {-1,0,1,0};
	static int[] dc = {0,1,0,-1};
	static Queue<int[]> q;
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static StringTokenizer st;
	public static void main(String[] args) throws IOException {
		setData();
		connectA();
	}
	private static void connectA() {
		int length = 0;
		while(!q.isEmpty()){
			int size = q.size();
			for(int i=0;i<size;i++){
				
			}
		}
	}
	private static void setData() throws IOException{
		st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		circuit = new int[N][M];
		st = new StringTokenizer(br.readLine());
		A1C = Integer.parseInt(st.nextToken());
		A1R = Integer.parseInt(st.nextToken());
		st = new StringTokenizer(br.readLine());
		A2C = Integer.parseInt(st.nextToken());
		A2R = Integer.parseInt(st.nextToken());
		st = new StringTokenizer(br.readLine());
		B1C = Integer.parseInt(st.nextToken());
		B1R = Integer.parseInt(st.nextToken());
		st = new StringTokenizer(br.readLine());
		B1C = Integer.parseInt(st.nextToken());
		B1R = Integer.parseInt(st.nextToken());
		circuit[A1R][A1C] = 1;
		q = new LinkedList<int[]>();
		insertQueue(A1R,A1C,0);
		circuit[A2R][A2C] = 1;
	}
	private static void insertQueue(int a1r, int a1c,int dist){
		q.add(new int[] {a1r,a1c});
		visit[a1r][a1c] = true;
	}
}
