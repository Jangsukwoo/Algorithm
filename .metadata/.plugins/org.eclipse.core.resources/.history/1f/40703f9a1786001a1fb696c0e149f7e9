package CodingStudyHW;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.PriorityQueue;
import java.util.StringTokenizer;
/*
 * 19:08~
 * 0 1 2 3 4 
 * X 상 우 하 좌 
 * 
 */

public class 무선충전 {
	static int T;
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static StringTokenizer st;
	static int[] userA,userB;
	static int time;
	static int apSize;
	static AP[] aps;
	static int[] dr = {0,-1,0,1,0};
	static int[] dc = {0,0,1,0,-1};
	static int userAR,userAC;
	static int userBR,userBC;
	static PriorityQueue<AP>[][] chargeMap;
	static int chargeAmount;
	static class AP{
		int row;
		int col;
		int chargeSize;
		int power;
		public AP(int row, int col, int chargeSize, int power) {
			this.row = row;
			this.col = col;
			this.chargeSize = chargeSize;
			this.power = power;
		}
	}
	public static void main(String[] args) throws NumberFormatException, IOException {
		T = Integer.parseInt(br.readLine());
		for(int testcase=1;testcase<=T;testcase++){
			setData();
			installAP();
			moveUser();
		}
	}
	private static void installAP(){
		for(int ap=0;ap<apSize;ap++) {
			for(int row=1;row<=10;row++) {
				for(int col=1;col<=10;col++) {
					int ar = aps[ap].row;
					int ac = aps[ap].col;
					int c = aps[ap].chargeSize;
					int dist = Math.abs(ar-row) + Math.abs(ac-col);
					if(dist<c) chargeMap[row][col].add(aps[ap]);
				}
			}
		}

	}
	private static void moveUser() {
		int t = 0;
		while(t<time){
			
		}
	}
	private static void setData() throws IOException{
		st = new StringTokenizer(br.readLine());
		time = Integer.parseInt(st.nextToken());
		apSize = Integer.parseInt(st.nextToken());
		userA = new int[time];
		userB = new int[time];
		aps= new AP[apSize];
		st = new StringTokenizer(br.readLine());
		for(int t=0;t<time;t++) userA[t] = Integer.parseInt(st.nextToken());
		for(int t=0;t<time;t++) userB[t] = Integer.parseInt(st.nextToken());
		for(int i=0;i<apSize;i++) {
			st = new StringTokenizer(br.readLine());
			int col = Integer.parseInt(st.nextToken());
			int row = Integer.parseInt(st.nextToken());
			int chargeSize = Integer.parseInt(st.nextToken());
			int power = Integer.parseInt(st.nextToken());
			aps[i] = new AP(row, col, chargeSize, power);
		}
		userAR = 1;
		userAC = 1;
		userBR = 1;
		userBC = 1;
		chargeMap = new PriorityQueue[11][11];
		for(int row=1;row<=10;row++) {
			for(int col=1;col<=10;col++) {
				chargeMap[row][col] = new PriorityQueue<AP>();
			}
		}
	}
}
