package CodingStudySamsung모의;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

/*
 * 구슬을 떨어뜨리는 위치를 바꿔가면서 
 * 최대한 많은 벽돌 깨는 경우를 찾아서
 * 깬 벽돌의 개수를 출력
 */
public class 벽돌깨기 {
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
	static StringTokenizer st;
	static int N,W,H;
	static int[] pick;
	static int[][] bricks;
	static int[][] testBricksMap;
	static int maxCrush;
	static int crushValue;
	static int[] dr = {-1,0,1,0};
	static int[] dc = {0,1,0,-1};
	public static void main(String[] args) throws NumberFormatException, IOException {
		int T = Integer.parseInt(br.readLine());
		for(int testcase=1;testcase<=T;testcase++) {
			setData();
			duplicationPermutation(0);
		}
	}
	private static void duplicationPermutation(int depth) {
		if(depth==N){//공을 떨어뜨릴 위치 선정 
			fallBall();
			return;
		}
		for(int i=0;i<W;i++) {
			pick[depth] = i;
			duplicationPermutation(depth+1);
		}
	}
	private static void fallBall(){
		crushValue=0;
		copyBricks();
		for(int shoot=0;shoot<N;shoot++){
			bfsCrush(shoot);
		}
	}
	private static void bfsCrush(int shoot) {	
		boolean[][] markingCrushTarget = new boolean[H][W];
		Queue<int[]> q = new LinkedList<int[]>();
		for(int row=0;row<H;row++) {
			if(testBricksMap[row][shoot]==1){
				q.add(new int[] {row,shoot,testBricksMap[row][shoot]});
				markingCrushTarget[row][shoot] = true;
				while(!q.isEmpty()){//폭발 범위가 있는 벽들만 넣자
					
				}
				break;
			}
		}
	}


	private static void copyBricks() {
		for(int row=0;row<H;row++) 
			for(int col=0;col<W;col++) testBricksMap[row][col] = bricks[row][col]; 

	}
	private static void setData() throws IOException {
		st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		W = Integer.parseInt(st.nextToken());//열
		H = Integer.parseInt(st.nextToken());//행
		bricks = new int[H][W];
		pick = new int[N];
		maxCrush = 0;
		for(int row=0;row<H;row++) {
			st = new StringTokenizer(br.readLine());
			for(int col=0;col<W;col++) {
				bricks[row][col] = Integer.parseInt(st.nextToken());
			}
		}
	}
}
