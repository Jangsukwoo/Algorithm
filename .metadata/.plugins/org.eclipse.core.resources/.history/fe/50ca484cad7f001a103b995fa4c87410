package CodingStudyHW;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.Comparator;
import java.util.StringTokenizer;

/*
 * 세로,가로 범위 4만 by 4만
 * 제일 높은 위치부터 물을 빼자 
 */
public class 수족관1 {
	static int N,holeCnt;//꼭지점 개수, 구멍 개수
	static int totalWater;
	static int leakWater;
	static int remainWater;
	static Hole[] holes;
	static boolean[] wall;
	static boolean[] height;
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static StringTokenizer st;
	static class Hole{
		int leftX;
		int rightX;
		int height;
		public Hole(int leftX, int rightX, int height) {
			super();
			this.leftX = leftX;
			this.rightX = rightX;
			this.height = height;
		}
	}
	public static void main(String[] args) throws NumberFormatException, IOException {
		setData();
		heightSorting();
		leakWater();
	}
	private static void leakWater() {
		for(int i=0;i<holeCnt;i++) {
			int currentHeight = holes[i].height;
			int currentLeftX = holes[i].leftX;
			int currentRightX = holes[i].rightX;
		}
	}
	private static void heightSorting() {
		Arrays.sort(holes , new Comparator<Hole>() {
			@Override
			public int compare(Hole o1, Hole o2) {
				return Integer.compare(o1.height,o2.height);
			}
		});
	}
	private static void setData() throws NumberFormatException, IOException {
		N = Integer.parseInt(br.readLine());
		int maxWall=0;
		int maxHeight=0;
		int beforeX=0;
		int beforeY=0;
		for(int i=1,x,y;i<=(N/2);i++){ //전체 물량 구하기
			st = new StringTokenizer(br.readLine());
			int firstX = Integer.parseInt(st.nextToken());
			int firstY = Integer.parseInt(st.nextToken());
			st = new StringTokenizer(br.readLine());
			int secondX = Integer.parseInt(st.nextToken());
			int secondY = Integer.parseInt(st.nextToken());
			if(i==0) beforeY = secondY;
			if(i>0) {
				int width = firstX-beforeX;
				totalWater+=(beforeY*width);
				beforeX = firstX;
				beforeY = secondY;
			}
			maxWall = Math.max(secondX, maxWall);
			maxHeight = Math.max(secondY,maxHeight);
		}
		holeCnt = Integer.parseInt(br.readLine());
		holes = new Hole[holeCnt];
		wall = new boolean[maxWall+1];
		height = new boolean[maxHeight+1];
		for(int i=0,leftX,leftY,rightX,rightY;i<holeCnt;i++) {
			st = new StringTokenizer(br.readLine());
			leftX = Integer.parseInt(st.nextToken());
			leftY = Integer.parseInt(st.nextToken());
			rightX = Integer.parseInt(st.nextToken());
			rightY = Integer.parseInt(st.nextToken());
			holes[i] = new Hole(leftX,rightX,rightY);
		}
	}
}
