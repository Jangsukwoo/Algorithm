package CodingTest;

public class 라4 {

	public static void main(String[] args) {
		int[][] maze = {{0, 1, 0, 0, 0, 0}, {0, 1, 0, 1, 1, 0}, {0, 1, 0, 0, 1, 0}, {0, 1, 1, 1, 1, 0}, {0, 1, 0, 0, 0, 0}, {0, 0, 0, 1, 1, 0}};
		System.out.println(solution(maze));
	}

	static int[][] pos = {{1,0},{0,1},{-1,0},{0,-1}};

	//아래 오른 위 왼 
	//1 : 오른
	//2 : 위
	static int[] dr = {-1,0,1,0};
	static int[] dc = {0,-1,0,1};
	static int[][] globalMaze;
	static int answer;
	static int N;
	private static int solution(int[][] maze) {
		globalMaze = maze.clone();
		N = maze.length;
		if(globalMaze[1][0] ==0) dfs(0,0,0,0,1);
		else if(globalMaze[0][1] == 0) dfs(0,0,0,1,2);
		return answer;
	}
	private static void dfs(int cr, int cc ,int time, int dir, int left) {
		if(cr== N-1 && cc == N-1) {
			answer = time;
			return ;
		}else {
			int nr = r + pos[left][0];
			int nc = c + pos[left][1];
			if(nr<0 || nc<0 || nr>= map.length || nc >= map.length || map[nr][nc] ==1) {
				nr = r + pos[dir][0];
				nc = c + pos[dir][1];
				while(true) {
					if(nr>=0 && nc>=0 && nr< map.length && nc < map.length&&map[nr][nc] == 0) {
						break;
					}
					dir--;;
					dir = dir ==-1? 3 : dir;
					left = dir+1;
					left = left==4? 0 : left;
					nr = r + pos[dir][0];
					nc = c + pos[dir][1];
				}
				dfs(map,nr,nc,cnt+1,dir,left);
			}else {
				if(map[nr][nc] == 0) {
					dfs(map,nr,nc,cnt+1,left,(left+1)%4);
				}
			}
		}
	}
}