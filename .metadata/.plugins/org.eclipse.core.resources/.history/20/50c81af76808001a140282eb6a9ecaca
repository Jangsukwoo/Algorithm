package Simulation;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Stack;
import java.util.StringTokenizer;
/*
 * 에러조건
 * 1. 숫자 부족으로 연산을 수행 할 수 없을 때
 * 2. 0으로 나눴을 때
 * 3. 연산 결과의 절대값이 10^9를 넘어갈 때
 * 
 * 음수 나눗셈,나머지 조건
 * 1. 피연산자가 음수일 때 
 * 피연산자의 절대값을 씌우고
 * 피연산자중 음수가 1개일 땐
 * 몫의 부호가 음수 
 * 
 * 2.나머지시 피제수의 부호를 그대로 따라간다.
 * 
 * * 피제수
 * a/b 에서 a가 피제수,b가 제수
 */
public class 고스택 {
	static Stack<Integer> gostack = new Stack<Integer>();
	static Stack<Integer> number = new Stack<Integer>();
	static ArrayList<String> command;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		while(true){
			number = new Stack<Integer>();
			while(true) {
				String readLine = br.readLine();
				StringTokenizer st = new StringTokenizer(readLine);
				String command = st.nextToken();
				switch (command) {
				case "NUM":
					int value = Integer.parseInt(st.nextToken());
					break;
				case "QUIT":
					return;
					break;
				}
			}
			
			while(true){
				String readLine = br.readLine();
				StringTokenizer st = new StringTokenizer(readLine);
				String command = st.nextToken();
				switch (command) {
				case "NUM"://가장 맨 위에 숫자 저장
					break;
				case "POP"://가장 맨위 숫자 제거
					break;
				case "INV"://첫번째 수의 부호를 바꾼다.
					break;
				case "DUP"://첫번째 숫자와 똑같은 값을 저장
					break;
				case "SWP"://첫번재 숫자랑 두번재 숫자 위치 스왑
					break;
				case "ADD"://첫번재 숫자랑 두번째 숫자 더하기
					break;
				case "SUB"://첫번째 숫자랑 두번째 숫자 빼기 (두번째-첫번째)
					break;
				case "MUL"://첫번째 숫자랑 두번째 숫자 곱
					break;
				case "DIV"://첫번째 숫자로 두번째 수를 나눈 몫 저장
					break;
				case "MOD"://첫번째 숫자로 두번째 숫자를 나눈 나머지 저장
					break;

				}
			}
		}

	}
}
