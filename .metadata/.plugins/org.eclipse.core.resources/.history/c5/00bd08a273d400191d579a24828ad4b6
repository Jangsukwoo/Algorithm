package AlgoSpot;

import java.util.Scanner;

public class 게임판덮기 {
	
	static char[][] gameMap;
	static int rowSize,colSize;
	static int possibleCase;
	static int[] dr = {-1,0,1,0};
	static int[] dc = {0,1,0,-1};//상우하좌
	
	
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int T = sc.nextInt();
		for(int testcase=1;testcase<=T;testcase++){
			possibleCase=0;
			rowSize = sc.nextInt();
			colSize = sc.nextInt();
			gameMap = new char[rowSize][colSize];
			sc.nextLine();
			
			for(int r=0;r<rowSize;r++) {
				String temp = sc.nextLine();
				gameMap[r] = temp.toCharArray();
			}
			
			dfs();
			
			System.out.println(possibleCase);
		}
	}
	
	
	
	private static void dfs() {
		
		
		for(int row=0;row<rowSize;row++) {
			for(int col=0;col<colSize;col++) {
				if(gameMap[row][col]=='.'){//맨땅이면
					for(int blockNumber=1;blockNumber<=4;blockNumber++){//하나씩 시도해본다.
						if(put(blockNumber,row,col)) {
							
						}
					}
				}
			}
		
		}
		
	}





	private static boolean put(int blockNumber,int row,int col) {
		switch(blockNumber) {
		case 1: //상좌
			if(Check(row+dr[0],col+dc[0]) && Check(row+dr[3],col+dc[3])) return true;
			else return false;
		case 2://상우
			if(Check(row+dr[0],col+dc[0]) && Check(row+dr[1],col+dc[1])) return true;
			else return false;
		case 3://하좌
			if(Check(row+dr[2],col+dc[2]) && Check(row+dr[3],col+dc[3])) return true;
			else return false;
		case 4://하우
			if(Check(row+dr[2],col+dc[2]) && Check(row+dr[3],col+dc[3])) return true;
			else return false;	
		}
	}



	private static boolean Check(int row, int col) {
		if(row>=0 && row<rowSize && col>=0 && col<colSize) {
			
		}
		return false;
	}



	private static void view() {
		for(int row=0;row<rowSize;row++){
			for(int col=0;col<colSize;col++) {
				System.out.print(gameMap[row][col]);
			}
			System.out.println();
		}
		System.out.println();
	}
}
