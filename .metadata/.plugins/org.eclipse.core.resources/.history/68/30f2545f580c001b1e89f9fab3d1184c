package SamsungDS;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class 차량정비소 {
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static StringTokenizer st;
	static int N,M,K,A,B;
	static Receipt[] receipts;
	static Repair[] repairs;
	static Customer[] customers;
	static PriorityQueue<Customer> receiptWatingQueue;
	static PriorityQueue<Customer> repairWatingQueue;
	static int answer;
	static class Receipt{
		int id;
		int needWorkTime;
		int workTime;
		int customerId;
		boolean working;
		public Receipt(int id, int needWorkTime, int workTime, int customerId, boolean working) {
			this.id = id;
			this.needWorkTime = needWorkTime;
			this.workTime = workTime;
			this.customerId = customerId;
			this.working = working;
		}
	}
	static class Repair{
		int id;
		int needWorkTime;
		int workTime;
		int customerId;
		boolean working;
		public Repair(int id, int needWorkTime, int workTime, int customerId, boolean working) {
			this.id = id;
			this.needWorkTime = needWorkTime;
			this.workTime = workTime;
			this.customerId = customerId;
			this.working = working;
		}
		
	}
	static class Customer{
		int id;
		int arrivalTime;
		int receiptId;
		int repairId;
		public Customer(int id, int arrivalTime, int receiptId, int repairId) {
			this.id = id;
			this.arrivalTime = arrivalTime;
			this.receiptId = receiptId;
			this.repairId = repairId;
		}
	}
	public static void main(String[] args) throws NumberFormatException, IOException {
		int T = Integer.parseInt(br.readLine());
		for(int testcase=1;testcase<=T;testcase++) {
			setData();
			getAnswer();
		}
	}
	private static void getAnswer() {
		while(!receiptWatingQueue.isEmpty() && !repairWatingQueue.isEmpty()){//두 웨이팅 큐 다 끝날때 까지
			
		}
	}
	private static void setData() throws IOException {
		answer = 0;
		st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken()); //접수 창구 수
		M = Integer.parseInt(st.nextToken()); //정비 창구 수
		K = Integer.parseInt(st.nextToken()); //방문 고객 수
		A = Integer.parseInt(st.nextToken()); //지갑을 잃어버린 고객이 이용한 접수 창구 번호
		B = Integer.parseInt(st.nextToken()); //지갑을 잃어버린 고객이 이용한 정비 창구 번호 
		receipts = new Receipt[N+1];
		repairs = new Repair[M+1];
		st = new StringTokenizer(br.readLine());
		for(int i=1;i<=N;i++) {
			int needWorkTime = Integer.parseInt(st.nextToken());
			receipts[i] = new Receipt(i, needWorkTime, 0, 0, false);
		}
		st = new StringTokenizer(br.readLine());
		for(int i=1;i<=M;i++) {
			int needWorkTime = Integer.parseInt(st.nextToken());
			repairs[i] = new Repair(i, needWorkTime, 0, 0, false);
		}
	
		
		receiptWatingQueue = new PriorityQueue<Customer>(new Comparator<Customer>() {
			@Override
			public int compare(Customer o1, Customer o2) {
				if(o1.arrivalTime==o2.arrivalTime) return Integer.compare(o1.id,o2.id);
				return Integer.compare(o1.arrivalTime,o2.arrivalTime);
			}
		});
	
		
		repairWatingQueue = new PriorityQueue<Customer>();
		
		
		customers = new Customer[K+1];
		st = new StringTokenizer(br.readLine());
		for(int i=1;i<=K;i++) {
			int arriavalTime = Integer.parseInt(st.nextToken());
			customers[i] = new Customer(i, arriavalTime, 0, 0);
			repairWatingQueue.add(customers[i]);
		}
	}
}
