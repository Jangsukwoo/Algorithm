package CodingAcademy;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;



public class 단어퍼즐 {
	class TrieNode{
		TrieNode[] children = new TrieNode[26];//26개의 알파벳 하나하나의 인덱스를 뜻하는 배열
		boolean isEnd;
		boolean isHit;
	}
	class Trie{ //트라이, 문자검색
		TrieNode root = new TrieNode(); //가장 루트는 빈문자열

		void insert(String word){//어떤 단어를 받아서 처리
			TrieNode current = root;
			for(int i=0;i<word.length();i++){//들어온 단어의 길이만큼 첫글자부터 확인
				int wordIndex = word.charAt(i)-'A'; //글자 알파벳의 인덱스
				if(current.children[wordIndex]==null){//글자 알파벳을 확인해 봤을 때 null이라는건 존재하지않는다는것
					current.children[wordIndex] =new TrieNode();//없으니까 새로 생성해준다.
				}
				current = current.children[wordIndex];// 다음 레벨로 넘어가기 위해 생성된 글자가 현재 노드가 된다
			}
			current.isEnd = true; //단어의 맨 끝
		}
		boolean containsNode(String word){//어떤 단어를 받았을 때 이 단어가 확인이 끝난 단어인지?
			TrieNode current = root;
			for(int i=0;i<word.length();i++) {
				int wordIndex = word.charAt(i)-'A';
				if(current.children[wordIndex]==null) return false; //이 글자는 없다는 걸 false로 반환 			
				current = current.children[wordIndex];
			}
			return current.isEnd; //단어의 맨 끝단어인가?
		}
		void clearHit() {
			for(int i=0;i<26;i++) {
				if(root.children[i]!=null){
					root.children[i].isHit = false;
					dfsclear(root.children[i]);
				}
			}
			
		}
		private void dfsclear(TrieNode trieNode) {
			for(int i=0;i<26;i++) {
				if(trieNode.children[i]!=null){
					trieNode.children[i].isHit=false;
					dfsclear(trieNode.children[i]);
				}
			}
		}

	}
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
	static int w;//단어집의 단어 수
	static int b;//보글 게임판 수 
	static Trie BoggleTrie = new Trie();
	static char[][] boggleBoard = new char[4][4];
	static boolean[][] visit = new boolean[4][4];
	static int[] dr = {-1,-1,0,1,1,1,0,-1};
	static int[] dc = {0,1,1,1,0,-1,-1,-1};
	//최대 점수, 가장 긴 단어, 찾은 단어의수 
	static int maxSum;
	static int maxLength;
	static int findWordCount;
	static ArrayList<String> answer;
	public static void main(String[] args) {

	}
}
