package 공채대비;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

import CodingTest.goToOffice;
/*
 * N,M,K
 */
public class 나무재테크 {
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static StringTokenizer st;
	static int N,M,K;
	static PriorityQueue<Tree>[][] ground;
	static int[][] nutrient;
	static int[][] addNutrient;
	static int[] dr = {-1,-1,0,1,1,1,0,-1};
	static int[] dc = {0,1,1,1,0,-1,-1,-1};
	static class Tree implements Comparable<Tree>{
		int row;
		int col;
		int age;
		boolean life;
		public Tree(int row, int col, int age, boolean life) {
			this.row = row;
			this.col = col;
			this.age = age;
			this.life = life;
		}
		@Override
		public int compareTo(Tree o) {
			return Integer.compare(this.age,o.age); //어린순
		}
	}
	public static void main(String[] args) throws IOException {
		setData();
		simulation();
	}
	private static void simulation() {
		for(int year=1;year<=K;year++){
			spring();
			summer();
			fall();
			winter();
		}
	}
	private static void spring() {
		/*
		 * 나무가 자신의 나이만큼 양분을 먹고 나이가 1 증가함.
		 * 하나의 칸에 여러 나무가 있으면 어린나무부터 양분을 먹고
		 * 양분이 부족해서 자신의 나이만큼 양분을 먹을 수 없으면 죽음
		 */
		
		for(int row=0;row<N;row++) {
			for(int col=0;col<N;col++) {
				if(ground[row][col].size()>0){//나무가 존재
					ArrayList<Tree> templist = new ArrayList<Tree>();
					while(!ground[row][col].isEmpty()){
						Tree currentTree = ground[row][col].poll();
						if(nutrient[row][col]>=currentTree.age){
							nutrient[row][col]-=currentTree.age;
							currentTree.age+=1;//나이증가
						}else currentTree.life = false;
						templist.add(currentTree);
					}
					for(Tree tree : templist) ground[row][col].add(tree);
				}
			}
		}
	}
	private static void summer() {
		
	}
	private static void fall() {
		
	}
	private static void winter() {
		
	}
	private static void setData() throws IOException {
		st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		K = Integer.parseInt(st.nextToken());
		ground = new PriorityQueue[N][N];
		nutrient = new int[N][N];
		addNutrient = new int[N][N];
		for(int row=0;row<N;row++){
			st = new StringTokenizer(br.readLine());
			for(int col=0;col<N;col++) {
				nutrient[row][col] = 5;
				ground[row][col] = new PriorityQueue<Tree>();
				addNutrient[row][col] = Integer.parseInt(st.nextToken());
			}
		}
		for(int i=0;i<M;i++) {
			st = new StringTokenizer(br.readLine());
			int col = Integer.parseInt(st.nextToken())-1;
			int row = Integer.parseInt(st.nextToken())-1;
			int age = Integer.parseInt(st.nextToken());
			ground[row][col].add(new Tree(row, col, age, true));
		}
	}
}
