package CodingStudy;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

/*
 * 이 성에 있는 방의 개수
 * 가장 넓은 방의 넓이
 * 하나의 벽을 제거하여 얻을 수 있는 가장 넓은 방 크기
 * 
 */
public class 성곽 {
	static int R,C;
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static StringTokenizer st;
	static int[][] castle;
	static boolean[][] visit;
	static int answer1,answer2,answer3;
	static Queue<int[]> q; 
	static int[] dr = {-1,0,1,0};
	static int[] dc = {0,1,0,-1};
	static Direction[] directionlist; 
	static class Direction{
		int[] dr;
		int[] dc;
		public Direction(int[] dr, int[] dc) {
			this.dr = dr;
			this.dc = dc;
		}
		public Direction() {
			// TODO Auto-generated constructor stub
		}
	}
	public static void main(String[] args) throws IOException {
		setData();
		makeDirectionList();
		simulation();
	}



	private static void simulation() {
		for(int row=0;row<R;row++) {
			for(int col=0;col<C;col++) {
				if(visit[row][col]==false){
					q.clear();
					insertQueue(row,col);
					bfs();
				}
			}
		}
	}

	private static void bfs(){
		int roomsize=1;
		while(!q.isEmpty()){
			int size = q.size();
			for(int i=0;i<size;i++){
				int[] curRC = q.poll();
				int cr = curRC[0];
				int cc = curRC[1];

			}
		}
	}


	private static void insertQueue(int row, int col) {
		q.add(new int[] {row,col});
		visit[row][col] = true;
	}

	private static void setData() throws IOException {
		st = new StringTokenizer(br.readLine());
		C = Integer.parseInt(st.nextToken());
		R = Integer.parseInt(st.nextToken());
		castle = new int[R][C];
		visit = new boolean[R][C];
		for(int row=0;row<R;row++){
			st = new StringTokenizer(br.readLine());
			for(int col=0;col<C;col++){
				castle[row][col] = Integer.parseInt(st.nextToken());
				if(row==0) castle[row][col]-=2;
				if(col==0) castle[row][col]-=1;
				if(row==R-1) castle[row][col]-=8;
				if(col==C-1) castle[row][col]-=4;
			}
		}
		q = new LinkedList<int[]>();
		view();
	}
	private static void makeDirectionList() {
		directionlist = new Direction[16];
		for(int i=0;i<16;i++) directionlist[i] = new Direction();
	}
	private static void view() {
		for(int row=0;row<R;row++){
			for(int col=0;col<C;col++){
				System.out.print(castle[row][col]+" ");
			}
			System.out.println();
		}
		System.out.println();
	}
}
