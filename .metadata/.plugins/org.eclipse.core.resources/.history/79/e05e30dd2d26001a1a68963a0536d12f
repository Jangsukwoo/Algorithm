package CodingStudyHW;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

/*
 * 집에는 문이 두개 있음
 * 한쪽 문에서 다른 쪽 문을 볼 수 있도록 거울을 설치
 * 
 * N by N 
 * 1<=N<=50
 * 
 * #은 문
 * .은 빛이 지나가는 곳
 * *은 빛이 지나갈 수 없는 곳
 * !은 거울을 설치 할 수 있는 위치
 * 
 * 다시
 * 
 * 재시도 
 * -> 진행방향으로 가는 도중에 거울을 만나면 90도 양방향으로 꺾인 상태의 진행방향을 새로 넣어준다. 
 * 
9
.!*......
..!.!*!.!
#.!*.*.*.
!!.*!.!*.
.*.......
.#......!
.........
.........
!.......!
 */
public class 거울설치 {
	static int N;
	static int[] dr = {-1,0,1,0};
	static int[] dc = {0,1,0,-1};//상우하좌
	static int entranceRow,entranceCol;
	static boolean entranceCheck;
	static int exitRow,exitCol;
	static char[][] house;
	static boolean[][][] visit;
	static Queue<int[]> q;
	static int mirror=987654321;
	static boolean installMirror;
	static char[][] visit2;//거울개수맵
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		N = sc.nextInt();
		house = new char[N][N];
		visit = new boolean[N][N][4];
		q = new LinkedList<int[]>();
		visit2 = new char[N][N];
		sc.nextLine();
		for(int row=0;row<N;row++) {
			String read = sc.nextLine();
			house[row] = read.toCharArray();
			for(int col=0;col<N;col++) {
				if(house[row][col]=='#' && entranceCheck==false) {
					entranceRow = row;
					entranceCol = col;
					entranceCheck = true;
					break;
				}else if(house[row][col]=='#' && entranceCheck) {
					exitRow = row;
					exitCol = col;				
					break;
				}
			}
		}
		for(int row=0;row<N;row++) {
			for(int col=0;col<N;col++) {
				visit2[row][col] = house[row][col];
			}
		}
		setStartDirection();
		BFS();
		System.out.println(mirror);
	}

	private static void BFS() {
		while(!q.isEmpty()){
			int size = q.size();
			System.out.println("이동전");
			view();
			for(int i=0;i<size;i++) {
				int[] curRCD = q.poll();
				int mirrorCnt = curRCD[3];
				int dir = curRCD[2];
				int nr = curRCD[0]+dr[dir];
				int nc = curRCD[1]+dc[dir];
				if(nr == exitRow && nc== exitCol) {
					System.out.println("사용된 거울개수");
					System.out.println(mirrorCnt);
					mirror = Math.min(mirror,mirrorCnt);
				}
				else if(rangeCheck(nr, nc)){//영역 만족 
					
					if(visit[nr][nc][dir]==false && house[nr][nc]!='*'){//가보지 않은 케이스
						switch (house[nr][nc]) {
						case '.'://맨땅이면 직진
							goStraight(nr,nc,dir,mirrorCnt);
							break;
						case '!'://거울이면 반사처리 또는 그냥 직진
							goStraight(nr,nc,dir,mirrorCnt);
							reflection(nr,nc,dir,mirrorCnt);
							break;
						}
					}
					else if(visit[nr][nc][dir]==true && visit2[nr][nc]!=mirrorCnt) {
						switch (house[nr][nc]) {
						case '.'://맨땅이면 직진
							goStraight(nr,nc,dir,mirrorCnt);
							break;
						case '!'://거울이면 반사처리 또는 그냥 직진
							goStraight(nr,nc,dir,mirrorCnt);
							reflection(nr,nc,dir,mirrorCnt);
							break;
						}
					}
				}
			}
			System.out.println("이동후");
			view();
		}
	}

	private static void view() {
		for(int row=0;row<N;row++) {
			for(int col=0;col<N;col++) {
				System.out.print(visit2[row][col]);
			}
			System.out.println();
		}
		System.out.println();
	}

	private static void setStartDirection() {
		for(int dir=0;dir<4;dir++) {
			int nr = entranceRow+dr[dir];
			int nc = entranceCol+dc[dir];
			if(rangeCheck(nr,nc)) {
				if(house[nr][nc]=='.') goStraight(nr, nc, dir,0);
				if(house[nr][nc]=='!') {
					goStraight(nr,nc,dir,0);
					reflection(nr,nc,dir,0);
				}
			}
		}
	}
	private static void goStraight(int nr, int nc, int dir, int mirror) {
		q.add(new int[] {nr,nc,dir,mirror});
		visit[nr][nc][dir] = true;
		visit2[nr][nc] = Integer.toString(mirror).charAt(0);
	}

	private static void reflection(int nr, int nc, int dir, int mirror) {
		visit2[nr][nc] = Integer.toString(mirror).charAt(0);
		switch (dir) {
		case 0://윗방향 빛
			q.add(new int[] {nr,nc,1,mirror+1});
			visit[nr][nc][1] = true;
			q.add(new int[] {nr,nc,3,mirror+1});
			visit[nr][nc][3] = true;
			break;
		case 1://오른쪽방향 빛
			q.add(new int[] {nr,nc,0,mirror+1});
			visit[nr][nc][0] = true;
			q.add(new int[] {nr,nc,2,mirror+1});
			visit[nr][nc][2] = true;
			break;
		case 2://아래방향 빛
			q.add(new int[] {nr,nc,1,mirror+1});
			visit[nr][nc][1] = true;
			q.add(new int[] {nr,nc,3,mirror+1});
			visit[nr][nc][3] = true;
			break;
		case 3://왼쪽방향 빛 
			q.add(new int[] {nr,nc,0,mirror+1});
			visit[nr][nc][0] = true;
			q.add(new int[] {nr,nc,2,mirror+1});
			visit[nr][nc][2] = true;
			break;
		}
	}


	private static boolean rangeCheck(int nr, int nc) {
		if(nr>=0 && nr<N && nc>=0 && nc<N) return true;
		return false;
	}
}
