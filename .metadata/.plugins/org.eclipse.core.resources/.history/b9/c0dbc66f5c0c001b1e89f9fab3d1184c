package SamsungDS;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class 차량정비소 {
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static StringTokenizer st;
	static int N,M,K,A,B;
	static Receipt[] receipts;
	static Repair[] repairs;
	static Customer[] customers;
	static PriorityQueue<Customer> receiptWatingQueue;
	static PriorityQueue<Customer> repairWatingQueue;
	static int answer;
	static class Receipt{
		int id;
		int needWorkTime;
		int remainWorkTime;
		int customerId;
		boolean working;
		public Receipt(int id, int needWorkTime, int remainWorkTime, int customerId, boolean working) {
			this.id = id;
			this.needWorkTime = needWorkTime;
			this.remainWorkTime = remainWorkTime;
			this.customerId = customerId;
			this.working = working;
		}
	}
	static class Repair{
		int id;
		int needWorkTime;
		int remainWorkTime;
		int customerId;
		boolean working;
		public Repair(int id, int needWorkTime, int remainWorkTime, int customerId, boolean working) {
			this.id = id;
			this.needWorkTime = needWorkTime;
			this.remainWorkTime = remainWorkTime;
			this.customerId = customerId;
			this.working = working;
		}
		
	}
	static class Customer{
		int id;
		int arrivalTime;
		int receiptId;
		int repairId;
		int repairArrivalTime;
		public Customer(int id, int arrivalTime, int receiptId, int repairId, int repairArrivalTime) {
			this.id = id;
			this.arrivalTime = arrivalTime;
			this.receiptId = receiptId;
			this.repairId = repairId;
			this.repairArrivalTime = repairArrivalTime;
		}
	}
	public static void main(String[] args) throws NumberFormatException, IOException {
		int T = Integer.parseInt(br.readLine());
		for(int testcase=1;testcase<=T;testcase++) {
			setData();
			getAnswer();
		}
	}
	private static void getAnswer() {
		int time=0;
		while(!receiptWatingQueue.isEmpty() && !repairWatingQueue.isEmpty()){//두 웨이팅 큐 다 끝날때 까지
			/*
			 * 접수처리
			 */
			checkReceiptDone(time);
			
			while(!receiptWatingQueue.isEmpty()) { //접수줄이 있다면
				if(possibleAssignReceipt()) {
					//접수 가능하면
					assignReceipt();
				}
				else break;//접수 불가능,할당 없이 끝냄
			}
		
			/*
			 * 정비처리
			 */
			while(!repairWatingQueue.isEmpty()) { //접수줄이 있다면
				if(possibleAssignReceipt()) {
					//접수 가능하면
					assignReceipt();
				}
				else break;//접수 불가능,할당 없이 끝냄
			}
	
			workReceipts();
			workRepairs();
			
			time++;
		}
	}
	private static void workRepairs() {
		// TODO Auto-generated method stub
		
	}
	private static void checkReceiptDone(int time) {
		for(int i=1;i<=N;i++) {
			if(receipts[i].working){
				if(receipts[i].remainWorkTime==0) {
					receipts[i].working=false;
					int assignCustomerId = receipts[i].customerId;
					customers[assignCustomerId].repairArrivalTime = time;
					repairWatingQueue.add(customers[assignCustomerId]);//정비줄로 보냄
					receipts[i].customerId=0;
					
				}
			}
		}
	}
	private static void workReceipts() {
		for(int receiptId=1;receiptId<=N;receiptId++) {
			if(receipts[receiptId].working) {
				receipts[receiptId].remainWorkTime--;
			}
		}
	}
	private static void assignReceipt() { //접수시키기
		int assignReceiptId = 0; //접수될 접수대
		for(int receiptId=1;receiptId<=N;receiptId++) {
			if(receipts[receiptId].working==false) {
				assignReceiptId = receiptId;
				break;
			}
		}
		Customer currentCustomer = receiptWatingQueue.poll();
		receipts[assignReceiptId].customerId = currentCustomer.id;
		receipts[assignReceiptId].working = true;
		receipts[assignReceiptId].remainWorkTime = receipts[assignReceiptId].needWorkTime;
		currentCustomer.receiptId = assignReceiptId;
	}
	private static boolean possibleAssignReceipt(){
		for(int i=1;i<=N;i++) if(receipts[i].working==false) return true;	
		return false;
	}
	private static void setData() throws IOException {
		answer = 0;
		st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken()); //접수 창구 수
		M = Integer.parseInt(st.nextToken()); //정비 창구 수
		K = Integer.parseInt(st.nextToken()); //방문 고객 수
		A = Integer.parseInt(st.nextToken()); //지갑을 잃어버린 고객이 이용한 접수 창구 번호
		B = Integer.parseInt(st.nextToken()); //지갑을 잃어버린 고객이 이용한 정비 창구 번호 
		receipts = new Receipt[N+1];
		repairs = new Repair[M+1];
		st = new StringTokenizer(br.readLine());
		for(int i=1;i<=N;i++) {
			int needWorkTime = Integer.parseInt(st.nextToken());
			receipts[i] = new Receipt(i, needWorkTime, 0, 0, false);
		}
		st = new StringTokenizer(br.readLine());
		for(int i=1;i<=M;i++) {
			int needWorkTime = Integer.parseInt(st.nextToken());
			repairs[i] = new Repair(i, needWorkTime, 0, 0, false);
		}
		
		receiptWatingQueue = new PriorityQueue<Customer>(new Comparator<Customer>() {
			@Override
			public int compare(Customer o1, Customer o2) {
				if(o1.arrivalTime==o2.arrivalTime) return Integer.compare(o1.id,o2.id);
				return Integer.compare(o1.arrivalTime,o2.arrivalTime);
			}
		});
	
		
		repairWatingQueue = new PriorityQueue<Customer>();
		
		
		customers = new Customer[K+1];
		st = new StringTokenizer(br.readLine());
		for(int i=1;i<=K;i++) {
			int arriavalTime = Integer.parseInt(st.nextToken());
			customers[i] = new Customer(i, arriavalTime, 0, 0);
			repairWatingQueue.add(customers[i]);
		}
	}
}
