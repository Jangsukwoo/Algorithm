package CodingTest;

import java.io.IOException;
import java.util.LinkedList;
import java.util.Queue;

public class 플그인턴3 {
	static int N,M;
	static Queue<Integer>[] graph;//큐배열
	static Queue<Integer> q = new LinkedList<>();
	static int[] indegree;
	public static void main(String[] args) {

	}
	private static void topological(){
		while(!q.isEmpty()){
			int zeroIndegree = q.poll();
			 for (int node : graph[zeroIndegree]) {
	                indegree[node]--;
	                if(indegree[node]==0){
	                    q.add(node);
	                    System.out.print(node+" ");
	                }
	            }
		}
	}
	public int[] solution(int total_sp, int[][] skills) {
		for(int row=0;row<skills.length;row++) {
			
		}
		int[] answer = {};
		graph = new LinkedList[N+1];
		indegree= new int[N+1];
		for(int i=1;i<=N;i++) graph[i] = new LinkedList<>();//간선리스트
		
		for(int i=0;i<M;i++) {
			int from = Integer.parseInt(st.nextToken());
			int to = Integer.parseInt(st.nextToken());
			graph[from].add(to);//Edge List 
			indegree[to]++;//Indegree Count
		}
		
		for(int i=1;i<=N;i++) {
			if(indegree[i]==0){//진입 차수가 0인 정점들만
				q.offer(i);
				bw.write(i+" ");
			}
		}
		return answer;
	}
}
