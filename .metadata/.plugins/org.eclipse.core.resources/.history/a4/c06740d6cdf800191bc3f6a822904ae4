package Math;
/*
 * Euclid's Algorithm
 * 유클리드 호제법
 * 
 * 유클리드 호제법은
 * 
 * 두 정수의 최대공약수를 구하는 공식,알고리즘이다.
 * A,B 두 정수가 있을 때 
 * 두 수가 서로 상대방의 수를 나누고, 나머지값을 이용하면
 * 결국 최대 공약수가 나온다는 이론이다.
 * 
 * 
 * 
 * http://staff.www.ltu.se/~larserik/applmath/chap10en/part3.html
 */
import java.util.Scanner;

public class 최대공약수와최소공배수 {
	static int gcd;//최대공약수 (The Greatest Common Denominator = GCD)
	static int lcm;//최소공배수 (The Least Common Multiple = LCM)
	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);
		
		int A = sc.nextInt(); 
		int B = sc.nextInt();
		
		/*
		 * A와 B의 최대공약수
		 * 유클리드 호제법으로 구하기
		 * A와 B의 최대공약수를 (A,B)라고 표현한다.
		 * A를 B로 나눈 나머지 R에 대해서 유클리드 호제법에 의하면 
		 * (A,B) = (B,R)가 성립한다.
		 * 즉,
		 * A가 1071이고 B가 1029라면
		 * (1071,1029)=(1029,42)=(42,21)=(21,0)=21 이다.
		 * 이를 코드로 구현하면 다음과 같다.
		 */
		 gcd = getGCD(A,B);//gcd는 최대공약수	 
		 /*
		  * 최소공배수 X 최대공약수 = A * B 이다.
		  * 이를 이용하면
		  * 최소공배수 = A*B/gcd가 된다.
		  * 위에서 구한 gcd값을 이용하면 다음과 같다.
		  */
		 lcm = A*B/gcd; //lcm는 최소공배수
		 System.out.println(gcd);
		 System.out.println(lcm);
		 
	}
	private static int getGCD(int A, int B){
		while(B!=0) {
			//(A,B) = (B,R)
			int R = A%B;
			A = B;
			B = R; 
		}
		return A;
	}
}
