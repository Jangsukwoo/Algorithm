package SamsungDS;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class 엘리베이터 {
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static StringTokenizer st;
	static int N,M;
	static Elevator[] elevators;
	static int A,B;
	static ArrayList<Integer>[] elevatorList;
	static Queue<int[]> q = new LinkedList<int[]>();
	static class Elevator{
		int startFloor;
		int stopPeriod;
		public Elevator(int startFloor, int stopPeriod) {
			this.startFloor = startFloor;
			this.stopPeriod = stopPeriod;
		}
	}
	public static void main(String[] args) throws IOException {
		setData();
		//bfs();
	}
	private static void bfs() {
	/*
	 * 최소 두번 엘리베이터를 타야함	
	 */
		int tranlation=0;
		while(!q.isEmpty()) {
			int size = q.size();
			for(int i=0;i<size;i++) {
				int[] current = q.poll();
				int currentFloor = current[0];
				int currentElevatorNumber = currentFloor[1];
			}
		}
	}
	private static void setData() throws IOException {
		st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		elevators = new Elevator[M+1];
		elevatorList = new ArrayList[N+1];
		for(int floor=1;floor<=N;floor++) elevatorList[floor] = new ArrayList<Integer>();
		for(int i=1;i<=M;i++) {
			st = new StringTokenizer(br.readLine());
			int start = Integer.parseInt(st.nextToken());
			int period = Integer.parseInt(st.nextToken());
			elevators[i] =new Elevator(start, period);
			for(int floor=start;floor<=N;floor+=period) elevatorList[floor].add(i);
		}
		
		st = new StringTokenizer(br.readLine());
		A = Integer.parseInt(st.nextToken());
		B = Integer.parseInt(st.nextToken());
		for(int i=0;i<elevatorList[A].size();i++) {
			System.out.println(elevatorList[A].get(i));
			q.add(new int[] {A,elevatorList[A].get(i)});
		}
	}
}
