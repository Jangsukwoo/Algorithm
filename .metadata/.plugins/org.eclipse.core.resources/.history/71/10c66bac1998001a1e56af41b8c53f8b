package 구현;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.StringTokenizer;

/*
 * 제일 크게 지나갈 수 있는 다리만 지나가야함
 * 가능한 모든 중량에서 중량을 하나 선택하고
 * bfs로 탐색이 가능한지 검증
 * 중량의 범위는 1부터 10억이니 이분탐색으로 정한다.
 */
public class 중량제한 {
	static int N,M;
	static int maxWeight;
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static StringTokenizer st;
	static boolean[] visit;
	static ArrayList<int[]>[] adjList;
	static int start,end;
	public static void main(String[] args) throws IOException {
		setData();
	}
	private static void setData() throws IOException {
		st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		adjList = new ArrayList[N+1];
		for(int island=1;island<=N;++island) adjList[island] = new ArrayList<int[]>();
		for(int i=0,from,to,cost;i<M;i++) {
			st = new StringTokenizer(br.readLine());
			from = Integer.parseInt(st.nextToken());
			to = Integer.parseInt(st.nextToken());
			cost = Integer.parseInt(st.nextToken());
			adjList[from].add(new int[] {to,cost});
			adjList[to].add(new int[] {from,cost});
		}
	}
}
