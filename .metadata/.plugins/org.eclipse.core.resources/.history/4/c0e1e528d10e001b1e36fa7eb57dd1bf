package SamsungDS;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;


/*
 * 18:00
 */
public class 욕심쟁이판다 {
	static int[][] memo; //dp 배열 
	static int[][] forest;
	static int[] dr = {-1,0,1,0};
	static int[] dc = {0,1,0,-1};
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static StringTokenizer st;
	static int N;
	static int answer;
	public static void main(String[] args) throws NumberFormatException, IOException {
		setData();
		dfsAll();
		getAnswer();
	}
	private static void getAnswer() {
		for(int row=0;row<N;row++) {
			for(int col=0;col<N;col++) {
				answer = Math.max(memo[row][col],answer);
			}
		}
		System.out.println(answer);
	}
	private static void dfsAll() {
		for(int row=0;row<N;row++) {
			for(int col=0;col<N;col++) {
				if(memo[row][col]==0) dfs(row,col,1);
				view();
			}
		}
	}
	private static void view() {
		for(int row=0;row<N;row++) {
			for(int col=0;col<N;col++) {
				System.out.print(memo[row][col]+" ");
			}
			System.out.println();
		}
		System.out.println();
	}
	private static int dfs(int cr, int cc, int day, int depth) {
		memo[cr][cc] = day;
		
		int maxTree = 0;
		boolean end = true;
		for(int dir=0;dir<4;dir++) {
			int nr = cr+dr[dir];
			int nc = cc+dc[dir];
			if(rangeCheck(nr,nc)) {
				int currentTree = forest[cr][cc];
				int nextTree = forest[nr][nc];
				if(memo[nr][nc]>0) {
					maxTree = Math.max(memo[nr][nc],maxTree);
					continue;
				}
				else if(memo[nr][nc]==0 && nextTree>currentTree) {
					end = false;
					dfs(nr,nc,day+1);
				}
			}
		}
		
		if(maxTree>0) {
			memo[cr][cc]+=maxTree;
		}
	}
	private static boolean rangeCheck(int nr, int nc) {
		if(nr>=0 && nr<N && nc>=0 && nc<N) return true;
		return false;
	}
	private static void setData() throws NumberFormatException, IOException {
		N = Integer.parseInt(br.readLine());
		forest = new int[N][N];
		memo = new int[N][N];
		for(int row=0;row<N;row++) {
			st = new StringTokenizer(br.readLine());
			for(int col=0;col<N;col++) {
				forest[row][col] = Integer.parseInt(st.nextToken());
			}
		}
	}
}
