package 공채대비;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class 모노미노도미노 {
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static StringTokenizer st;
	static int N;
	static int[] dr = {0,1,0,-1};
	static int[] dc = {1,0,-1,0}; //우,하,좌,상
	static int[][] blocks;
	static int score;
	static int tile;
	static boolean[][] map;
	public static void main(String[] args) throws NumberFormatException, IOException {
		setData();
		simulation();
	}
	private static void simulation(){
		for(int turn=0;turn<N;turn++) {
			//먼저 블록 떨구기
			switch (blocks[turn][0]) {
			case 1:
				right1(blocks[turn][1],blocks[turn][2]);
				down1(blocks[turn][1],blocks[turn][2]);
				break;
			case 2:
				right2(blocks[turn][1],blocks[turn][2]);
				down2(blocks[turn][1],blocks[turn][2]);
				break;
			case 3: 
				right3(blocks[turn][1],blocks[turn][2]);
				down3(blocks[turn][1],blocks[turn][2]);
				break;
			}//블록 떨어뜨리기 끝
			//getScoreAndGravity
			getScoreAndGravity();
			//lineRemove
			lineRemove();
		}
	}	


	private static void right1(int cr, int cc) {
		//1,우
		int nr = cr;
		int nc = cc;
		while(true) {
			if(!rangeCheck(nr,nc) || map[nr][nc]) break;
			nr+=dr[0];
			nc+=dc[0];
		}
		map[nr-dr[0]][nc-dc[0]] = true;
	}

	private static void down1(int cr, int cc) {
		//1,하
		int nr = cr;
		int nc = cc;
		while(true) {
			if(!rangeCheck(nr,nc) || map[nr][nc]) break;
			nr+=dr[1];
			nc+=dc[1];
		}
		map[nr-dr[1]][nc-dc[1]] = true;
	}
	private static void right2(int cr, int cc) {
		//2,우
		int nr = cr;
		int nc = cc+1;
		while(true) {
			if(!rangeCheck(nr,nc) || map[nr][nc]) break;
			nr+=dr[0];
			nc+=dc[0];
		}
		map[nr-dr[0]][nc-dc[0]] = true;
		map[nr-dr[0]][nc-(dc[0]*2)] = true;
	}
	private static void down2(int cr, int cc) {
		//2,하
		int nr = cr;
		int nc = cc;
		int nr2 = cr;
		int nc2 = cc+1;
		while(true) {
			if(!rangeCheck(nr,nc) || map[nr][nc] ||!rangeCheck(nr2, nc2) || map[nr2][nc2]) break;
			nr+=dr[1];
			nc+=dc[1];
			nr2+=dr[1];
			nc2+=dc[1];
		}
		map[nr-dr[1]][nc-dc[1]] = true;
		map[nr2-dr[1]][nc2-dc[1]] = true;
	}
	private static void right3(int cr, int cc) {
		//3,우
		int nr = cr;
		int nc = cc;
		int nr2 = cr+1;
		int nc2 = cc;
		while(true) {
			if(!rangeCheck(nr,nc) || map[nr][nc] ||!rangeCheck(nr2, nc2) || map[nr2][nc2]) break;
			nr+=dr[0];
			nc+=dc[0];
			nr2+=dr[0];
			nc2+=dc[0];
		}
		map[nr-dr[0]][nc-dc[0]] = true;
		map[nr2-dr[0]][nc2-dc[0]] = true;
	}
	private static void down3(int cr, int cc) {
		//3,하
		int nr = cr+1;
		int nc = cc;
		while(true) {
			if(!rangeCheck(nr,nc) || map[nr][nc]) break;
			nr+=dr[1];
			nc+=dc[1];
		}
		map[nr-dr[1]][nc-dc[1]] = true;
		map[nr-(dr[1]*2)][nc-dc[1]] = true;
	}
	
	
	private static void getScoreAndGravity() {
		//우 
		int colIdx=0
		boolean flag=0;
		for(int col=4;col<=9;col++) {
			for(int row=0;row<3;row++) {
				
			}
		}
	}
	private static void lineRemove() {
		
	}
	
	

	private static boolean rangeCheck(int nr, int nc) {
		if(nr>=0 && nr<10 && nc>=0 && nc<10) return true;
		return false;
	}
	private static void setData() throws NumberFormatException, IOException {
		N = Integer.parseInt(br.readLine());
		blocks = new int[N][3];
		map = new boolean[10][10];
		st = new StringTokenizer(br.readLine());
		for(int i=0;i<N;i++) {
			st = new StringTokenizer(br.readLine());
			blocks[i][0] = Integer.parseInt(st.nextToken());
			blocks[i][1] = Integer.parseInt(st.nextToken());
			blocks[i][2] = Integer.parseInt(st.nextToken());
		}
	}
}
