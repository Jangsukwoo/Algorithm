package CodingStudyHW;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

/*
 * 집에는 문이 두개 있음
 * 한쪽 문에서 다른 쪽 문을 볼 수 있도록 거울을 설치
 * 
 * N by N 
 * 1<=N<=50
 * 
 * #은 문
 * .은 빛이 지나가는 곳
 * *은 빛이 지나갈 수 없는 곳
 * !은 거울을 설치 할 수 있는 위치
 * 
 * 다시
 * 
 * 재시도 
 * -> 진행방향으로 가는 도중에 거울을 만나면 90도 양방향으로 꺾인 상태의 진행방향을 새로 넣어준다. 
 */
public class 거울설치 {
	static int N;
	static int[] dr = {-1,0,1,0};
	static int[] dc = {0,1,0,-1};//상우하좌
	static int entranceRow,entranceCol;
	static boolean entranceCheck;
	static int exitRow,exitCol;
	static char[][] house;
	static boolean[][][] visit;
	static Queue<int[]> q;
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		N = sc.nextInt();
		house = new char[N][N];
		visit = new boolean[N][N][4];
		q = new LinkedList<int[]>();
		sc.nextLine();
		for(int row=0;row<N;row++) {
			String read = sc.nextLine();
			house[row] = read.toCharArray();
			for(int col=0;col<N;col++) {
				if(house[row][col]=='#' && entranceCheck==false) {
					entranceRow = row;
					entranceCol = col;
					for(int dir=0;dir<4;dir++) {
						int nr = row+dr[dir];
						int nc = col+dc[dir];
						if(rangeCheck(nr,nc)) {
							
						}
					}
					q.add(new int[] {row,col});
					break;
				}else if(house[row][col]=='#' && entranceCheck) {
					exitRow = row;
					exitCol = col;
					break;
				}
			}
		}
		BFS();
	}
	private static boolean rangeCheck(int nr, int nc) {
		if(nr>=0 && nr<N && nc>=0 && nc<N) return true;
		return false;
	}
	private static void BFS() {
		while(!q.isEmpty()){
			
		}
	}	
}
