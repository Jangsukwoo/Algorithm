package CodingTest;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class KAKAOSolution4 {
	static int V,E;
	static int startVertax;
	static ArrayList<int[]>[] adjList;//인접리스트
	static int[][] adjMatrix;
	static PriorityQueue<int[]> pq;
	static int[] dist;
	static int[] from;
	static boolean[] visit;
	static int INF = 987654321;
	
	
	public static void main(String[] args) {
		solution(6,4,6,2, new int[][] {{4, 1, 10}, {3, 5, 24}, {5, 6, 2}, {3, 1, 41}, {5, 1, 24}, {4, 6, 50}, {2, 4, 66}, {2, 3, 22}, {1, 6, 25}});
	}
	public static int solution(int n, int s, int a, int b, int[][] fares){
		int answer = 0;
		initailization(n, fares);
		dijkstra(s,a,n);
		System.out.println(dist[a]);
		return answer;
	}
	private static void dijkstra(int startNode, int end, int n) {
		dist[startNode] = 0;
		pq.add(new int[] {startNode,0});
		System.out.println(startNode);
		while(!pq.isEmpty()){
			
			int[] currentInfomation = pq.poll();
			
			int currentNodeNumber = currentInfomation[0];
			int currentCost = currentInfomation[1];
			
			for(int i=0;i<adjList[currentNodeNumber].size();i++){
				
				int[] nextInformation = adjList[currentNodeNumber].get(i); 
				
				int nextNodeNumber = nextInformation[0];
				int nextCost = nextInformation[1];
				
				if(dist[nextNodeNumber]>(currentCost+nextCost)){
					dist[nextNodeNumber] = currentCost+nextCost;
					pq.add(new int[] {nextNodeNumber,(currentCost+nextCost)});
					from[nextNodeNumber] = currentNodeNumber;
				}
			}
		}
			System.out.println(Arrays.toString(from));
		
//		int mv = INF;
//		int mi = -1;
//		
//		while(true) {
//			for(int i=startNode;i<=n;i++) {
//				if(!visit[i] && dist[i]<mv) {
//					mi = i;
//					mv = dist[i];
//				}
//			}	
//			if(mi==-1) break;
//			visit[mi] = true;
//			for(int i=startNode;i<=n;i++) {
//				if(adjMatrix[mi][i]>0 && (dist[i]>dist[mi]+adjMatrix[mi][i])) {
//					dist[i] = dist[mi]+adjMatrix[mi][i];
//					from[i] = mi;
//				}
//			}
//		}
//		
//	    for(int i = startNode; i <=n; i++) {
//	        if(!visit[i]) continue;
//	        ArrayList<Integer> path = new ArrayList<Integer>();
//	        for(int j = i; j>0; j = from[j]) {
//	        	path.add(j);
//	        }
//	        System.out.println(path.toString());
//	    }
//	    
		

	}
	private static void initailization(int n,int[][] fares) {
		dist = new int[n+1];
		from = new int[n+1];
		visit = new boolean[n+1];
		adjList = new ArrayList[n+1];
		adjMatrix = new int[n+1][n+1];
		pq = new PriorityQueue<int[]>(new Comparator<int[]>() {
			@Override
			public int compare(int[] o1, int[] o2) {
				// TODO Auto-generated method stub
				return Integer.compare(o1[1],o2[1]);
			}
		});
		for(int i=1;i<=n;i++) {
			adjList[i] = new ArrayList<int[]>();
			dist[i] = INF; //초기화
			from[i] = -1;
		}
		for(int i=0,from,to,cost;i<fares.length;i++) {
			from = fares[i][0];
			to = fares[i][1];
			cost = fares[i][2];
			adjMatrix[from][to]=cost;
			adjList[from].add(new int[] {to,cost});
		}
	}
}
