package AlgoSpot;

import java.util.Scanner;
/*
1
8 10 
########## 
#........# 
#........# 
#........# 
#........# 
#........# 
#........# 
########## 
 */
public class 게임판덮기 {
	
	static char[][] gameMap;
	static int rowSize,colSize;
	static int possibleCase;
	static int[] dr = {-1,0,1,0};
	static int[] dc = {0,1,0,-1};//상우하좌
	
	
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int T = sc.nextInt();
		for(int testcase=1;testcase<=T;testcase++){
			possibleCase=0;
			rowSize = sc.nextInt();
			colSize = sc.nextInt();
			gameMap = new char[rowSize][colSize];
			sc.nextLine();
			
			for(int r=0;r<rowSize;r++) {
				String temp = sc.nextLine();
				gameMap[r] = temp.toCharArray();
			}//입력
			
			dfs(0,0);
			
			System.out.println(possibleCase);
		}
	}
	
	
	
	private static void dfs(int curRow,int curCol) {
	
		view();
		
		if(curRow==rowSize) {//끝까지 다봄

			for(int row=0;row<rowSize;row++) {
				for(int col=0;col<colSize;col++) {
					if(gameMap[row][col]=='.') return;
				}
			}
			
			//위에서 안끝났으면
			possibleCase++;
			return;
		}
		
		for(int row=curRow;row<rowSize;row++) {
			for(int col=curCol;col<colSize;col++) {
				
				if(gameMap[row][col]=='.'){//맨땅이면
					
					int nc=0;
					for(int blockNumber=1;blockNumber<=4;blockNumber++){//하나씩 시도해본다.
						
						if(put(blockNumber,row,col)){//두는데 성공했으면
							
							switch (blockNumber) {
							
							case 1://상좌
								
								nc = curCol+dc[1];	
								
								gameMap[row][col]='#';
								gameMap[row+dr[0]][col+dc[0]]='#';
								gameMap[row+dr[3]][col+dc[3]]='#';
								
								if(!colcheck(nc)) dfs(row+1,0);
								else dfs(row,nc);
								
								gameMap[row][col]='.';
								gameMap[row+dr[0]][col+dc[0]]='.';
								gameMap[row+dr[3]][col+dc[3]]='.';
								break;
							case 2://상우
								
								nc = curCol+dc[1]+dc[1];				
								gameMap[row][col]='#';
								gameMap[row+dr[0]][col+dc[0]]='#';
								gameMap[row+dr[1]][col+dc[1]]='#';
								
								if(!colcheck(nc)) dfs(row+1,0);
								else dfs(row,nc);
								
							
								gameMap[row][col]='.';
								gameMap[row+dr[0]][col+dc[0]]='.';
								gameMap[row+dr[1]][col+dc[1]]='.';
								break;
							case 3://하좌
								
								nc = curCol+dc[1];				
								gameMap[row][col]='#';
								gameMap[row+dr[2]][col+dc[2]]='#';
								gameMap[row+dr[3]][col+dc[3]]='#';
								if(!colcheck(nc)) dfs(row+1,0);
								else dfs(row,nc);
								gameMap[row][col]='.';
								gameMap[row+dr[2]][col+dc[2]]='.';
								gameMap[row+dr[3]][col+dc[3]]='.';
								break;
							case 4://하우
								
								nc = curCol+dc[1]+dc[1];				
								gameMap[row][col]='#';
								gameMap[row+dr[2]][col+dc[2]]='#';
								gameMap[row+dr[1]][col+dc[1]]='#';
								if(!colcheck(nc)) dfs(row+1,0);
								else dfs(row,nc);
								gameMap[row][col]='.';
								gameMap[row+dr[2]][col+dc[2]]='.';
								gameMap[row+dr[1]][col+dc[1]]='.';
								break;
							}
							
						}
					}
				}
			}
		
		}
		
	}






	
	private static boolean colcheck(int nr) {
		if(nr>=0 && nr<colSize) return true;
		return false;
	}



	private static boolean put(int blockNumber,int row,int col) {
		switch(blockNumber) {
		case 1: //상좌
			if(Check(row+dr[0],col+dc[0]) && Check(row+dr[3],col+dc[3])) return true;
			else return false;
		case 2://상우
			if(Check(row+dr[0],col+dc[0]) && Check(row+dr[1],col+dc[1])) return true;
			else return false;
		case 3://하좌
			if(Check(row+dr[2],col+dc[2]) && Check(row+dr[3],col+dc[3])) return true;
			else return false;
		case 4://하우
			if(Check(row+dr[2],col+dc[2]) && Check(row+dr[1],col+dc[1])) return true;
			else return false;	
		}
		return false;
	}



	private static boolean Check(int row, int col) {
		if(row>=0 && row<rowSize && col>=0 && col<colSize) {//영역 만족하고
			if(gameMap[row][col]!='#') return true;//#이 아니면 true
			else return false;//#이면 false;
		}
		return false;//영역 만족 못하면 false
	}



	private static void view() {
		for(int row=0;row<rowSize;row++){
			for(int col=0;col<colSize;col++) {
				System.out.print(gameMap[row][col]);
			}
			System.out.println();
		}
		System.out.println();
	}
}
