package 순열조합;

import java.util.Scanner;

/*
 * 3:44~
 * 25X25 정육면체
 * 각 판을 쌓는 순서는 임의로 정할 수 있고
 * 각 판은 시계방향으로 회전할 수 있다.
 * 판을 쌓는 경우의수 5! = 120
 * 각 판 시계방향에 대해 4개씩의 경우의수가 존재하고
 * 각 층별로 가능한 경우의 수는 4^5
 * 120 x 4^2 = 122280
 * 최단경로를 구하는것이므로 각 판에 대해서 bfs 수행
 * 적절한 미로 정육면체를 먼저 만드는게 우선
 * boolean 4차원 맵을 생각했다.
 * 첫번째 인덱스는 층
 * 두번째 인덱스는 각 회전 경우의 수 
 * 세번재,네번째 인덱스는 row,col
 */
public class Maaaaaaaaze {
	static int[][][][] mazeCase = new int[5][4][5][5];//모든 가능한 판의 집합
	static int[] floor = new int[5];
	static boolean[] visit = new boolean[5];
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		for(int board =0;board<5;board++) {
			for(int row=0;row<5;row++)
				for(int col=0;col<5;col++) mazeCase[board][0][row][col] = sc.nextInt();
		}
		setRotationBoard();//모든 가능한 정육면체 세팅
		entireFloorDFS(0);//5!
	}
	private static void entireFloorDFS(int cnt) {
		if(cnt==5){
			return;
		}
		for(int i=0;i<5;i++){
			if(visit[i]==false) {
				visit[i] = true;
				floor[cnt] = i;
				entireFloorDFS(cnt+1);
			
			}
		}
	}
	private static void setRotationBoard() {
		for(int board=0;board<5;board++){//각 판에대해서
			for(int spin=1;spin<4;spin++){//시계방향 회전을 한다.
				rotate(board,spin);
			}
		}

	}
	private static void rotate(int board,int spin) {
		for(int idx=0;idx<2;idx++){
			for(int col=idx;col<(5-idx);col++){
				mazeCase[board][spin][col][4-idx] = mazeCase[board][spin-1][idx][col];//상변이 우변으로
				mazeCase[board][spin][col][idx] = mazeCase[board][spin-1][4-idx][col];//하변이 좌변으로
			}
			for(int row=idx;row<(5-idx);row++){
				mazeCase[board][spin][4-idx][4-row] = mazeCase[board][spin-1][row][4-idx];//우변이 하변으로
				mazeCase[board][spin][idx][4-row] = mazeCase[board][spin-1][row][idx];//좌변이 상변으로
			}
		}
		mazeCase[board][spin][2][2] = mazeCase[board][spin-1][2][2];
	}
	private static void view() {
		for(int spin=0;spin<4;spin++) {
			for(int row=0;row<5;row++) {
				for(int col=0;col<5;col++) {
					System.out.print(mazeCase[0][spin][row][col]);
				}
				System.out.println();
			}	
			System.out.println();
		}
	}
}
