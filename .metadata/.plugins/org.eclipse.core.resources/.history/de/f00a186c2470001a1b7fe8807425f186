package CodingStudy;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.StringTokenizer;

/*
 * 세로선 개수 N, 가로선 개수 H
 * M개의 줄에는 가로선의 정보
 * i번 세로선의 결과가 i가 나오도록
 * 추가해야하는 가로선의 개수의 최소값
 * 
 * 다시
 */
public class 사다리조작 {
	static int N,M,H;//세로,가로,위치
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static StringTokenizer st;
	static int[][] ladder;
	static int min = Integer.MAX_VALUE;
	static boolean possible;
	public static void main(String[] args) throws IOException {
		setData();
		for(int i=0;i<=3;i++){//설치릉 안해보거나 최대 3개씩 설치해본다.
			if(possible==false) dfs(1,0,i);//row,col,depth,cnt
		}
		
		if(min==Integer.MAX_VALUE) System.out.println("-1");
		else System.out.println(min);
	}
	private static void dfs(int rowIdx, int depth, int cnt) {
		if(possible) return;//찾았으면 끝냄 
		if(depth==cnt){//설치했으니 확인
			System.out.println("돌");
			check(cnt);
			return;
		}
		for(int row=rowIdx;row<=H;row++) {
			for(int col=1;col<N;col++){
				if(ladder[row][col]!=1 && ladder[row][col-1]!=1 && ladder[row][col+1]!=1)
					ladder[row][col] = 1;
					dfs(row,depth+1,cnt);
					ladder[row][col] = 0;
			}
		}
	}
	private static void check(int cnt){
		//고른 사다리 확인
		for(int i=1;i<=N;i++){//i번째부터 N번째 까지
			int col=i;
			System.out.println("cnt값"+cnt);
			view();
			
			for(int row=1;row<=H;row++){
				if(ladder[row][col]==1) col+=1;
				else if(ladder[row][col]==0 && ladder[row][col-1]==1) col-=1;
			}
			if(col==i) {
				if(col==N) possible = true;
				System.out.println("발견");
				continue;
			}
			else return;
		}
	
		//위 포문에서 끝났으면
		if(possible) min = cnt;
		return;
	}
	private static void view() {
		for(int row=1;row<=H;row++) {
			for(int col=1;col<=N;col++) {
				System.out.print(ladder[row][col]);
			}
			System.out.println();
		}
		System.out.println();
	}
	private static void setData() throws IOException {
		st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		H = Integer.parseInt(st.nextToken());
		ladder = new int[H+1][N+1];
		for(int i=0,a,b;i<M;i++) {
			st = new StringTokenizer(br.readLine());
			a = Integer.parseInt(st.nextToken());
			b = Integer.parseInt(st.nextToken());
			ladder[a][b] = 1; //하나만 있어도 된다
		}
		//미리 사다리를 두지 말자 
//		for(int row=1;row<=H;row++) {
//			for(int col=2;col<=N;col++){
//				if(ladder[row][col]==0 && ladder[row][col-1]!=1 && ladder[row][col-2]!=1) {
//					ladderList.add(new int[] {row,col-1});
//				}
//			}
//		}
	}
}
