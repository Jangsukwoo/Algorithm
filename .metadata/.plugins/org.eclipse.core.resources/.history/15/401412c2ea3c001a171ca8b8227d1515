package SDS복습;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;

/*
 * 트리의 조건
 * 1. 들어오는 간선이 하나도 없는 단 하나의 루트가 존재
 * 2. 루트 노드를 제외한 모든 노드는 반드시 단 하나의 들어오는 간선이 존재
 * 3. 루트에서 다른노드로 가는 경로는 반드시 가능, 유일. 루트를 제외한 모든 노드에 성립해야함 
 */
public class 자료구조_트리인가 {
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
	static StringTokenizer st;
	static int testcase=1;
	static boolean caseEnd;
	static boolean end;
	public static void main(String[] args) throws IOException {
		while(true){
			caseEnd = false;
			while(true){
				String read = br.readLine();
				st = new StringTokenizer(read);
				for(int i=0,u,v;i<st.countTokens();i++) {
					u = Integer.parseInt(st.nextToken());
					v = Integer.parseInt(st.nextToken());
					if(u==0 && v==0) caseEnd=true;
				}	
				
				if(caseEnd) break;
			}
			String read = br.readLine();
		}
	}
}
