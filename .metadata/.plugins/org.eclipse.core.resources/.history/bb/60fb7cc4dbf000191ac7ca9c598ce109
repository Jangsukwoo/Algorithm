package Samsung;

import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
import java.util.Stack;

/*
 * 시작 754
 * 연산자 : +,/,*
 * 수 0~9
 * 연산자가 1~2개면 최대 1묶음 
 * 연산자가 3~4개면  최대 2묶음
 * 연산자가 5~6개면 최대 3묶음
 */
class DATA{
	long value;
	char op;
		public DATA(long value, char op){
			this.value = value;
			this.op = op;
		}
}
public class 상시_괄호추가하기 {
	static char[] formula;
	static int N;
	static long max = Long.MIN_VALUE;
	static int operatorSize;
	static int formulaSize;
	static int setSize;
	static int r;
	static boolean [] visit;
	static Stack<DATA> stack;
	static Queue<DATA> queue;
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		N = sc.nextInt();
		String readLine = sc.next();
		formula = readLine.toCharArray();
		formulaSize = formula.length;
		visit = new boolean[formulaSize];
		stack = new Stack<DATA>();
		operatorSize = formulaSize-1;
		if(operatorSize%2==0) setSize = operatorSize/2;
		else setSize = (operatorSize/2)+1;
		//입력 끝
		//1개 이상씩 묶어보는 처리
		stack = new Stack<DATA>();
		queue = new LinkedList<DATA>();
		for(int s=1;s<=setSize;s++){
			r = s;
			nCr(0,0);
		}
		System.out.println(max);

	}
	private static void nCr(int idx, int cnt) {
		if(idx>formulaSize) return;
		if(cnt==r){//다 묶음 
			makeStack();
			System.out.println(Arrays.toString(visit));
			System.out.println(stack.toString());
			calculate();
			return;
		}
		for(int i=idx;i<(formulaSize-2);i+=2){
			if(visit[i]==false){//방문 안해봄
				visit[i] = true;
				visit[i+1] = true;
				visit[i+2] = true;
				long a = Character.getNumericValue(formula[i]);
				long b = Character.getNumericValue(formula[i+2]);
				long answer = calculator(a,b,formula[i+1]);
				queue.add(new DATA(answer,'0'));
				nCr(i+2,cnt+1);
				visit[i] = false;
				visit[i+1] = false;
				visit[i+2] = false;
			}
		}
	}
	private static void calculate() {
		char operator = '0';
		boolean a = false;
		boolean b = false;
		long A = 0;
		long B = 0;
		while(!stack.isEmpty()){
			char data = stack.pop();
			if(data>='0' && data<='9') {
				//숫자고
				if(a==false){//a면
					A = Character.getNumericValue(data);
					a = true;
				}
				else if(b==false){
					B = Character.getNumericValue(data);
					A = calculator(A,B,operator);
					System.out.println(Character.to);
					stack.add((char)(A+'0'));
					a = false;
				}
			}
			else {
				operator = data;
			}
		}
		max = Math.max(A,max);
	}
	private static void makeStack() {
		
		int i= formulaSize-1;
		while(i>=0) {
			if(visit[i]==true){//먼저 계산해야하는 부분이면
				long num = queue.poll();
				stack.add((char)(num+'0'));
				i -=3;
			}else {
				stack.add(formula[i]);
				i--;
			}
			
		}
	}
	private static long calculator(long a, long b, char c) {
		long ans=0;
		switch (c) {
		case '+':
			ans = a+b;
			break;
		case '-':		
			ans = a-b;
			break;
		case '*':		
			ans = a*b;
			break;

		}
		return ans;
	}
}
