package CodingStudyHW;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.StringTokenizer;

/*
 * 15:22~ 
 * Dijkstra Algorithm
 * pq를 활용해서 시작점부터 하나씩 확인하면서 구한다.
 * 모든 거리는 처음에 INF이고 시작노드부터 시작.
 * 이때 인접리스트를 쓴다.
 * 
 */
public class 최소비용구하기 {
	static int N; //1<=N<=1000
	static int M;
	static int startNode;
	static int endNode;
	static int minDist;
	static int[] dist;
	static ArrayList<Integer> adjList; //인접리스트
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static StringTokenizer st;
	public static void main(String[] args) throws IOException {
		setData();
	}
	private static void setData() throws IOException {
		st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		st = new StringTokenizer(br.readLine());
		M = Integer.parseInt(st.nextToken());
		for(int i=0;i<M;i++) {
			st = new StringTokenizer(br.readLine());
			
		}
	}
}
