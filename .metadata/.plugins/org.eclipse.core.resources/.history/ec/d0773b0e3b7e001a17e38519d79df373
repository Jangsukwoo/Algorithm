package CodingStudy;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Set;
import java.util.StringTokenizer;

/*
 * 19:00 시작
 * 비밀번호는 4자리 소수이고
 * 1000 이상 10000미만의 소수들임
 * 두 소수 사이의 변환에 필요한 최소 회수 
 * 불가능하면 possible
 */
public class 소수경로 {
	static Set<Integer> primeSet = new HashSet<Integer>();
	static int T;
	static Queue<Integer> q = new LinkedList<Integer>();
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
	static StringTokenizer st;
	static int transformation;
	public static void main(String[] args) throws NumberFormatException, IOException {
		makePrimeSet();
		T = Integer.parseInt(br.readLine());
		for(int testcase=1;testcase<=T;testcase++){
			st = new StringTokenizer(br.readLine());
			int original = Integer.parseInt(st.nextToken());
			int target = Integer.parseInt(st.nextToken());
			bfs(original,target);
		}
	}
	private static void bfs(int original, int target) {
		
	}
	private static void makePrimeSet() {
		boolean[] visit = new boolean[10000];
		for(int i=2;i<=9999;i++) {
			if(i>2 && i%2==0) continue; //짝수는 어차피 소수가 아니다.
			for(int j=2;(j*i)<=9999;j++) visit[j*i] = true;
		}
		for(int i=1000;i<=9999;i++) {
			if(visit[i]==false) {
				primeSet.add(i);
			}
		}
	}
}
