package CodingStudySamsung모의;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.StringTokenizer;
/*
 * 등산로는 높이가 가장 높은곳에서 낮은곳으로 흐름
 * 높이가 같은곳과 대각선은 갈 수 없다.
 * 가장 높은곳에서 시작한다.
 * 
 * 딱 한곳을 정해서 최대 1~5만큼 깎을 수 있음.
 */
public class 등산로조성 {
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
	static StringTokenizer st;
	static int[] dr = {-1,0,1,0};
	static int[] dc = {0,1,0,-1};//상우하좌
	static int N,K;
	static int[][] map;
	static ArrayList<int[]> startList;
	public static void main(String[] args) throws NumberFormatException, IOException {
		int T = Integer.parseInt(br.readLine());
		for(int testcase=1;testcase<=T;testcase++){
			setData();
		}
	}
	private static void setData() throws IOException {
		st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		K = Integer.parseInt(st.nextToken());
		map = new int[N][N];
		startList = new ArrayList<int[]>();
		int max=0;
		for(int row=0;row<N;row++) {
			st = new StringTokenizer(br.readLine());
			for(int col=0;col<N;col++){
				map[row][col] = Integer.parseInt(st.nextToken());
				if(map[row][col]>0) max = map[row][col];
			}
		}
		for(int row=0;row<N;row++){
			for(int col=0;col<N;col++) {
				if(map[row][col]==max) startList.add(new int[] {row,col});
			}
		}
	}
}
