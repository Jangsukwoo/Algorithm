package CodingStudyHW;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

/*
 * 1:40 시작
 * 
 */
public class 미생물격리 {
	static int T;
	static class Microorganism implements Comparable<Microorganism>{
		int row;
		int col;
		int crowd;
		int dir;
		int idx;
		boolean alive;
		public Microorganism(int row, int col,int crowd, int dir, int idx, boolean alive) {
			this.row = row;
			this.col = col;
			this.crowd= crowd;
			this.dir = dir;
			this.idx = idx;
			this.alive = alive;
		}
		@Override
		public int compareTo(Microorganism o) {
			return -Integer.compare(this.crowd,o.crowd);//군집 이 큰 순서 - 내림차순
		}
	}
	static PriorityQueue<Microorganism>[][] cellMap;
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static StringTokenizer st;
	static int N,M,K;
	static Microorganism[] micros;
	static int[] dr = {0,-1,1,0,0};
	static int[] dc = {0,0,0,-1,1};//X,상,하,좌,우
	public static void main(String[] args) throws NumberFormatException, IOException {
		T = Integer.parseInt(br.readLine());
		for(int testcase=1;testcase<=T;testcase++){
			setData();
			timerON();
		}
	}
	private static void timerON() {
		int time=0;
		while(time<=M){
			//군집 이동 
			moveMicroorganism();
		}
	}
	private static void moveMicroorganism() {
		for(int i=0;i<K;i++){
			if(micros[i].alive){//살아있는 군집만 이동 시킨다.
				Microorganism currentM = cellMap[micros[i].row][micros[i].col].poll();
				int cr = currentM.row;
				int cc = currentM.col;
				int dir = currentM.dir;
			}
		}
	}
	private static void setData() throws IOException {
		st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		K = Integer.parseInt(st.nextToken());
		cellMap = new PriorityQueue[N][N];
		for(int row=0;row<N;row++) {
			for(int col=0;col<N;col++) {
				cellMap[row][col] = new PriorityQueue<Microorganism>();
			}
		}
		for(int i=0,row,col,crowd,dir;i<K;i++) {
			st = new StringTokenizer(br.readLine());
			row = Integer.parseInt(st.nextToken());
			col = Integer.parseInt(st.nextToken());
			crowd = Integer.parseInt(st.nextToken());
			dir = Integer.parseInt(st.nextToken());
			micros[i] = new Microorganism(row, col, crowd, dir, i, true);
			cellMap[row][col].add(micros[i]); //cellMap에 투입
		}
		
	}
}
