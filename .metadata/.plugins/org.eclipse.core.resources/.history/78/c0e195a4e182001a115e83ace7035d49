package CodingStudy;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

/*
 * 15:06
 * 게리맨더링 그냥 풀어보기
 * 인구가 가장 많은 선거구와 가장 적은 선거구의 인구 차이의 최소값
 * 부등식 그대로 짜본다. 경계선을 그어준다.
 * 
 * 차근차근 예쁘게 
 * 
 * 선거구는 적어도 하나의 구를 포함하고 있어야한다.
 */
public class 게리맨더링2 {
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static StringTokenizer st;
	static int[][] city;
	static int[][] divideCity;
	static int N;
	public static void main(String[] args) throws NumberFormatException, IOException {
		setData();
		divdeAndGetMinValue();
	}
	private static void divdeAndGetMinValue() {
		for(int d1=1;d1<=(N-1);d1++) {
			for(int d2=1;d2<=(N-1);d2++){//경계선 길이 설정
				for(int x=0;x<N;x++) {//x가 행
					for(int y=0;y<N;y++){//y가 열
						//선정된 점에서  
						if(possible(x,y,d1,d2)){//경계선 나누기가 가능하면
							divide(x,y,d1,d2);//행, 열 , 거리
								bfs(0,0,)
							}
						}
						
					}
				}
			}
		}
	}
	private static void setArea(int x, int y, int d1, int d2) {
		for(int row=0;row<(x+d1);row++) {
			for(int col=0;col<=y;col++) {
				divideCity[row][col] = 1;
			}
		}
		System.out.println("1번 그림");
		view();
		for(int row=0;row<=(x+d2);row++) {
			for(int col=y+1;col<N;col++) {
				divideCity[row][col] = 2;
			}
		}
		
		for(int row=(x+d1);row<N;row++) {
			for(int col=0;col<(y-d1+d2);col++) {
				divideCity[row][col] = 3;
			}
		}
		
		for(int row=(x+d2+1);row<N;row++) {
			for(int col=(y-d1+d2);col<N;col++) {
				divideCity[row][col] = 4;
			}
		}
		
		for(int row=0;row<N;row++) {
			for(int col=0;col<N;col++) {
				if(divideCity[row][col]==0) divideCity[row][col] = 5;
			}
		}
	}
	private static void divide(int x, int y, int d1, int d2) {
		divideCity = new int[N][N];
		System.out.println("기준점"+x+" "+y);
		for(int i=0;i<=d1;i++) divideCity[x+i][y-i]=5;
		for(int i=0;i<=d2;i++) divideCity[x+i][y+i]=5;
		for(int i=0;i<=d2;i++) divideCity[x+d1+i][y-d1+i]=5;
		for(int i=0;i<=d1;i++) divideCity[x+d2+i][y+d2-i]=5;
	}
	private static void view() {
		for(int row=0;row<N;row++) {
			for(int col=0;col<N;col++) {
				System.out.print(divideCity[row][col]);
			}
			System.out.println();
		}
		System.out.println();
	}
	private static boolean possible(int x, int y, int d1, int d2) {
		//x가 행 y가 열 
		if((x+d1)<N && (y-d1)>=0 && (x+d2)<N && (y+d2)<N&& (x+d2+d1)<N) return true;
		return false;
	}
	private static void setData() throws NumberFormatException, IOException {
		N = Integer.parseInt(br.readLine());
		city = new int[N][N];
		for(int row=0;row<N;row++) {
			st = new StringTokenizer(br.readLine());
			for(int col=0;col<N;col++) {
				city[row][col] = Integer.parseInt(st.nextToken());
			}
		}
	}
}
