package CodingStudyHW;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

/*
 * 15:22~ 
 * Dijkstra Algorithm
 * pq를 활용해서 시작점부터 하나씩 확인하면서 구한다.
 * 모든 거리는 처음에 INF이고 시작노드부터 시작.
 * 이때 인접리스트를 쓴다.
 * 
 */
public class 최소비용구하기 {
	static int N; //1<=N<=1000
	static int M;
	static int startNode;
	static int endNode;
	static int minDist;
	static int[] dist;
	static int INF = 987654321;
	static PriorityQueue<int[]> pq;
	static ArrayList<int[]>[] adjList; //인접리스트
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static StringTokenizer st;
	public static void main(String[] args) throws IOException {
		setData();
		dijkstra();
	}
	private static void dijkstra() {
		dist[startNode] = 0;
		pq.add(new int[] {startNode,0});
		while(!pq.isEmpty()) {
			
		}
	}
	private static void setData() throws IOException {
		st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		st = new StringTokenizer(br.readLine());
		M = Integer.parseInt(st.nextToken());
		dist = new int[N+1];
		adjList = new ArrayList[N+1];
		pq = new PriorityQueue<int[]>();
		for(int i=1;i<=N;i++) adjList[i] = new ArrayList<int[]>();
		for(int i=0,from,to,cost;i<M;i++) {
			st = new StringTokenizer(br.readLine());
			from = Integer.parseInt(st.nextToken());
			to = Integer.parseInt(st.nextToken());
			cost = Integer.parseInt(st.nextToken());
			adjList[from].add(new int[] {to,cost});
			adjList[to].add(new int[] {from,cost});
		}
		st = new StringTokenizer(br.readLine());
		startNode = Integer.parseInt(st.nextToken());
		endNode = Integer.parseInt(st.nextToken());
	}
}
