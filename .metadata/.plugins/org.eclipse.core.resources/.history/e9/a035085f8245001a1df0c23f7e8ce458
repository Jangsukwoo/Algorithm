package CodingStudySamsung모의;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.StringTokenizer;
/*
 * 경계에 닿으면 미생물 수가 반띵
 */
public class 미생물격리 {
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
	static StringTokenizer st;
	static int[][] cell;
	static int N,M,K;
	static int[] dr = {-1,1,0,0};
	static int[] dc = {0,0,-1,1};//상하좌우
	static PriorityQueue<Microorganism>[][] pq;
	static class Microorganism{
		int row;
		int col;
		int clusterSize;
		int dir;
		public Microorganism(int row, int col, int clusterSize, int dir) {
			this.row = row;
			this.col = col;
			this.clusterSize = clusterSize;
			this.dir = dir;
		}
		
	}
	public static void main(String[] args) throws NumberFormatException, IOException {
		int T = Integer.parseInt(br.readLine());
		for(int testcase=1;testcase<=T;testcase++){
			setData();
		}
	}
	private static void setData() throws NumberFormatException, IOException {
		st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		K = Integer.parseInt(st.nextToken());
		cell = new int[N][N];
		pq = new PriorityQueue[N][N];
		Comparator<Microorganism> cp = new Comparator<Microorganism>() {
			@Override
			public int compare(Microorganism o1, Microorganism o2) {
				return -Integer.compare(o1.clusterSize,o2.clusterSize);//내림차순
			}
		};
		for(int row=0;row<N;row++) {
			for(int col=0;col<N;col++) {
				pq[row][col] = new PriorityQueue<Microorganism>(cp);
			}
		}
		for(int i=0;i<K;i++) {
			st = new StringTokenizer(br.readLine());
		}
	}
}
