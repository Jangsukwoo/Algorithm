package CodingStudySamsungProblem;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;
/*
 * 미세먼지는 각 자리에서 확산하는데 
 * 인접한 네방향으로 확산함 
 * 확산량 : Arc/5
 * Arc에 남는 미세먼지의 양은 확산량x확산된 방향 개수
 */
public class 미세먼지안녕 {
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
	static StringTokenizer st;
	static int R,C,T;
	static int[][] room;
	static int cleanerR1,cleanerC1;
	static int cleanerR2,cleanerC2;
	static int[] dr = {-1,0,1,0};
	static int[] dc = {0,1,0,-1};
	static Queue<Dust> q;
	static class Dust{
		int row;
		int col;
		int amount;
		public Dust(int row, int col, int amount) {
			super();
			this.row = row;
			this.col = col;
			this.amount = amount;
		
	}
	public static void main(String[] args) throws IOException {
		setData();
		spreadSimulation();
	}
	private static void spreadSimulation() {
		int time=0;
		while(!q.isEmpty()){
			
		}
	}
	private static void setData() throws IOException {
		st = new StringTokenizer(br.readLine());
		R = Integer.parseInt(st.nextToken());
		C = Integer.parseInt(st.nextToken());
		T = Integer.parseInt(st.nextToken());
		room = new int[R][C];
		q = new LinkedList<Dust>();
		for(int row=0;row<R;row++) {
			st = new StringTokenizer(br.readLine());
			for(int col=0;col<C;col++) {
				room[row][col] = Integer.parseInt(st.nextToken());
				if(room[row][col]>0) q.add(new Dust(row, col, room[row][col]));
			}
		}
	}
}
