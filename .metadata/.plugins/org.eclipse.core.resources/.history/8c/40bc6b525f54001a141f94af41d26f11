package CodingStudy;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class 미세먼지또안녕 {
	/*
	 * 확산량은 그 칸의 5를 나눈 값이고
	 * 확산 후 그 칸에 남는 미세먼지 양은 확산량x확산된 칸개수
	 */
	static int R,C,T;//data size
	static int ramainDust;//남은 미세먼지량
	static int[][] room;//방
	static int cleanerR1,cleanerC1;
	static int cleanerR2,cleanerC2; //공기청정기 위치 
	static Queue<int[]> q;//먼지 넣을 큐
	
	public static void main(String[] args) throws IOException {
		setData();
		simulation();
	}
	private static void simulation() {
		int[] dr = {-1,0,1,0};
		int[] dc = {0,1,0,-1};
		int time=0;
		int[][] dustMap = new int[R][C];
		while(!q.isEmpty()){
			if(time==T) return;
			int size = q.size();
			for(int i=0;i<size;i++){
				int[] dust = q.poll();
				int dustRow = dust[0];
				int dustCol = dust[1];
				int dustAmount = dust[2];
				int adjCnt=0;
				int diffusionAmount = 
			}
		}
	}
	private static void setData() throws IOException {
		BufferedReader br =  new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		R = Integer.parseInt(st.nextToken());
		C = Integer.parseInt(st.nextToken());
		T = Integer.parseInt(st.nextToken());
		room = new int[R][C];
		q = new LinkedList<int[]>();
		for(int row=0;row<R;row++) {
			st = new StringTokenizer(br.readLine());
			for(int col=0;col<C;col++) {
				room[row][col] = Integer.parseInt(st.nextToken());
				if(room[row][col]>0) q.add(new int[] {row,col,room[row][col]});
				if(room[row][col]==-1 && cleanerR1==0 && cleanerC1==0) {
					cleanerR1 = row;
					cleanerC1 = col;
				}else if(room[row][col]==-1 && cleanerR1!=0 && cleanerC1!=0) {
					cleanerR2 = row;
					cleanerC2 = col;
				}
			}
		}
	}
}
