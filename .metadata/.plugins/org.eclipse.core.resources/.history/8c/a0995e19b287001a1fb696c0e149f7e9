package CodingStudyHW;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;


/*
 * 
 */
public class 아기상어 {
	static int N;
	static int[][] aquarium;
	static StringTokenizer st;
	static BabyShark babyshark;
	static boolean[][] visit;
	static Queue<BabyShark> q = new LinkedList<BabyShark>();
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static class BabyShark{
		int row;
		int col;
		int size;
		int eat;
		int time;
		public BabyShark(int row, int col, int size, int eat, int time) {
			this.row = row;
			this.col = col;
			this.size = size;
			this.eat = eat;
			this.time = time;
		}
	}
	public static void main(String[] args) throws NumberFormatException, IOException {
		setData();
		simulation();
	}
	private static void simulation() {
		while(true){
			int feedAmount = aquariumCheck();
			switch (feedAmount) {
			case 0:	//먹을 수 있는 물고기가 없으니 여기서 종료
				return;
			case 1:			
				bfs();
				break;
			default:
				
				break;
			}
		}
	}
	private static void bfs() {
		visit = new boolean[N][N];
		q.clear();
		insertQueue(babyshark);
		while(!q.isEmpty()){
			int size = q.size();
			for(int i=0;i<size;i++){
				
			}
		}
	}
	private static void insertQueue(BabyShark babyshark) {
		q.add(babyshark);
		visit[babyshark.row][babyshark.col] = true;
	}
	private static int aquariumCheck(){
		int cnt=0;
		for(int row=0;row<N;row++) {
			for(int col=0;col<N;col++) {
				if(aquarium[row][col]<babyshark.size) cnt++;
			}
		}
		return cnt;
	}
	private static void setData() throws NumberFormatException, IOException {
		N = Integer.parseInt(br.readLine());
		aquarium = new int[N][N];
		for(int row=0;row<N;row++) {
			st = new StringTokenizer(br.readLine());
			for(int col=0;col<N;col++) {
				aquarium[row][col] = Integer.parseInt(st.nextToken());
				if(aquarium[row][col]==9) {
					babyshark = new BabyShark(row,col,2,0,0);
				}
			}
		}
	}
}
