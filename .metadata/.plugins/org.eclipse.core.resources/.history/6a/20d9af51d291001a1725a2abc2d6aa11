package CodingTest;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;
import java.util.StringTokenizer;

public class calculator_ryan {
	static char[] cal = new char[] {'*','-','+'};
	static boolean[] visit;
	static int[] pick;
	static long answer;
	static ArrayList<String> series = new ArrayList<String>();
	static Queue<String> q = new LinkedList<String>();
	public static void main(String[] args) {
		//System.out.println(solution("100-200*300-500+20"));
		solution("50*6-3*2");
		System.out.println("답"+answer);
	}
    public static long solution(String expression){
    	answer = 0;
    	pick = new int[3];
    	visit = new boolean[3];
    	System.out.println(expression);
    	for(int i=0;i<expression.length();i++) {
    		if(expression.charAt(i)=='+' || expression.charAt(i)=='-' || expression.charAt(i)=='*') {
    			q.add(String.valueOf(expression.charAt(i)));
    		}
    	}
    	StringTokenizer st = new StringTokenizer(expression,"+|-|*");
    	while(st.hasMoreTokens()) {
    		String num = st.nextToken();
    		series.add(num);
    		if(!q.isEmpty()) {
    			series.add(q.poll());
    		}
    	}
    	//list=  expression.split("+|-|*");
    	nPr(0,0);
        return answer;
    }
	private static void nPr(int idx, int depth) {
		if(depth==3){
			ArrayList<String> temp = copy(series);
			ArrayList<String> newlist = null;
			System.out.println("다음판~~~~~~~~~~~~~~~");
			for(int i=0;i<3;i++) {
				newlist = new ArrayList<String>();
				Stack<String> stack = new Stack<String>();
				boolean flag = false;
				for(int j=0;j<temp.size();j++){
					stack.add(temp.get(j));
					if(flag){
						long rightValue = Long.parseLong(stack.pop());
						stack.pop();
						long leftValue = Long.parseLong(stack.pop());
						long value = 0;
						switch (cal[pick[i]]) {
						case '*':
							value = leftValue*rightValue;
							break;
						case '+':
							value = leftValue+rightValue;
							break;
						case '-':
							value = leftValue-rightValue;
							break;
						}
						flag = false;
					}
					if(temp.get(j).equals(String.valueOf(cal[pick[i]]))){ //연산자 찾음
						flag=true;
					}
				}
				temp = copy(stack);
			}
			answer = Math.max(answer, Math.abs(Long.parseLong(newlist.get(0))));
			System.out.println("최종");
			for(String data : temp) {
				System.out.print(data+" ");
			}
			System.out.println();
			return;
		}
		for(int i=0;i<3;i++){
			if(visit[i]==false) {
				pick[depth] = i;
				visit[i] = true;
				nPr(i+1,depth+1);
				visit[i] = false;
			}
		}
	}
	private static ArrayList<String> copy(Stack<String> stack){
		ArrayList<String> temp = new ArrayList<String>();
		for(int i=0;i<stack.size();i++) {
			temp.add(stack.get(i));
		}
		return temp;
	}
}

