package 공채대비;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

/*
 * 10:25~
 * A1->A2로의 최단경로는 여러가지가 나올 수 있다.
 */
public class 연결 {
	static int N,M;
	static int A1R,A1C;
	static int A2R,A2C;
	static int B1R,B1C;
	static int B2R,B2C;
	static int[][] circuit;
	static boolean[][] visit;
	static int[][] dist;
	static int Alength;
	static int[] dr = {-1,0,1,0};
	static int[] dc = {0,1,0,-1};
	static Queue<int[]> q;
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static StringTokenizer st;
	public static void main(String[] args) throws IOException {
		setData();
		connectA();
		reverseConnectA();
	}
	private static void reverseConnectA() {
		q.clear();
		int length = Alength-1;
		q.add(new int[] {A2R,A2C});
		while(!q.isEmpty()){
			int size = q.size();
			for(int i=0;i<size;i++) {
				int[] current = q.poll();
				int cr = current[0];
				int cc = current[1];
				for(int dir=0;dir<4;dir++) {
					
				}
			}
		}
	}
	private static void connectA(){
		int length = 1;
		boolean find = false;
		while(!q.isEmpty()){
			int size = q.size();
			for(int i=0;i<size;i++){
				int[] current = q.poll();
				int cr = current[0];
				int cc = current[1];
				int cd = current[2];
				if(cr==A2R && cc==A2C){
					System.out.println(cr+" "+cc);
					Alength = cd;
					System.out.println(Alength);
					find = true;
					continue;
				}
				for(int dir=0;dir<4;dir++){
					int nr = cr+dr[dir];
					int nc = cc+dc[dir];
					if(rangeCheck(nr,nc)) {
						if(visit[nr][nc]==false){
							insertQueue(nr,nc,length);
						}
					}
				}
			}
			length++;
			if(length>Alength && find) break;
		}
		
		
		//view();
	}
	private static void view() {
		for(int row=0;row<=N;row++) {
			for(int col=0;col<=M;col++) {
				System.out.print(dist[row][col]+" ");
			}
			System.out.println();
		}
		System.out.println();
	}
	private static boolean rangeCheck(int nr, int nc) {
		if(nr>=0 && nr<=N && nc>=0 && nc<=M) return true;
		return false;
	}
	private static void setData() throws IOException{
		st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		circuit = new int[N+1][M+1];
		visit = new boolean[N+1][M+1];
		dist = new int[N+1][M+1];
		st = new StringTokenizer(br.readLine());
		A1C = Integer.parseInt(st.nextToken());
		A1R = Integer.parseInt(st.nextToken());
		st = new StringTokenizer(br.readLine());
		A2C = Integer.parseInt(st.nextToken());
		A2R = Integer.parseInt(st.nextToken());
		st = new StringTokenizer(br.readLine());
		B1C = Integer.parseInt(st.nextToken());
		B1R = Integer.parseInt(st.nextToken());
		st = new StringTokenizer(br.readLine());
		B1C = Integer.parseInt(st.nextToken());
		B1R = Integer.parseInt(st.nextToken());
		circuit[A1R][A1C] = 1;
		q = new LinkedList<int[]>();
		insertQueue(A1R,A1C,0);
		circuit[A2R][A2C] = 1;
	}
	private static void insertQueue(int a1r, int a1c,int d){
		q.add(new int[] {a1r,a1c,d});
		visit[a1r][a1c] = true;
		dist[a1r][a1c] = d;
	}
}
