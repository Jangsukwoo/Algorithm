package 공채대비;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.PriorityQueue;
import java.util.StringTokenizer;
/*
 * N,M,K
 */
public class 나무재테크 {
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static StringTokenizer st;
	static int N,M,K;
	static PriorityQueue<Tree>[][] ground;
	static int[][] nutrient;
	static int[][] addNutrient;
	static int[] dr = {-1,-1,0,1,1,1,0,-1};
	static int[] dc = {0,1,1,1,0,-1,-1,-1};
	static class Tree implements Comparable<Tree>{
		int row;
		int col;
		int age;
		boolean life;
		public Tree(int row, int col, int age, boolean life) {
			this.row = row;
			this.col = col;
			this.age = age;
			this.life = life;
		}
		@Override
		public int compareTo(Tree o) {
			return Integer.compare(this.age,o.age); //어린순
		}
	}
	public static void main(String[] args) throws IOException {
		setData();
		simulation();
	}
	private static void simulation() {
		for(int year=1;year<=K;year++) {
			
		}
	}
	private static void setData() throws IOException {
		st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		K = Integer.parseInt(st.nextToken());
		ground = new PriorityQueue[N][N];
		nutrient = new int[N][N];
		addNutrient = new int[N][N];
		for(int row=0;row<N;row++){
			st = new StringTokenizer(br.readLine());
			for(int col=0;col<N;col++) {
				nutrient[row][col] = 5;
				ground[row][col] = new PriorityQueue<Tree>();
				addNutrient[row][col] = Integer.parseInt(st.nextToken());
			}
		}
		for(int i=0;i<M;i++) {
			st = new StringTokenizer(br.readLine());
			int col = Integer.parseInt(st.nextToken())-1;
			int row = Integer.parseInt(st.nextToken())-1;
			int age = Integer.parseInt(st.nextToken());
			ground[row][col].add(new Tree(row, col, age, true));
		}
	}
}
