package SamsungDS;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

/*
 * 1이 적힌 칸을 모두 덮어야 하는데 필요한 색종이의 최소 개수
 */
public class 색종이붙이기 {
	static int[][] paper;
	static BufferedReader br;
	static StringTokenizer st;
	static boolean possible;
	static int[] colorPaper;
	public static void main(String[] args) throws IOException {
		setData();
		dfs(0,0,paper);
	}
	private static void dfs(int cr, int cc, int[][] testPaper) {
		for(int row=cr;row<10;row++) {
			for(int col=0;col<10;col++) {
				if(testPaper[row][col]==1) {
					for(int length=1;length<=5;length++) {
						if(colorPaper[length]!=0){//종이가 있다면
							if(attachPossible(row,col,length)){
								colorPaper[length]--;
								attach(row,col,length);
								dfs(row,col,testPaper);
								detach(row,col,length);
							}
						}
					}
				}
			}
		}
		
	}
	private static void attach(int cr, int cc, int length) {
		for(int row=cr;cr<(cr+length);cr++) {
			for(int col=cc;cc<(cc+length);cc++) {
				paper[row][col]=0;
			}
		}
	}
	private static boolean attachPossible(int cr, int cc, int length){
		if((cr+length)>9 && cc+length>9) return false;
		for(int row=cr;cr<(cr+length);cr++) {
			for(int col=cc;cc<(cc+length);cc++) {
				if(paper[row][col]==0) return false;
			}
		}
		return true;
	}
	private static void setData() throws IOException {
		paper = new int[10][10];
		br = new BufferedReader(new InputStreamReader(System.in));
		colorPaper = new int[6];
		Arrays.fill(colorPaper,5);//5장씩 충전
		for(int row=0;row<10;row++) {
			st = new StringTokenizer(br.readLine());
			for(int col=0;col<10;col++) {
				paper[row][col] = Integer.parseInt(st.nextToken());
			}
		}
	}
}
